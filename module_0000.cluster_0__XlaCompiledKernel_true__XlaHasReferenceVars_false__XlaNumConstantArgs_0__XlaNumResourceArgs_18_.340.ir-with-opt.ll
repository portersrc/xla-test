target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"
target triple = "nvptx64-nvidia-cuda"

@buffer_for_constant_306 = local_unnamed_addr addrspace(1) constant [4 x i8] c"\00\00\00B", align 128
@buffer_for_constant_151 = local_unnamed_addr addrspace(1) constant [4 x i8] c"\00\00\00\80", align 128
@buffer_for_constant_61 = local_unnamed_addr addrspace(1) constant [4 x i8] zeroinitializer, align 128
@buffer_for_constant_60 = local_unnamed_addr addrspace(1) constant [4 x i8] c"\00\00\80\FF", align 128
@shared_cache = private unnamed_addr addrspace(3) global [5 x [1 x [1 x float]]] undef
@shared_cache1 = private unnamed_addr addrspace(3) global [1 x [1 x [1 x float]]] undef
@shared_cache2 = private unnamed_addr addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef

; Function Attrs: argmemonly nounwind
define void @fusion_12(i8* noalias nocapture readonly align 16 dereferenceable(8) %alloc3, i8* noalias nocapture readonly align 16 dereferenceable(4) %alloc4, i8* noalias nocapture readonly align 16 dereferenceable(4) %alloc5, i8* noalias nocapture readonly align 16 dereferenceable(4) %alloc6, i8* noalias nocapture writeonly align 128 dereferenceable(5272) %temp_buf) local_unnamed_addr #0 {
entry:
  %temp_buf40 = addrspacecast i8* %temp_buf to i8 addrspace(1)*
  %alloc638 = addrspacecast i8* %alloc6 to i8 addrspace(1)*
  %alloc536 = addrspacecast i8* %alloc5 to i8 addrspace(1)*
  %alloc434 = addrspacecast i8* %alloc4 to i8 addrspace(1)*
  %alloc332 = addrspacecast i8* %alloc3 to i8 addrspace(1)*
  %0 = bitcast i8 addrspace(1)* %alloc332 to i64 addrspace(1)*
  %1 = bitcast i8 addrspace(1)* %alloc638 to float addrspace(1)*
  %2 = bitcast i8 addrspace(1)* %alloc434 to float addrspace(1)*
  %3 = load float, float addrspace(1)* %2, align 16, !invariant.load !39
  %4 = load float, float addrspace(1)* %1, align 16, !invariant.load !39
  %5 = load i64, i64 addrspace(1)* %0, align 16, !invariant.load !39
  %6 = add i64 %5, 1
  %7 = sitofp i64 %6 to float
  %8 = fmul float %7, 5.000000e-01
  %9 = tail call float @llvm.trunc.f32(float %8) #5
  %10 = fmul float %9, 2.000000e+00
  %11 = fsub float %7, %10
  %12 = tail call float @llvm.fabs.f32(float %11) #5
  %13 = fcmp oeq float %12, 1.000000e+00
  %14 = tail call float @llvm.fabs.f32(float %4) #5
  %15 = fcmp olt float %14, 0x3810000000000000
  %16 = fmul float %14, 0x4170000000000000
  %.07.i = select i1 %15, float %16, float %14
  %17 = bitcast float %.07.i to i32
  %18 = and i32 %17, 8388607
  %19 = or i32 %18, 1065353216
  %20 = bitcast i32 %19 to float
  %21 = fcmp ogt float %20, 0x3FF6A09E60000000
  %22 = fmul float %20, 5.000000e-01
  %m.i.i.0.i = select i1 %21, float %22, float %20
  %23 = fadd float %m.i.i.0.i, 1.000000e+00
  %24 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %23) #11, !srcloc !40
  %25 = tail call float @llvm.fabs.f32(float %7) #5
  %26 = fcmp olt float %4, 0.000000e+00
  %or.cond.i = select i1 %26, i1 %13, i1 false
  %27 = fcmp oeq float %4, 0.000000e+00
  br i1 %27, label %28, label %35

28:                                               ; preds = %entry
  %29 = fcmp oeq float %12, 1.000000e+00
  %30 = fadd float %4, %4
  %31 = bitcast float %30 to i32
  %ti.0.i = select i1 %29, i32 %31, i32 0
  %32 = icmp slt i64 %6, 0
  %33 = or i32 %ti.0.i, 2139095040
  %ti.1.i = select i1 %32, i32 %33, i32 %ti.0.i
  %34 = bitcast i32 %ti.1.i to float
  br label %__nv_fabsf.exit7.i

35:                                               ; preds = %entry
  %36 = fcmp ogt float %20, 0x3FF6A09E60000000
  %37 = fcmp olt float %14, 0x3810000000000000
  %38 = fcmp ogt float %25, 0x46FED09BE0000000
  %39 = fmul float %7, 0x3F20000000000000
  %.04.i = select i1 %38, float %39, float %7
  %expo.i.i.0.i = select i1 %37, float -1.510000e+02, float -1.270000e+02
  %40 = lshr i32 %17, 23
  %41 = uitofp i32 %40 to float
  %42 = fadd float %expo.i.i.0.i, %41
  %43 = fadd float %42, 1.000000e+00
  %expo.i.i.2.i = select i1 %36, float %43, float %42
  %44 = fmul float %expo.i.i.2.i, 0x3FE62E4000000000
  %45 = fadd float %m.i.i.0.i, -1.000000e+00
  %46 = fmul float %45, 2.000000e+00
  %47 = fmul float %24, %46
  %48 = fmul float %47, %47
  %49 = tail call float @llvm.fma.f32(float %48, float 0x3F631E1FC0000000, float 0x3F8995EC60000000) #5
  %50 = tail call float @llvm.fma.f32(float %49, float %48, float 0x3FB55557A0000000) #5
  %51 = fmul float %48, %50
  %52 = fmul float %47, %51
  %53 = fadd float %47, %52
  %54 = fsub float %47, %53
  %55 = fadd float %52, %54
  %56 = fneg float %47
  %57 = fsub float %45, %47
  %58 = fmul float %57, 2.000000e+00
  %59 = tail call float @llvm.fma.f32(float %56, float %45, float %58) #5
  %60 = fmul float %24, %59
  %61 = fadd float %60, %55
  %62 = fadd float %53, %61
  %63 = fadd float %44, %62
  %64 = fsub float %44, %63
  %65 = fadd float %62, %64
  %66 = fsub float %53, %62
  %67 = fadd float %61, %66
  %68 = fadd float %67, %65
  %69 = fmul float %expo.i.i.2.i, 0x3EB7F7D1C0000000
  %70 = fadd float %69, %68
  %71 = fadd float %63, %70
  %72 = fmul float %.04.i, %71
  %73 = fsub float %63, %71
  %74 = fadd float %70, %73
  %75 = fneg float %72
  %76 = tail call float @llvm.fma.f32(float %.04.i, float %71, float %75) #5
  %77 = tail call float @llvm.fma.f32(float %.04.i, float %74, float %76) #5
  %78 = tail call float @llvm.fma.f32(float %71, float 0.000000e+00, float %77) #5
  %79 = fadd float %72, %78
  %80 = bitcast float %79 to i32
  %81 = icmp eq i32 %80, 1118925336
  %prod.i.143.0.i = select i1 %81, float 0x40562E42E0000000, float %79
  %82 = fmul float %prod.i.143.0.i, 0x3FF7154760000000
  %83 = tail call float @llvm.trunc.f32(float %82) #5
  %84 = tail call float @llvm.fabs.f32(float %83) #5
  %85 = fcmp ogt float %84, 1.260000e+02
  %86 = bitcast float %83 to i32
  %87 = and i32 %86, -2147483648
  %88 = or i32 %87, 1123811328
  %89 = bitcast i32 %88 to float
  %j.i.i.0.i = select i1 %85, float %89, float %83
  %90 = tail call float @llvm.fma.f32(float %j.i.i.0.i, float 0xBFE62E4300000000, float %prod.i.143.0.i) #5
  %91 = tail call float @llvm.fma.f32(float %j.i.i.0.i, float 0x3E205C6100000000, float %90) #5
  %92 = fmul float %91, 0x3FF7154760000000
  %93 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %92) #5
  %94 = fadd float %j.i.i.0.i, 0x4168000FE0000000
  %95 = bitcast float %94 to i32
  %96 = shl i32 %95, 23
  %97 = bitcast i32 %96 to float
  %98 = fmul float %93, %97
  %99 = fcmp une float %98, 0x7FF0000000000000
  %100 = fsub float %72, %79
  %101 = fadd float %78, %100
  %102 = fadd float %101, 0x3EE0000000000000
  %prod.i.042.0.i = select i1 %81, float %102, float %101
  %103 = tail call float @llvm.fma.f32(float %98, float %prod.i.042.0.i, float %98) #5
  %t.i.0.i = select i1 %99, float %103, float %98
  %104 = bitcast float %t.i.0.i to i32
  %105 = xor i32 %104, -2147483648
  %106 = bitcast i32 %105 to float
  %t.0.i = select i1 %or.cond.i, float %106, float %t.i.0.i
  br label %__nv_fabsf.exit7.i

__nv_fabsf.exit7.i:                               ; preds = %35, %28
  %t.2.i = phi float [ %34, %28 ], [ %t.0.i, %35 ]
  %107 = fadd float %14, %25
  %108 = bitcast float %107 to i32
  %109 = icmp sgt i32 %108, 2139095039
  br i1 %109, label %__nv_isnanf.exit.i, label %__nv_powf.exit

__nv_isnanf.exit.i:                               ; preds = %__nv_fabsf.exit7.i
  %110 = fcmp ugt float %14, 0x7FF0000000000000
  %111 = fcmp ugt float %25, 0x7FF0000000000000
  %or.cond5.i = select i1 %110, i1 true, i1 %111
  br i1 %or.cond5.i, label %112, label %__nv_isinff.exit.i

112:                                              ; preds = %__nv_isnanf.exit.i
  %113 = fadd float %4, %7
  br label %__nv_powf.exit

__nv_isinff.exit.i:                               ; preds = %__nv_isnanf.exit.i
  %114 = fcmp oeq float %25, 0x7FF0000000000000
  br i1 %114, label %__nv_fabsf.exit19.i, label %__nv_isinff.exit23.i

__nv_fabsf.exit19.i:                              ; preds = %__nv_isinff.exit.i
  %115 = fcmp ogt float %14, 1.000000e+00
  %ti.2.i = select i1 %115, i32 2139095040, i32 0
  %116 = icmp slt i64 %6, 0
  %117 = xor i32 %ti.2.i, 2139095040
  %ti.3.i = select i1 %116, i32 %117, i32 %ti.2.i
  %118 = fcmp oeq float %4, -1.000000e+00
  %119 = bitcast i32 %ti.3.i to float
  %120 = select i1 %118, float 1.000000e+00, float %119
  br label %__nv_powf.exit

__nv_isinff.exit23.i:                             ; preds = %__nv_isinff.exit.i
  %121 = fcmp oeq float %14, 0x7FF0000000000000
  %122 = icmp sgt i64 %6, -1
  %ti.5.i = select i1 %122, i32 2139095040, i32 0
  %123 = or i32 %ti.5.i, -2147483648
  %ti.6.i = select i1 %or.cond.i, i32 %123, i32 %ti.5.i
  %124 = bitcast i32 %ti.6.i to float
  br i1 %121, label %125, label %__nv_powf.exit

125:                                              ; preds = %__nv_isinff.exit23.i
  br label %__nv_powf.exit

__nv_powf.exit:                                   ; preds = %__nv_fabsf.exit7.i, %112, %__nv_fabsf.exit19.i, %__nv_isinff.exit23.i, %125
  %t.6.i = phi float [ %t.2.i, %__nv_fabsf.exit7.i ], [ %113, %112 ], [ %120, %__nv_fabsf.exit19.i ], [ %124, %125 ], [ %t.2.i, %__nv_isinff.exit23.i ]
  %126 = fcmp oeq float %12, 1.000000e+00
  %127 = bitcast i8 addrspace(1)* %alloc536 to float addrspace(1)*
  %128 = load float, float addrspace(1)* %127, align 16, !invariant.load !39
  %129 = tail call float @llvm.fabs.f32(float %128) #5
  %130 = fcmp olt float %129, 0x3810000000000000
  %131 = fmul float %129, 0x4170000000000000
  %.07.i2 = select i1 %130, float %131, float %129
  %132 = bitcast float %.07.i2 to i32
  %133 = and i32 %132, 8388607
  %134 = or i32 %133, 1065353216
  %135 = bitcast i32 %134 to float
  %136 = fcmp ogt float %135, 0x3FF6A09E60000000
  %137 = fmul float %135, 5.000000e-01
  %m.i.i.0.i3 = select i1 %136, float %137, float %135
  %138 = fadd float %m.i.i.0.i3, 1.000000e+00
  %139 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %138) #11, !srcloc !40
  %140 = fcmp olt float %128, 0.000000e+00
  %or.cond.i4 = select i1 %140, i1 %126, i1 false
  %141 = fcmp oeq float %128, 0.000000e+00
  br i1 %141, label %142, label %149

142:                                              ; preds = %__nv_powf.exit
  %143 = fcmp oeq float %12, 1.000000e+00
  %144 = fadd float %128, %128
  %145 = bitcast float %144 to i32
  %ti.0.i5 = select i1 %143, i32 %145, i32 0
  %146 = icmp slt i64 %6, 0
  %147 = or i32 %ti.0.i5, 2139095040
  %ti.1.i6 = select i1 %146, i32 %147, i32 %ti.0.i5
  %148 = bitcast i32 %ti.1.i6 to float
  br label %__nv_fabsf.exit7.i18

149:                                              ; preds = %__nv_powf.exit
  %150 = fcmp ogt float %135, 0x3FF6A09E60000000
  %151 = fcmp olt float %129, 0x3810000000000000
  %152 = fcmp ogt float %25, 0x46FED09BE0000000
  %153 = fmul float %7, 0x3F20000000000000
  %.04.i7 = select i1 %152, float %153, float %7
  %expo.i.i.0.i8 = select i1 %151, float -1.510000e+02, float -1.270000e+02
  %154 = lshr i32 %132, 23
  %155 = uitofp i32 %154 to float
  %156 = fadd float %expo.i.i.0.i8, %155
  %157 = fadd float %156, 1.000000e+00
  %expo.i.i.2.i9 = select i1 %150, float %157, float %156
  %158 = fmul float %expo.i.i.2.i9, 0x3FE62E4000000000
  %159 = fadd float %m.i.i.0.i3, -1.000000e+00
  %160 = fmul float %159, 2.000000e+00
  %161 = fmul float %139, %160
  %162 = fmul float %161, %161
  %163 = tail call float @llvm.fma.f32(float %162, float 0x3F631E1FC0000000, float 0x3F8995EC60000000) #5
  %164 = tail call float @llvm.fma.f32(float %163, float %162, float 0x3FB55557A0000000) #5
  %165 = fmul float %162, %164
  %166 = fmul float %161, %165
  %167 = fadd float %161, %166
  %168 = fsub float %161, %167
  %169 = fadd float %166, %168
  %170 = fneg float %161
  %171 = fsub float %159, %161
  %172 = fmul float %171, 2.000000e+00
  %173 = tail call float @llvm.fma.f32(float %170, float %159, float %172) #5
  %174 = fmul float %139, %173
  %175 = fadd float %174, %169
  %176 = fadd float %167, %175
  %177 = fadd float %158, %176
  %178 = fsub float %158, %177
  %179 = fadd float %176, %178
  %180 = fsub float %167, %176
  %181 = fadd float %175, %180
  %182 = fadd float %181, %179
  %183 = fmul float %expo.i.i.2.i9, 0x3EB7F7D1C0000000
  %184 = fadd float %183, %182
  %185 = fadd float %177, %184
  %186 = fmul float %.04.i7, %185
  %187 = fsub float %177, %185
  %188 = fadd float %184, %187
  %189 = fneg float %186
  %190 = tail call float @llvm.fma.f32(float %.04.i7, float %185, float %189) #5
  %191 = tail call float @llvm.fma.f32(float %.04.i7, float %188, float %190) #5
  %192 = tail call float @llvm.fma.f32(float %185, float 0.000000e+00, float %191) #5
  %193 = fadd float %186, %192
  %194 = bitcast float %193 to i32
  %195 = icmp eq i32 %194, 1118925336
  %prod.i.143.0.i10 = select i1 %195, float 0x40562E42E0000000, float %193
  %196 = fmul float %prod.i.143.0.i10, 0x3FF7154760000000
  %197 = tail call float @llvm.trunc.f32(float %196) #5
  %198 = tail call float @llvm.fabs.f32(float %197) #5
  %199 = fcmp ogt float %198, 1.260000e+02
  %200 = bitcast float %197 to i32
  %201 = and i32 %200, -2147483648
  %202 = or i32 %201, 1123811328
  %203 = bitcast i32 %202 to float
  %j.i.i.0.i11 = select i1 %199, float %203, float %197
  %204 = tail call float @llvm.fma.f32(float %j.i.i.0.i11, float 0xBFE62E4300000000, float %prod.i.143.0.i10) #5
  %205 = tail call float @llvm.fma.f32(float %j.i.i.0.i11, float 0x3E205C6100000000, float %204) #5
  %206 = fmul float %205, 0x3FF7154760000000
  %207 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %206) #5
  %208 = fadd float %j.i.i.0.i11, 0x4168000FE0000000
  %209 = bitcast float %208 to i32
  %210 = shl i32 %209, 23
  %211 = bitcast i32 %210 to float
  %212 = fmul float %207, %211
  %213 = fcmp une float %212, 0x7FF0000000000000
  %214 = fsub float %186, %193
  %215 = fadd float %192, %214
  %216 = fadd float %215, 0x3EE0000000000000
  %prod.i.042.0.i12 = select i1 %195, float %216, float %215
  %217 = tail call float @llvm.fma.f32(float %212, float %prod.i.042.0.i12, float %212) #5
  %t.i.0.i13 = select i1 %213, float %217, float %212
  %218 = bitcast float %t.i.0.i13 to i32
  %219 = xor i32 %218, -2147483648
  %220 = bitcast i32 %219 to float
  %t.0.i14 = select i1 %or.cond.i4, float %220, float %t.i.0.i13
  br label %__nv_fabsf.exit7.i18

__nv_fabsf.exit7.i18:                             ; preds = %149, %142
  %t.2.i17 = phi float [ %148, %142 ], [ %t.0.i14, %149 ]
  %221 = fadd float %25, %129
  %222 = bitcast float %221 to i32
  %223 = icmp sgt i32 %222, 2139095039
  br i1 %223, label %__nv_isnanf.exit.i20, label %__nv_powf.exit31

__nv_isnanf.exit.i20:                             ; preds = %__nv_fabsf.exit7.i18
  %224 = fcmp ugt float %129, 0x7FF0000000000000
  %225 = fcmp ugt float %25, 0x7FF0000000000000
  %or.cond5.i19 = select i1 %224, i1 true, i1 %225
  br i1 %or.cond5.i19, label %226, label %__nv_isinff.exit.i21

226:                                              ; preds = %__nv_isnanf.exit.i20
  %227 = fadd float %128, %7
  br label %__nv_powf.exit31

__nv_isinff.exit.i21:                             ; preds = %__nv_isnanf.exit.i20
  %228 = fcmp oeq float %25, 0x7FF0000000000000
  br i1 %228, label %__nv_fabsf.exit19.i24, label %__nv_isinff.exit23.i25

__nv_fabsf.exit19.i24:                            ; preds = %__nv_isinff.exit.i21
  %229 = fcmp ogt float %129, 1.000000e+00
  %ti.2.i22 = select i1 %229, i32 2139095040, i32 0
  %230 = icmp slt i64 %6, 0
  %231 = xor i32 %ti.2.i22, 2139095040
  %ti.3.i23 = select i1 %230, i32 %231, i32 %ti.2.i22
  %232 = fcmp oeq float %128, -1.000000e+00
  %233 = bitcast i32 %ti.3.i23 to float
  %234 = select i1 %232, float 1.000000e+00, float %233
  br label %__nv_powf.exit31

__nv_isinff.exit23.i25:                           ; preds = %__nv_isinff.exit.i21
  %235 = fcmp oeq float %129, 0x7FF0000000000000
  %236 = icmp sgt i64 %6, -1
  %ti.5.i26 = select i1 %236, i32 2139095040, i32 0
  %237 = or i32 %ti.5.i26, -2147483648
  %ti.6.i27 = select i1 %or.cond.i4, i32 %237, i32 %ti.5.i26
  %238 = bitcast i32 %ti.6.i27 to float
  br i1 %235, label %239, label %__nv_powf.exit31

239:                                              ; preds = %__nv_isinff.exit23.i25
  br label %__nv_powf.exit31

__nv_powf.exit31:                                 ; preds = %__nv_fabsf.exit7.i18, %226, %__nv_fabsf.exit19.i24, %__nv_isinff.exit23.i25, %239
  %t.6.i28 = phi float [ %t.2.i17, %__nv_fabsf.exit7.i18 ], [ %227, %226 ], [ %234, %__nv_fabsf.exit19.i24 ], [ %238, %239 ], [ %t.2.i17, %__nv_isinff.exit23.i25 ]
  %240 = fcmp oeq float %4, 1.000000e+00
  %241 = icmp eq i64 %6, 0
  %or.cond2.i = select i1 %240, i1 true, i1 %241
  %t.6.i.op = fsub float 1.000000e+00, %t.6.i
  %subtract.10 = select i1 %or.cond2.i, float 0.000000e+00, float %t.6.i.op
  %242 = tail call float @llvm.nvvm.sqrt.approx.f(float %subtract.10) #5
  %multiply.12 = fmul float %3, %242
  %243 = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf40, i64 4096
  %244 = bitcast i8 addrspace(1)* %243 to float addrspace(1)*
  %245 = fcmp oeq float %128, 1.000000e+00
  %or.cond2.i29 = select i1 %245, i1 true, i1 %241
  %t.6.i28.op = fsub float 1.000000e+00, %t.6.i28
  %subtract.14 = select i1 %or.cond2.i29, float 0.000000e+00, float %t.6.i28.op
  %divide.15 = fdiv float %multiply.12, %subtract.14
  store float %divide.15, float addrspace(1)* %244, align 128
  ret void
}

; Function Attrs: nofree nosync nounwind readnone speculatable
declare i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: nofree nosync nounwind readnone speculatable
declare i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
define void @broadcast_57(i8* noalias nocapture readonly align 16 dereferenceable(40) %alloc9, i8* noalias nocapture writeonly align 128 dereferenceable(5120) %alloc26, i8* noalias nocapture readnone align 128 dereferenceable(5272) %temp_buf) local_unnamed_addr #2 {
entry:
  %alloc263 = addrspacecast i8* %alloc26 to i8 addrspace(1)*
  %alloc91 = addrspacecast i8* %alloc9 to i8 addrspace(1)*
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !41
  %linear_index_base = shl nuw nsw i32 %0, 2
  %linear_index3 = or i32 %linear_index_base, 3
  %1 = urem i32 %linear_index3, 10
  %linear_index2 = or i32 %linear_index_base, 2
  %2 = urem i32 %linear_index2, 10
  %linear_index1 = or i32 %linear_index_base, 1
  %3 = urem i32 %linear_index1, 10
  %.lhs.trunc = trunc i32 %linear_index_base to i16
  %4 = urem i16 %.lhs.trunc, 10
  %5 = bitcast i8 addrspace(1)* %alloc91 to [10 x float] addrspace(1)*
  %6 = zext i16 %4 to i64
  %7 = getelementptr inbounds [10 x float], [10 x float] addrspace(1)* %5, i64 0, i64 %6
  %8 = load float, float addrspace(1)* %7, align 4, !invariant.load !39
  %9 = bitcast i8 addrspace(1)* %alloc263 to float addrspace(1)*
  %10 = zext i32 %linear_index_base to i64
  %11 = getelementptr float, float addrspace(1)* %9, i64 %10
  %12 = zext i32 %3 to i64
  %13 = getelementptr inbounds [10 x float], [10 x float] addrspace(1)* %5, i64 0, i64 %12
  %14 = load float, float addrspace(1)* %13, align 4, !invariant.load !39
  %15 = zext i32 %2 to i64
  %16 = getelementptr inbounds [10 x float], [10 x float] addrspace(1)* %5, i64 0, i64 %15
  %17 = load float, float addrspace(1)* %16, align 4, !invariant.load !39
  %18 = zext i32 %1 to i64
  %19 = getelementptr inbounds [10 x float], [10 x float] addrspace(1)* %5, i64 0, i64 %18
  %20 = load float, float addrspace(1)* %19, align 4, !invariant.load !39
  %21 = insertelement <4 x float> poison, float %8, i32 0
  %22 = insertelement <4 x float> %21, float %14, i32 1
  %23 = insertelement <4 x float> %22, float %17, i32 2
  %24 = insertelement <4 x float> %23, float %20, i32 3
  %25 = bitcast float addrspace(1)* %11 to <4 x float> addrspace(1)*
  store <4 x float> %24, <4 x float> addrspace(1)* %25, align 16
  ret void
}

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn writeonly
define void @iota_62(i8* noalias nocapture writeonly align 128 dereferenceable(5120) %alloc25, i8* noalias nocapture readnone align 128 dereferenceable(5272) %temp_buf) local_unnamed_addr #3 {
entry:
  %alloc251 = addrspacecast i8* %alloc25 to i8 addrspace(1)*
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !41
  %linear_index_base = shl nuw nsw i32 %0, 2
  %linear_index3 = or i32 %linear_index_base, 3
  %1 = urem i32 %linear_index3, 10
  %linear_index2 = or i32 %linear_index_base, 2
  %2 = urem i32 %linear_index2, 10
  %linear_index1 = or i32 %linear_index_base, 1
  %3 = urem i32 %linear_index1, 10
  %.lhs.trunc = trunc i32 %linear_index_base to i16
  %4 = urem i16 %.lhs.trunc, 10
  %.zext = zext i16 %4 to i32
  %5 = bitcast i8 addrspace(1)* %alloc251 to i32 addrspace(1)*
  %6 = zext i32 %linear_index_base to i64
  %7 = getelementptr i32, i32 addrspace(1)* %5, i64 %6
  %8 = insertelement <4 x i32> poison, i32 %.zext, i32 0
  %9 = insertelement <4 x i32> %8, i32 %3, i32 1
  %10 = insertelement <4 x i32> %9, i32 %2, i32 2
  %11 = insertelement <4 x i32> %10, i32 %1, i32 3
  %12 = bitcast i32 addrspace(1)* %7 to <4 x i32> addrspace(1)*
  store <4 x i32> %11, <4 x i32> addrspace(1)* %12, align 16
  ret void
}

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
define void @broadcast_40(i8* noalias nocapture readonly align 16 dereferenceable(512) %alloc7, i8* noalias nocapture writeonly align 128 dereferenceable(401408) %alloc23, i8* noalias nocapture readnone align 128 dereferenceable(5272) %temp_buf) local_unnamed_addr #2 {
entry:
  %alloc233 = addrspacecast i8* %alloc23 to i8 addrspace(1)*
  %alloc71 = addrspacecast i8* %alloc7 to i8 addrspace(1)*
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !42
  %row_index = shl nuw nsw i32 %0, 2
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !43
  %2 = shl nuw nsw i32 %1, 7
  %3 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.y(), !range !44
  %4 = shl nuw nsw i32 %3, 5
  %5 = or i32 %2, %4
  %linear_index = or i32 %5, %0
  %linear_index_base = shl nuw nsw i32 %linear_index, 2
  %6 = bitcast i8 addrspace(1)* %alloc71 to [128 x float] addrspace(1)*
  %7 = zext i32 %row_index to i64
  %8 = getelementptr inbounds [128 x float], [128 x float] addrspace(1)* %6, i64 0, i64 %7
  %9 = bitcast float addrspace(1)* %8 to <4 x float> addrspace(1)*
  %10 = load <4 x float>, <4 x float> addrspace(1)* %9, align 16, !invariant.load !39
  %11 = extractelement <4 x float> %10, i32 0
  %12 = extractelement <4 x float> %10, i32 1
  %13 = extractelement <4 x float> %10, i32 2
  %14 = extractelement <4 x float> %10, i32 3
  %15 = bitcast i8 addrspace(1)* %alloc233 to float addrspace(1)*
  %16 = zext i32 %linear_index_base to i64
  %17 = getelementptr float, float addrspace(1)* %15, i64 %16
  %18 = insertelement <4 x float> poison, float %11, i32 0
  %19 = insertelement <4 x float> %18, float %12, i32 1
  %20 = insertelement <4 x float> %19, float %13, i32 2
  %21 = insertelement <4 x float> %20, float %14, i32 3
  %22 = bitcast float addrspace(1)* %17 to <4 x float> addrspace(1)*
  store <4 x float> %21, <4 x float> addrspace(1)* %22, align 16
  ret void
}

; Function Attrs: nofree nosync nounwind readnone speculatable
declare i32 @llvm.nvvm.read.ptx.sreg.tid.y() #1

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
define void @fusion_18(i8* noalias nocapture readonly align 16 dereferenceable(16384) %alloc0, i8* noalias nocapture writeonly align 128 dereferenceable(401408) %alloc22, i8* noalias nocapture readonly align 128 dereferenceable(401408) %alloc23, i8* noalias nocapture writeonly align 128 dereferenceable(5272) %temp_buf) local_unnamed_addr #2 {
entry:
  %temp_buf28 = addrspacecast i8* %temp_buf to i8 addrspace(1)*
  %alloc2326 = addrspacecast i8* %alloc23 to i8 addrspace(1)*
  %alloc2224 = addrspacecast i8* %alloc22 to i8 addrspace(1)*
  %alloc022 = addrspacecast i8* %alloc0 to i8 addrspace(1)*
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !44
  %1 = shl nuw nsw i32 %0, 10
  %2 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !45
  %3 = shl nuw nsw i32 %2, 2
  %linear_index_base = or i32 %1, %3
  %4 = bitcast i8 addrspace(1)* %alloc2326 to float addrspace(1)*
  %5 = zext i32 %linear_index_base to i64
  %6 = getelementptr float, float addrspace(1)* %4, i64 %5
  %7 = bitcast float addrspace(1)* %6 to <4 x float> addrspace(1)*
  %8 = load <4 x float>, <4 x float> addrspace(1)* %7, align 16, !invariant.load !39
  %9 = extractelement <4 x float> %8, i32 0
  %10 = extractelement <4 x float> %8, i32 1
  %11 = extractelement <4 x float> %8, i32 2
  %12 = extractelement <4 x float> %8, i32 3
  %.inv = fcmp olt float %9, 0.000000e+00
  %13 = select i1 %.inv, float 0.000000e+00, float %9
  %14 = bitcast i8 addrspace(1)* %alloc022 to float addrspace(1)*
  %15 = getelementptr float, float addrspace(1)* %14, i64 %5
  %16 = bitcast float addrspace(1)* %15 to <4 x float> addrspace(1)*
  %17 = load <4 x float>, <4 x float> addrspace(1)* %16, align 16, !invariant.load !39
  %18 = extractelement <4 x float> %17, i32 0
  %19 = extractelement <4 x float> %17, i32 1
  %20 = extractelement <4 x float> %17, i32 2
  %21 = extractelement <4 x float> %17, i32 3
  %compare.8 = fcmp oge float %18, 0x3FC99999A0000000
  %22 = zext i1 %compare.8 to i8
  %23 = select i1 %compare.8, float 1.250000e+00, float 0.000000e+00
  %multiply.12 = fmul float %13, %23
  %24 = bitcast i8 addrspace(1)* %alloc2224 to float addrspace(1)*
  %25 = getelementptr float, float addrspace(1)* %24, i64 %5
  %26 = getelementptr i8, i8 addrspace(1)* %temp_buf28, i64 %5
  %.inv19 = fcmp olt float %10, 0.000000e+00
  %27 = select i1 %.inv19, float 0.000000e+00, float %10
  %compare.84 = fcmp oge float %19, 0x3FC99999A0000000
  %28 = zext i1 %compare.84 to i8
  %29 = select i1 %compare.84, float 1.250000e+00, float 0.000000e+00
  %multiply.126 = fmul float %27, %29
  %.inv20 = fcmp olt float %11, 0.000000e+00
  %30 = select i1 %.inv20, float 0.000000e+00, float %11
  %compare.810 = fcmp oge float %20, 0x3FC99999A0000000
  %31 = zext i1 %compare.810 to i8
  %32 = select i1 %compare.810, float 1.250000e+00, float 0.000000e+00
  %multiply.1212 = fmul float %30, %32
  %.inv21 = fcmp olt float %12, 0.000000e+00
  %33 = select i1 %.inv21, float 0.000000e+00, float %12
  %compare.816 = fcmp oge float %21, 0x3FC99999A0000000
  %34 = zext i1 %compare.816 to i8
  %35 = select i1 %compare.816, float 1.250000e+00, float 0.000000e+00
  %multiply.1218 = fmul float %33, %35
  %36 = insertelement <4 x float> poison, float %multiply.12, i32 0
  %37 = insertelement <4 x float> %36, float %multiply.126, i32 1
  %38 = insertelement <4 x float> %37, float %multiply.1212, i32 2
  %39 = insertelement <4 x float> %38, float %multiply.1218, i32 3
  %40 = bitcast float addrspace(1)* %25 to <4 x float> addrspace(1)*
  store <4 x float> %39, <4 x float> addrspace(1)* %40, align 16
  %41 = insertelement <4 x i8> poison, i8 %22, i32 0
  %42 = insertelement <4 x i8> %41, i8 %28, i32 1
  %43 = insertelement <4 x i8> %42, i8 %31, i32 2
  %44 = insertelement <4 x i8> %43, i8 %34, i32 3
  %45 = bitcast i8 addrspace(1)* %26 to <4 x i8> addrspace(1)*
  store <4 x i8> %44, <4 x i8> addrspace(1)* %45, align 4
  ret void
}

; Function Attrs: nofree nosync nounwind
define void @reduce_75(i8* noalias nocapture readonly align 128 dereferenceable(5120) %alloc25, i8* noalias nocapture readonly align 128 dereferenceable(5120) %alloc26, i8* noalias nocapture writeonly align 128 dereferenceable(512) %alloc28, i8* noalias nocapture writeonly align 128 dereferenceable(512) %alloc29, i8* noalias nocapture readnone align 128 dereferenceable(5272) %temp_buf) local_unnamed_addr #4 {
entry:
  %alloc2916 = addrspacecast i8* %alloc29 to i8 addrspace(1)*
  %alloc2814 = addrspacecast i8* %alloc28 to i8 addrspace(1)*
  %alloc2612 = addrspacecast i8* %alloc26 to i8 addrspace(1)*
  %alloc2510 = addrspacecast i8* %alloc25 to i8 addrspace(1)*
  %0 = bitcast i8 addrspace(1)* %alloc2612 to [32 x [10 x float]] addrspace(1)*
  %1 = bitcast i8 addrspace(1)* %alloc2510 to [32 x [10 x i32]] addrspace(1)*
  %2 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !42
  %3 = zext i32 %2 to i64
  %4 = getelementptr inbounds [32 x [10 x float]], [32 x [10 x float]] addrspace(1)* %0, i64 0, i64 %3, i64 0
  %5 = bitcast float addrspace(1)* %4 to <2 x float> addrspace(1)*
  %6 = load <2 x float>, <2 x float> addrspace(1)* %5, align 8, !invariant.load !39
  %7 = extractelement <2 x float> %6, i32 0
  %8 = extractelement <2 x float> %6, i32 1
  %9 = getelementptr inbounds [32 x [10 x i32]], [32 x [10 x i32]] addrspace(1)* %1, i64 0, i64 %3, i64 0
  %10 = bitcast i32 addrspace(1)* %9 to <2 x i32> addrspace(1)*
  %11 = load <2 x i32>, <2 x i32> addrspace(1)* %10, align 8, !invariant.load !39
  %12 = extractelement <2 x i32> %11, i32 0
  %13 = extractelement <2 x i32> %11, i32 1
  %compare.10.i = fcmp oeq float %7, 0xFFF0000000000000
  %14 = tail call i32 @llvm.smin.i32(i32 %12, i32 0) #5
  %compare.12.i = fcmp ole float %7, 0xFFF0000000000000
  %15 = select i1 %compare.12.i, i32 0, i32 %12
  %16 = select i1 %compare.10.i, i32 %14, i32 %15
  %17 = select i1 %compare.12.i, float 0xFFF0000000000000, float %7
  %compare.10.i.1 = fcmp oeq float %17, %8
  %18 = tail call i32 @llvm.smin.i32(i32 %16, i32 %13) #5
  %compare.12.i.1 = fcmp oge float %17, %8
  %19 = select i1 %compare.12.i.1, i32 %16, i32 %13
  %20 = select i1 %compare.10.i.1, i32 %18, i32 %19
  %21 = select i1 %compare.12.i.1, float %17, float %8
  %22 = getelementptr inbounds float, float addrspace(1)* %4, i64 2
  %23 = bitcast float addrspace(1)* %22 to <2 x float> addrspace(1)*
  %24 = load <2 x float>, <2 x float> addrspace(1)* %23, align 8, !invariant.load !39
  %25 = extractelement <2 x float> %24, i32 0
  %26 = extractelement <2 x float> %24, i32 1
  %27 = getelementptr inbounds i32, i32 addrspace(1)* %9, i64 2
  %28 = bitcast i32 addrspace(1)* %27 to <2 x i32> addrspace(1)*
  %29 = load <2 x i32>, <2 x i32> addrspace(1)* %28, align 8, !invariant.load !39
  %30 = extractelement <2 x i32> %29, i32 0
  %31 = extractelement <2 x i32> %29, i32 1
  %compare.10.i.2 = fcmp oeq float %21, %25
  %32 = tail call i32 @llvm.smin.i32(i32 %20, i32 %30) #5
  %compare.12.i.2 = fcmp oge float %21, %25
  %33 = select i1 %compare.12.i.2, i32 %20, i32 %30
  %34 = select i1 %compare.10.i.2, i32 %32, i32 %33
  %35 = select i1 %compare.12.i.2, float %21, float %25
  %compare.10.i.3 = fcmp oeq float %35, %26
  %36 = tail call i32 @llvm.smin.i32(i32 %34, i32 %31) #5
  %compare.12.i.3 = fcmp oge float %35, %26
  %37 = select i1 %compare.12.i.3, i32 %34, i32 %31
  %38 = select i1 %compare.10.i.3, i32 %36, i32 %37
  %39 = select i1 %compare.12.i.3, float %35, float %26
  %40 = getelementptr inbounds float, float addrspace(1)* %4, i64 4
  %41 = bitcast float addrspace(1)* %40 to <2 x float> addrspace(1)*
  %42 = load <2 x float>, <2 x float> addrspace(1)* %41, align 8, !invariant.load !39
  %43 = extractelement <2 x float> %42, i32 0
  %44 = extractelement <2 x float> %42, i32 1
  %45 = getelementptr inbounds i32, i32 addrspace(1)* %9, i64 4
  %46 = bitcast i32 addrspace(1)* %45 to <2 x i32> addrspace(1)*
  %47 = load <2 x i32>, <2 x i32> addrspace(1)* %46, align 8, !invariant.load !39
  %48 = extractelement <2 x i32> %47, i32 0
  %49 = extractelement <2 x i32> %47, i32 1
  %compare.10.i.4 = fcmp oeq float %39, %43
  %50 = tail call i32 @llvm.smin.i32(i32 %38, i32 %48) #5
  %compare.12.i.4 = fcmp oge float %39, %43
  %51 = select i1 %compare.12.i.4, i32 %38, i32 %48
  %52 = select i1 %compare.10.i.4, i32 %50, i32 %51
  %53 = select i1 %compare.12.i.4, float %39, float %43
  %compare.10.i.5 = fcmp oeq float %53, %44
  %54 = tail call i32 @llvm.smin.i32(i32 %52, i32 %49) #5
  %compare.12.i.5 = fcmp oge float %53, %44
  %55 = select i1 %compare.12.i.5, i32 %52, i32 %49
  %56 = select i1 %compare.10.i.5, i32 %54, i32 %55
  %57 = select i1 %compare.12.i.5, float %53, float %44
  %58 = getelementptr inbounds float, float addrspace(1)* %4, i64 6
  %59 = bitcast float addrspace(1)* %58 to <2 x float> addrspace(1)*
  %60 = load <2 x float>, <2 x float> addrspace(1)* %59, align 8, !invariant.load !39
  %61 = extractelement <2 x float> %60, i32 0
  %62 = extractelement <2 x float> %60, i32 1
  %63 = getelementptr inbounds i32, i32 addrspace(1)* %9, i64 6
  %64 = bitcast i32 addrspace(1)* %63 to <2 x i32> addrspace(1)*
  %65 = load <2 x i32>, <2 x i32> addrspace(1)* %64, align 8, !invariant.load !39
  %66 = extractelement <2 x i32> %65, i32 0
  %67 = extractelement <2 x i32> %65, i32 1
  %compare.10.i.6 = fcmp oeq float %57, %61
  %68 = tail call i32 @llvm.smin.i32(i32 %56, i32 %66) #5
  %compare.12.i.6 = fcmp oge float %57, %61
  %69 = select i1 %compare.12.i.6, i32 %56, i32 %66
  %70 = select i1 %compare.10.i.6, i32 %68, i32 %69
  %71 = select i1 %compare.12.i.6, float %57, float %61
  %compare.10.i.7 = fcmp oeq float %71, %62
  %72 = tail call i32 @llvm.smin.i32(i32 %70, i32 %67) #5
  %compare.12.i.7 = fcmp oge float %71, %62
  %73 = select i1 %compare.12.i.7, i32 %70, i32 %67
  %74 = select i1 %compare.10.i.7, i32 %72, i32 %73
  %75 = select i1 %compare.12.i.7, float %71, float %62
  %76 = getelementptr inbounds float, float addrspace(1)* %4, i64 8
  %77 = bitcast float addrspace(1)* %76 to <2 x float> addrspace(1)*
  %78 = load <2 x float>, <2 x float> addrspace(1)* %77, align 8, !invariant.load !39
  %79 = extractelement <2 x float> %78, i32 0
  %80 = extractelement <2 x float> %78, i32 1
  %81 = getelementptr inbounds i32, i32 addrspace(1)* %9, i64 8
  %82 = bitcast i32 addrspace(1)* %81 to <2 x i32> addrspace(1)*
  %83 = load <2 x i32>, <2 x i32> addrspace(1)* %82, align 8, !invariant.load !39
  %84 = extractelement <2 x i32> %83, i32 0
  %85 = extractelement <2 x i32> %83, i32 1
  %compare.10.i.8 = fcmp oeq float %75, %79
  %86 = tail call i32 @llvm.smin.i32(i32 %74, i32 %84) #5
  %compare.12.i.8 = fcmp oge float %75, %79
  %87 = select i1 %compare.12.i.8, i32 %74, i32 %84
  %88 = select i1 %compare.10.i.8, i32 %86, i32 %87
  %89 = select i1 %compare.12.i.8, float %75, float %79
  %compare.10.i.9 = fcmp oeq float %89, %80
  %90 = tail call i32 @llvm.smin.i32(i32 %88, i32 %85) #5
  %compare.12.i.9 = fcmp oge float %89, %80
  %91 = select i1 %compare.12.i.9, i32 %88, i32 %85
  %92 = select i1 %compare.10.i.9, i32 %90, i32 %91
  %93 = select i1 %compare.12.i.9, float %89, float %80
  %94 = bitcast i8 addrspace(1)* %alloc2916 to float addrspace(1)*
  %95 = getelementptr inbounds float, float addrspace(1)* %94, i64 %3
  store float %93, float addrspace(1)* %95, align 4
  %96 = bitcast i8 addrspace(1)* %alloc2814 to i32 addrspace(1)*
  %97 = getelementptr inbounds i32, i32 addrspace(1)* %96, i64 %3
  store i32 %92, i32 addrspace(1)* %97, align 4
  ret void
}

; Function Attrs: nounwind
define void @input_fusion_reduce(i8* noalias nocapture readonly align 16 dereferenceable(32) %alloc2, i8* noalias nocapture readonly align 128 dereferenceable(512) %alloc28, i8* noalias nocapture writeonly align 128 dereferenceable(4) %alloc35, i8* noalias nocapture readnone align 128 dereferenceable(5272) %temp_buf) local_unnamed_addr #5 {
entry:
  %alloc3572 = addrspacecast i8* %alloc35 to i8 addrspace(1)*
  %alloc2870 = addrspacecast i8* %alloc28 to i8 addrspace(1)*
  %alloc268 = addrspacecast i8* %alloc2 to i8 addrspace(1)*
  %initial_value_addr = alloca float, align 4
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !46
  %1 = and i32 %0, 31
  %2 = icmp ult i32 %0, 32
  br i1 %2, label %x_in_tile-true, label %common.ret

common.ret:                                       ; preds = %intra_warp_reduce_write-after, %reduction_write_output-true, %entry
  ret void

intra_warp_reduce_write-after:                    ; preds = %x_in_tile-true, %intra_warp_reduce_write-true
  %3 = icmp eq i32 %1, 0
  tail call void @llvm.nvvm.barrier0()
  %4 = getelementptr inbounds [5 x [1 x [1 x float]]], [5 x [1 x [1 x float]]] addrspace(3)* @shared_cache, i64 0, i64 %24, i64 0, i64 %14
  %5 = addrspacecast float addrspace(3)* %4 to float*
  store float 0.000000e+00, float* %initial_value_addr, align 4
  %6 = select i1 %3, float* %5, float* %initial_value_addr
  %partial_reduction_result33 = load float, float* %6, align 4
  %7 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result33, i32 16, i32 31)
  %add.12.i61 = fadd float %partial_reduction_result33, %7
  %8 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i61, i32 8, i32 31)
  %add.12.i60 = fadd float %add.12.i61, %8
  %9 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i60, i32 4, i32 31)
  %add.12.i59 = fadd float %add.12.i60, %9
  %10 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i59, i32 2, i32 31)
  %add.12.i58 = fadd float %add.12.i59, %10
  %11 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i58, i32 1, i32 31)
  %add.12.i57 = fadd float %add.12.i58, %11
  store float %add.12.i57, float* %6, align 4
  br i1 %3, label %reduction_write_output-true, label %common.ret

x_in_tile-true:                                   ; preds = %entry
  %12 = lshr i32 %0, 5
  %13 = bitcast i8 addrspace(1)* %alloc2870 to i32 addrspace(1)*
  %14 = zext i32 %1 to i64
  %Arg_1.212 = getelementptr inbounds i8, i8 addrspace(1)* %alloc268, i64 %14
  %Arg_1.213 = load i8, i8 addrspace(1)* %Arg_1.212, align 1, !invariant.load !39
  %15 = uitofp i8 %Arg_1.213 to float
  %Arg_0.114 = getelementptr inbounds i32, i32 addrspace(1)* %13, i64 %14
  %Arg_0.115 = load i32, i32 addrspace(1)* %Arg_0.114, align 4, !invariant.load !39
  %16 = sitofp i32 %Arg_0.115 to float
  %compare.616 = fcmp oeq float %15, %16
  %17 = uitofp i1 %compare.616 to float
  %18 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %17, i32 16, i32 31)
  %add.12.i = fadd float %18, %17
  %19 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i, i32 8, i32 31)
  %add.12.i65 = fadd float %add.12.i, %19
  %20 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i65, i32 4, i32 31)
  %add.12.i64 = fadd float %add.12.i65, %20
  %21 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i64, i32 2, i32 31)
  %add.12.i63 = fadd float %add.12.i64, %21
  %22 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i63, i32 1, i32 31)
  %23 = icmp eq i32 %1, 0
  %24 = zext i32 %12 to i64
  %25 = getelementptr inbounds [5 x [1 x [1 x float]]], [5 x [1 x [1 x float]]] addrspace(3)* @shared_cache, i64 0, i64 %24, i64 0, i64 0
  %add.12.i62 = fadd float %add.12.i63, %22
  br i1 %23, label %intra_warp_reduce_write-true, label %intra_warp_reduce_write-after

intra_warp_reduce_write-true:                     ; preds = %x_in_tile-true
  store float %add.12.i62, float addrspace(3)* %25, align 4
  br label %intra_warp_reduce_write-after

reduction_write_output-true:                      ; preds = %intra_warp_reduce_write-after
  %26 = bitcast i8 addrspace(1)* %alloc3572 to float addrspace(1)*
  store float %add.12.i57, float addrspace(1)* %26, align 128
  br label %common.ret
}

; Function Attrs: convergent inaccessiblememonly nounwind
declare float @llvm.nvvm.shfl.sync.down.f32(i32, float, i32, i32) #6

; Function Attrs: convergent nounwind
declare void @llvm.nvvm.barrier0() #7

; Function Attrs: argmemonly nofree nosync nounwind
define void @reduce_114(i8* noalias nocapture readonly align 128 dereferenceable(5120) %alloc26, i8* noalias nocapture writeonly align 128 dereferenceable(512) %alloc29, i8* noalias nocapture readnone align 128 dereferenceable(5272) %temp_buf) local_unnamed_addr #8 {
entry:
  %alloc2949 = addrspacecast i8* %alloc29 to i8 addrspace(1)*
  %alloc2647 = addrspacecast i8* %alloc26 to i8 addrspace(1)*
  %0 = bitcast i8 addrspace(1)* %alloc2647 to [32 x [10 x float]] addrspace(1)*
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !43
  %linear_index_base = shl nuw nsw i32 %1, 2
  %2 = zext i32 %linear_index_base to i64
  %3 = getelementptr inbounds [32 x [10 x float]], [32 x [10 x float]] addrspace(1)* %0, i64 0, i64 %2, i64 0
  %4 = bitcast float addrspace(1)* %3 to <4 x float> addrspace(1)*
  %5 = load <4 x float>, <4 x float> addrspace(1)* %4, align 32, !invariant.load !39
  %6 = extractelement <4 x float> %5, i32 0
  %7 = extractelement <4 x float> %5, i32 1
  %8 = extractelement <4 x float> %5, i32 2
  %9 = extractelement <4 x float> %5, i32 3
  %10 = fcmp ole float %6, 0xFFF0000000000000
  %maximum.6.i = select i1 %10, float 0xFFF0000000000000, float %6
  %11 = fcmp oge float %maximum.6.i, %7
  %12 = fcmp uno float %maximum.6.i, 0.000000e+00
  %13 = or i1 %12, %11
  %maximum.6.i.1 = select i1 %13, float %maximum.6.i, float %7
  %14 = fcmp oge float %maximum.6.i.1, %8
  %15 = fcmp uno float %maximum.6.i.1, 0.000000e+00
  %16 = or i1 %15, %14
  %maximum.6.i.2 = select i1 %16, float %maximum.6.i.1, float %8
  %17 = fcmp oge float %maximum.6.i.2, %9
  %18 = fcmp uno float %maximum.6.i.2, 0.000000e+00
  %19 = or i1 %18, %17
  %maximum.6.i.3 = select i1 %19, float %maximum.6.i.2, float %9
  %20 = getelementptr inbounds float, float addrspace(1)* %3, i64 4
  %21 = bitcast float addrspace(1)* %20 to <4 x float> addrspace(1)*
  %22 = load <4 x float>, <4 x float> addrspace(1)* %21, align 16, !invariant.load !39
  %23 = extractelement <4 x float> %22, i32 0
  %24 = extractelement <4 x float> %22, i32 1
  %25 = extractelement <4 x float> %22, i32 2
  %26 = extractelement <4 x float> %22, i32 3
  %27 = fcmp oge float %maximum.6.i.3, %23
  %28 = fcmp uno float %maximum.6.i.3, 0.000000e+00
  %29 = or i1 %28, %27
  %maximum.6.i.4 = select i1 %29, float %maximum.6.i.3, float %23
  %30 = fcmp oge float %maximum.6.i.4, %24
  %31 = fcmp uno float %maximum.6.i.4, 0.000000e+00
  %32 = or i1 %31, %30
  %maximum.6.i.5 = select i1 %32, float %maximum.6.i.4, float %24
  %33 = fcmp oge float %maximum.6.i.5, %25
  %34 = fcmp uno float %maximum.6.i.5, 0.000000e+00
  %35 = or i1 %34, %33
  %maximum.6.i.6 = select i1 %35, float %maximum.6.i.5, float %25
  %36 = fcmp oge float %maximum.6.i.6, %26
  %37 = fcmp uno float %maximum.6.i.6, 0.000000e+00
  %38 = or i1 %37, %36
  %maximum.6.i.7 = select i1 %38, float %maximum.6.i.6, float %26
  %39 = getelementptr inbounds float, float addrspace(1)* %3, i64 8
  %40 = bitcast float addrspace(1)* %39 to <4 x float> addrspace(1)*
  %41 = load <4 x float>, <4 x float> addrspace(1)* %40, align 32, !invariant.load !39
  %42 = extractelement <4 x float> %41, i32 0
  %43 = extractelement <4 x float> %41, i32 1
  %44 = extractelement <4 x float> %41, i32 2
  %45 = extractelement <4 x float> %41, i32 3
  %46 = fcmp oge float %maximum.6.i.7, %42
  %47 = fcmp uno float %maximum.6.i.7, 0.000000e+00
  %48 = or i1 %47, %46
  %maximum.6.i.8 = select i1 %48, float %maximum.6.i.7, float %42
  %49 = fcmp oge float %maximum.6.i.8, %43
  %50 = fcmp uno float %maximum.6.i.8, 0.000000e+00
  %51 = or i1 %50, %49
  %maximum.6.i.9 = select i1 %51, float %maximum.6.i.8, float %43
  %52 = bitcast i8 addrspace(1)* %alloc2949 to float addrspace(1)*
  %53 = getelementptr float, float addrspace(1)* %52, i64 %2
  %54 = fcmp ole float %44, 0xFFF0000000000000
  %maximum.6.i38 = select i1 %54, float 0xFFF0000000000000, float %44
  %55 = fcmp oge float %maximum.6.i38, %45
  %56 = fcmp uno float %maximum.6.i38, 0.000000e+00
  %57 = or i1 %56, %55
  %maximum.6.i38.1 = select i1 %57, float %maximum.6.i38, float %45
  %58 = getelementptr inbounds float, float addrspace(1)* %3, i64 12
  %59 = bitcast float addrspace(1)* %58 to <4 x float> addrspace(1)*
  %60 = load <4 x float>, <4 x float> addrspace(1)* %59, align 16, !invariant.load !39
  %61 = extractelement <4 x float> %60, i32 0
  %62 = extractelement <4 x float> %60, i32 1
  %63 = extractelement <4 x float> %60, i32 2
  %64 = extractelement <4 x float> %60, i32 3
  %65 = fcmp oge float %maximum.6.i38.1, %61
  %66 = fcmp uno float %maximum.6.i38.1, 0.000000e+00
  %67 = or i1 %66, %65
  %maximum.6.i38.2 = select i1 %67, float %maximum.6.i38.1, float %61
  %68 = fcmp oge float %maximum.6.i38.2, %62
  %69 = fcmp uno float %maximum.6.i38.2, 0.000000e+00
  %70 = or i1 %69, %68
  %maximum.6.i38.3 = select i1 %70, float %maximum.6.i38.2, float %62
  %71 = fcmp oge float %maximum.6.i38.3, %63
  %72 = fcmp uno float %maximum.6.i38.3, 0.000000e+00
  %73 = or i1 %72, %71
  %maximum.6.i38.4 = select i1 %73, float %maximum.6.i38.3, float %63
  %74 = fcmp oge float %maximum.6.i38.4, %64
  %75 = fcmp uno float %maximum.6.i38.4, 0.000000e+00
  %76 = or i1 %75, %74
  %maximum.6.i38.5 = select i1 %76, float %maximum.6.i38.4, float %64
  %77 = getelementptr inbounds float, float addrspace(1)* %3, i64 16
  %78 = bitcast float addrspace(1)* %77 to <4 x float> addrspace(1)*
  %79 = load <4 x float>, <4 x float> addrspace(1)* %78, align 32, !invariant.load !39
  %80 = extractelement <4 x float> %79, i32 0
  %81 = extractelement <4 x float> %79, i32 1
  %82 = extractelement <4 x float> %79, i32 2
  %83 = extractelement <4 x float> %79, i32 3
  %84 = fcmp oge float %maximum.6.i38.5, %80
  %85 = fcmp uno float %maximum.6.i38.5, 0.000000e+00
  %86 = or i1 %85, %84
  %maximum.6.i38.6 = select i1 %86, float %maximum.6.i38.5, float %80
  %87 = fcmp oge float %maximum.6.i38.6, %81
  %88 = fcmp uno float %maximum.6.i38.6, 0.000000e+00
  %89 = or i1 %88, %87
  %maximum.6.i38.7 = select i1 %89, float %maximum.6.i38.6, float %81
  %90 = fcmp oge float %maximum.6.i38.7, %82
  %91 = fcmp uno float %maximum.6.i38.7, 0.000000e+00
  %92 = or i1 %91, %90
  %maximum.6.i38.8 = select i1 %92, float %maximum.6.i38.7, float %82
  %93 = fcmp oge float %maximum.6.i38.8, %83
  %94 = fcmp uno float %maximum.6.i38.8, 0.000000e+00
  %95 = or i1 %94, %93
  %maximum.6.i38.9 = select i1 %95, float %maximum.6.i38.8, float %83
  %96 = getelementptr inbounds float, float addrspace(1)* %3, i64 20
  %97 = bitcast float addrspace(1)* %96 to <4 x float> addrspace(1)*
  %98 = load <4 x float>, <4 x float> addrspace(1)* %97, align 16, !invariant.load !39
  %99 = extractelement <4 x float> %98, i32 0
  %100 = extractelement <4 x float> %98, i32 1
  %101 = extractelement <4 x float> %98, i32 2
  %102 = extractelement <4 x float> %98, i32 3
  %103 = fcmp ole float %99, 0xFFF0000000000000
  %maximum.6.i37 = select i1 %103, float 0xFFF0000000000000, float %99
  %104 = fcmp oge float %maximum.6.i37, %100
  %105 = fcmp uno float %maximum.6.i37, 0.000000e+00
  %106 = or i1 %105, %104
  %maximum.6.i37.1 = select i1 %106, float %maximum.6.i37, float %100
  %107 = fcmp oge float %maximum.6.i37.1, %101
  %108 = fcmp uno float %maximum.6.i37.1, 0.000000e+00
  %109 = or i1 %108, %107
  %maximum.6.i37.2 = select i1 %109, float %maximum.6.i37.1, float %101
  %110 = fcmp oge float %maximum.6.i37.2, %102
  %111 = fcmp uno float %maximum.6.i37.2, 0.000000e+00
  %112 = or i1 %111, %110
  %maximum.6.i37.3 = select i1 %112, float %maximum.6.i37.2, float %102
  %113 = getelementptr inbounds float, float addrspace(1)* %3, i64 24
  %114 = bitcast float addrspace(1)* %113 to <4 x float> addrspace(1)*
  %115 = load <4 x float>, <4 x float> addrspace(1)* %114, align 32, !invariant.load !39
  %116 = extractelement <4 x float> %115, i32 0
  %117 = extractelement <4 x float> %115, i32 1
  %118 = extractelement <4 x float> %115, i32 2
  %119 = extractelement <4 x float> %115, i32 3
  %120 = fcmp oge float %maximum.6.i37.3, %116
  %121 = fcmp uno float %maximum.6.i37.3, 0.000000e+00
  %122 = or i1 %121, %120
  %maximum.6.i37.4 = select i1 %122, float %maximum.6.i37.3, float %116
  %123 = fcmp oge float %maximum.6.i37.4, %117
  %124 = fcmp uno float %maximum.6.i37.4, 0.000000e+00
  %125 = or i1 %124, %123
  %maximum.6.i37.5 = select i1 %125, float %maximum.6.i37.4, float %117
  %126 = fcmp oge float %maximum.6.i37.5, %118
  %127 = fcmp uno float %maximum.6.i37.5, 0.000000e+00
  %128 = or i1 %127, %126
  %maximum.6.i37.6 = select i1 %128, float %maximum.6.i37.5, float %118
  %129 = fcmp oge float %maximum.6.i37.6, %119
  %130 = fcmp uno float %maximum.6.i37.6, 0.000000e+00
  %131 = or i1 %130, %129
  %maximum.6.i37.7 = select i1 %131, float %maximum.6.i37.6, float %119
  %132 = getelementptr inbounds float, float addrspace(1)* %3, i64 28
  %133 = bitcast float addrspace(1)* %132 to <4 x float> addrspace(1)*
  %134 = load <4 x float>, <4 x float> addrspace(1)* %133, align 16, !invariant.load !39
  %135 = extractelement <4 x float> %134, i32 0
  %136 = extractelement <4 x float> %134, i32 1
  %137 = extractelement <4 x float> %134, i32 2
  %138 = extractelement <4 x float> %134, i32 3
  %139 = fcmp oge float %maximum.6.i37.7, %135
  %140 = fcmp uno float %maximum.6.i37.7, 0.000000e+00
  %141 = or i1 %140, %139
  %maximum.6.i37.8 = select i1 %141, float %maximum.6.i37.7, float %135
  %142 = fcmp oge float %maximum.6.i37.8, %136
  %143 = fcmp uno float %maximum.6.i37.8, 0.000000e+00
  %144 = or i1 %143, %142
  %maximum.6.i37.9 = select i1 %144, float %maximum.6.i37.8, float %136
  %145 = fcmp ole float %137, 0xFFF0000000000000
  %maximum.6.i36 = select i1 %145, float 0xFFF0000000000000, float %137
  %146 = fcmp oge float %maximum.6.i36, %138
  %147 = fcmp uno float %maximum.6.i36, 0.000000e+00
  %148 = or i1 %147, %146
  %maximum.6.i36.1 = select i1 %148, float %maximum.6.i36, float %138
  %149 = getelementptr inbounds float, float addrspace(1)* %3, i64 32
  %150 = bitcast float addrspace(1)* %149 to <4 x float> addrspace(1)*
  %151 = load <4 x float>, <4 x float> addrspace(1)* %150, align 32, !invariant.load !39
  %152 = extractelement <4 x float> %151, i32 0
  %153 = extractelement <4 x float> %151, i32 1
  %154 = extractelement <4 x float> %151, i32 2
  %155 = extractelement <4 x float> %151, i32 3
  %156 = fcmp oge float %maximum.6.i36.1, %152
  %157 = fcmp uno float %maximum.6.i36.1, 0.000000e+00
  %158 = or i1 %157, %156
  %maximum.6.i36.2 = select i1 %158, float %maximum.6.i36.1, float %152
  %159 = fcmp oge float %maximum.6.i36.2, %153
  %160 = fcmp uno float %maximum.6.i36.2, 0.000000e+00
  %161 = or i1 %160, %159
  %maximum.6.i36.3 = select i1 %161, float %maximum.6.i36.2, float %153
  %162 = fcmp oge float %maximum.6.i36.3, %154
  %163 = fcmp uno float %maximum.6.i36.3, 0.000000e+00
  %164 = or i1 %163, %162
  %maximum.6.i36.4 = select i1 %164, float %maximum.6.i36.3, float %154
  %165 = fcmp oge float %maximum.6.i36.4, %155
  %166 = fcmp uno float %maximum.6.i36.4, 0.000000e+00
  %167 = or i1 %166, %165
  %maximum.6.i36.5 = select i1 %167, float %maximum.6.i36.4, float %155
  %168 = getelementptr inbounds float, float addrspace(1)* %3, i64 36
  %169 = bitcast float addrspace(1)* %168 to <4 x float> addrspace(1)*
  %170 = load <4 x float>, <4 x float> addrspace(1)* %169, align 16, !invariant.load !39
  %171 = extractelement <4 x float> %170, i32 0
  %172 = extractelement <4 x float> %170, i32 1
  %173 = extractelement <4 x float> %170, i32 2
  %174 = extractelement <4 x float> %170, i32 3
  %175 = fcmp oge float %maximum.6.i36.5, %171
  %176 = fcmp uno float %maximum.6.i36.5, 0.000000e+00
  %177 = or i1 %176, %175
  %maximum.6.i36.6 = select i1 %177, float %maximum.6.i36.5, float %171
  %178 = fcmp oge float %maximum.6.i36.6, %172
  %179 = fcmp uno float %maximum.6.i36.6, 0.000000e+00
  %180 = or i1 %179, %178
  %maximum.6.i36.7 = select i1 %180, float %maximum.6.i36.6, float %172
  %181 = fcmp oge float %maximum.6.i36.7, %173
  %182 = fcmp uno float %maximum.6.i36.7, 0.000000e+00
  %183 = or i1 %182, %181
  %maximum.6.i36.8 = select i1 %183, float %maximum.6.i36.7, float %173
  %184 = fcmp oge float %maximum.6.i36.8, %174
  %185 = fcmp uno float %maximum.6.i36.8, 0.000000e+00
  %186 = or i1 %185, %184
  %maximum.6.i36.9 = select i1 %186, float %maximum.6.i36.8, float %174
  %187 = insertelement <4 x float> poison, float %maximum.6.i.9, i32 0
  %188 = insertelement <4 x float> %187, float %maximum.6.i38.9, i32 1
  %189 = insertelement <4 x float> %188, float %maximum.6.i37.9, i32 2
  %190 = insertelement <4 x float> %189, float %maximum.6.i36.9, i32 3
  %191 = bitcast float addrspace(1)* %53 to <4 x float> addrspace(1)*
  store <4 x float> %190, <4 x float> addrspace(1)* %191, align 16
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind
define void @fusion_22(i8* noalias nocapture readonly align 128 dereferenceable(5120) %alloc26, i8* noalias nocapture writeonly align 128 dereferenceable(512) %alloc27, i8* noalias nocapture writeonly align 128 dereferenceable(512) %alloc28, i8* noalias nocapture readonly align 128 dereferenceable(512) %alloc29, i8* noalias nocapture readnone align 128 dereferenceable(5272) %temp_buf) local_unnamed_addr #8 {
entry:
  %alloc2971 = addrspacecast i8* %alloc29 to i8 addrspace(1)*
  %alloc2869 = addrspacecast i8* %alloc28 to i8 addrspace(1)*
  %alloc2767 = addrspacecast i8* %alloc27 to i8 addrspace(1)*
  %alloc2665 = addrspacecast i8* %alloc26 to i8 addrspace(1)*
  %0 = bitcast i8 addrspace(1)* %alloc2665 to [32 x [10 x float]] addrspace(1)*
  %1 = bitcast i8 addrspace(1)* %alloc2971 to [32 x float] addrspace(1)*
  %2 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !43
  %linear_index_base = shl nuw nsw i32 %2, 2
  %3 = zext i32 %linear_index_base to i64
  %4 = getelementptr inbounds [32 x float], [32 x float] addrspace(1)* %1, i64 0, i64 %3
  %5 = bitcast float addrspace(1)* %4 to <4 x float> addrspace(1)*
  %6 = load <4 x float>, <4 x float> addrspace(1)* %5, align 16, !invariant.load !39
  %7 = extractelement <4 x float> %6, i32 0
  %8 = extractelement <4 x float> %6, i32 1
  %9 = extractelement <4 x float> %6, i32 2
  %10 = extractelement <4 x float> %6, i32 3
  %11 = getelementptr inbounds [32 x [10 x float]], [32 x [10 x float]] addrspace(1)* %0, i64 0, i64 %3, i64 0
  %12 = bitcast float addrspace(1)* %11 to <4 x float> addrspace(1)*
  %13 = load <4 x float>, <4 x float> addrspace(1)* %12, align 32, !invariant.load !39
  %14 = extractelement <4 x float> %13, i32 0
  %15 = extractelement <4 x float> %13, i32 1
  %16 = extractelement <4 x float> %13, i32 2
  %17 = extractelement <4 x float> %13, i32 3
  %subtract.4 = fsub float %14, %7
  %18 = tail call float @llvm.fma.f32(float %subtract.4, float 0x3F777313A0000000, float 5.000000e-01) #5
  %19 = tail call float @llvm.nvvm.saturate.f(float %18) #5
  %20 = tail call float @llvm.nvvm.fma.rm.f(float %19, float 2.520000e+02, float 0x4168000020000000) #5
  %21 = fadd float %20, 0xC168000FE0000000
  %22 = fneg float %21
  %23 = tail call float @llvm.fma.f32(float %subtract.4, float 0x3FF7154760000000, float %22) #5
  %24 = tail call float @llvm.fma.f32(float %subtract.4, float 0x3E54AE0C00000000, float %23) #5
  %25 = bitcast float %20 to i32
  %26 = shl i32 %25, 23
  %27 = bitcast i32 %26 to float
  %28 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %24) #5
  %29 = fmul float %28, %27
  %add.10.i56 = fadd float %29, 0.000000e+00
  %subtract.4.1 = fsub float %15, %7
  %30 = tail call float @llvm.fma.f32(float %subtract.4.1, float 0x3F777313A0000000, float 5.000000e-01) #5
  %31 = tail call float @llvm.nvvm.saturate.f(float %30) #5
  %32 = tail call float @llvm.nvvm.fma.rm.f(float %31, float 2.520000e+02, float 0x4168000020000000) #5
  %33 = fadd float %32, 0xC168000FE0000000
  %34 = fneg float %33
  %35 = tail call float @llvm.fma.f32(float %subtract.4.1, float 0x3FF7154760000000, float %34) #5
  %36 = tail call float @llvm.fma.f32(float %subtract.4.1, float 0x3E54AE0C00000000, float %35) #5
  %37 = bitcast float %32 to i32
  %38 = shl i32 %37, 23
  %39 = bitcast i32 %38 to float
  %40 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %36) #5
  %41 = fmul float %40, %39
  %add.10.i56.1 = fadd float %add.10.i56, %41
  %subtract.4.2 = fsub float %16, %7
  %42 = tail call float @llvm.fma.f32(float %subtract.4.2, float 0x3F777313A0000000, float 5.000000e-01) #5
  %43 = tail call float @llvm.nvvm.saturate.f(float %42) #5
  %44 = tail call float @llvm.nvvm.fma.rm.f(float %43, float 2.520000e+02, float 0x4168000020000000) #5
  %45 = fadd float %44, 0xC168000FE0000000
  %46 = fneg float %45
  %47 = tail call float @llvm.fma.f32(float %subtract.4.2, float 0x3FF7154760000000, float %46) #5
  %48 = tail call float @llvm.fma.f32(float %subtract.4.2, float 0x3E54AE0C00000000, float %47) #5
  %49 = bitcast float %44 to i32
  %50 = shl i32 %49, 23
  %51 = bitcast i32 %50 to float
  %52 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %48) #5
  %53 = fmul float %52, %51
  %add.10.i56.2 = fadd float %add.10.i56.1, %53
  %subtract.4.3 = fsub float %17, %7
  %54 = tail call float @llvm.fma.f32(float %subtract.4.3, float 0x3F777313A0000000, float 5.000000e-01) #5
  %55 = tail call float @llvm.nvvm.saturate.f(float %54) #5
  %56 = tail call float @llvm.nvvm.fma.rm.f(float %55, float 2.520000e+02, float 0x4168000020000000) #5
  %57 = fadd float %56, 0xC168000FE0000000
  %58 = fneg float %57
  %59 = tail call float @llvm.fma.f32(float %subtract.4.3, float 0x3FF7154760000000, float %58) #5
  %60 = tail call float @llvm.fma.f32(float %subtract.4.3, float 0x3E54AE0C00000000, float %59) #5
  %61 = bitcast float %56 to i32
  %62 = shl i32 %61, 23
  %63 = bitcast i32 %62 to float
  %64 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %60) #5
  %65 = fmul float %64, %63
  %add.10.i56.3 = fadd float %add.10.i56.2, %65
  %66 = getelementptr inbounds float, float addrspace(1)* %11, i64 4
  %67 = bitcast float addrspace(1)* %66 to <4 x float> addrspace(1)*
  %68 = load <4 x float>, <4 x float> addrspace(1)* %67, align 16, !invariant.load !39
  %69 = extractelement <4 x float> %68, i32 0
  %70 = extractelement <4 x float> %68, i32 1
  %71 = extractelement <4 x float> %68, i32 2
  %72 = extractelement <4 x float> %68, i32 3
  %subtract.4.4 = fsub float %69, %7
  %73 = tail call float @llvm.fma.f32(float %subtract.4.4, float 0x3F777313A0000000, float 5.000000e-01) #5
  %74 = tail call float @llvm.nvvm.saturate.f(float %73) #5
  %75 = tail call float @llvm.nvvm.fma.rm.f(float %74, float 2.520000e+02, float 0x4168000020000000) #5
  %76 = fadd float %75, 0xC168000FE0000000
  %77 = fneg float %76
  %78 = tail call float @llvm.fma.f32(float %subtract.4.4, float 0x3FF7154760000000, float %77) #5
  %79 = tail call float @llvm.fma.f32(float %subtract.4.4, float 0x3E54AE0C00000000, float %78) #5
  %80 = bitcast float %75 to i32
  %81 = shl i32 %80, 23
  %82 = bitcast i32 %81 to float
  %83 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %79) #5
  %84 = fmul float %83, %82
  %add.10.i56.4 = fadd float %add.10.i56.3, %84
  %subtract.4.5 = fsub float %70, %7
  %85 = tail call float @llvm.fma.f32(float %subtract.4.5, float 0x3F777313A0000000, float 5.000000e-01) #5
  %86 = tail call float @llvm.nvvm.saturate.f(float %85) #5
  %87 = tail call float @llvm.nvvm.fma.rm.f(float %86, float 2.520000e+02, float 0x4168000020000000) #5
  %88 = fadd float %87, 0xC168000FE0000000
  %89 = fneg float %88
  %90 = tail call float @llvm.fma.f32(float %subtract.4.5, float 0x3FF7154760000000, float %89) #5
  %91 = tail call float @llvm.fma.f32(float %subtract.4.5, float 0x3E54AE0C00000000, float %90) #5
  %92 = bitcast float %87 to i32
  %93 = shl i32 %92, 23
  %94 = bitcast i32 %93 to float
  %95 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %91) #5
  %96 = fmul float %95, %94
  %add.10.i56.5 = fadd float %add.10.i56.4, %96
  %subtract.4.6 = fsub float %71, %7
  %97 = tail call float @llvm.fma.f32(float %subtract.4.6, float 0x3F777313A0000000, float 5.000000e-01) #5
  %98 = tail call float @llvm.nvvm.saturate.f(float %97) #5
  %99 = tail call float @llvm.nvvm.fma.rm.f(float %98, float 2.520000e+02, float 0x4168000020000000) #5
  %100 = fadd float %99, 0xC168000FE0000000
  %101 = fneg float %100
  %102 = tail call float @llvm.fma.f32(float %subtract.4.6, float 0x3FF7154760000000, float %101) #5
  %103 = tail call float @llvm.fma.f32(float %subtract.4.6, float 0x3E54AE0C00000000, float %102) #5
  %104 = bitcast float %99 to i32
  %105 = shl i32 %104, 23
  %106 = bitcast i32 %105 to float
  %107 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %103) #5
  %108 = fmul float %107, %106
  %add.10.i56.6 = fadd float %add.10.i56.5, %108
  %subtract.4.7 = fsub float %72, %7
  %109 = tail call float @llvm.fma.f32(float %subtract.4.7, float 0x3F777313A0000000, float 5.000000e-01) #5
  %110 = tail call float @llvm.nvvm.saturate.f(float %109) #5
  %111 = tail call float @llvm.nvvm.fma.rm.f(float %110, float 2.520000e+02, float 0x4168000020000000) #5
  %112 = fadd float %111, 0xC168000FE0000000
  %113 = fneg float %112
  %114 = tail call float @llvm.fma.f32(float %subtract.4.7, float 0x3FF7154760000000, float %113) #5
  %115 = tail call float @llvm.fma.f32(float %subtract.4.7, float 0x3E54AE0C00000000, float %114) #5
  %116 = bitcast float %111 to i32
  %117 = shl i32 %116, 23
  %118 = bitcast i32 %117 to float
  %119 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %115) #5
  %120 = fmul float %119, %118
  %add.10.i56.7 = fadd float %add.10.i56.6, %120
  %121 = getelementptr inbounds float, float addrspace(1)* %11, i64 8
  %122 = bitcast float addrspace(1)* %121 to <4 x float> addrspace(1)*
  %123 = load <4 x float>, <4 x float> addrspace(1)* %122, align 32, !invariant.load !39
  %124 = extractelement <4 x float> %123, i32 0
  %125 = extractelement <4 x float> %123, i32 1
  %126 = extractelement <4 x float> %123, i32 2
  %127 = extractelement <4 x float> %123, i32 3
  %subtract.4.8 = fsub float %124, %7
  %128 = tail call float @llvm.fma.f32(float %subtract.4.8, float 0x3F777313A0000000, float 5.000000e-01) #5
  %129 = tail call float @llvm.nvvm.saturate.f(float %128) #5
  %130 = tail call float @llvm.nvvm.fma.rm.f(float %129, float 2.520000e+02, float 0x4168000020000000) #5
  %131 = fadd float %130, 0xC168000FE0000000
  %132 = fneg float %131
  %133 = tail call float @llvm.fma.f32(float %subtract.4.8, float 0x3FF7154760000000, float %132) #5
  %134 = tail call float @llvm.fma.f32(float %subtract.4.8, float 0x3E54AE0C00000000, float %133) #5
  %135 = bitcast float %130 to i32
  %136 = shl i32 %135, 23
  %137 = bitcast i32 %136 to float
  %138 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %134) #5
  %139 = fmul float %138, %137
  %add.10.i56.8 = fadd float %add.10.i56.7, %139
  %subtract.4.9 = fsub float %125, %7
  %140 = tail call float @llvm.fma.f32(float %subtract.4.9, float 0x3F777313A0000000, float 5.000000e-01) #5
  %141 = tail call float @llvm.nvvm.saturate.f(float %140) #5
  %142 = tail call float @llvm.nvvm.fma.rm.f(float %141, float 2.520000e+02, float 0x4168000020000000) #5
  %143 = fadd float %142, 0xC168000FE0000000
  %144 = fneg float %143
  %145 = tail call float @llvm.fma.f32(float %subtract.4.9, float 0x3FF7154760000000, float %144) #5
  %146 = tail call float @llvm.fma.f32(float %subtract.4.9, float 0x3E54AE0C00000000, float %145) #5
  %147 = bitcast float %142 to i32
  %148 = shl i32 %147, 23
  %149 = bitcast i32 %148 to float
  %150 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %146) #5
  %151 = fmul float %150, %149
  %add.10.i56.9 = fadd float %add.10.i56.8, %151
  %152 = fcmp olt float %add.10.i56.9, 0x3810000000000000
  %153 = fmul float %add.10.i56.9, 0x4160000000000000
  %.02.i52 = select i1 %152, float %153, float %add.10.i56.9
  %i.i.0.i53 = select i1 %152, float -2.300000e+01, float 0.000000e+00
  %154 = bitcast float %.02.i52 to i32
  %155 = add nsw i32 %154, -1059760811
  %156 = and i32 %155, -8388608
  %157 = sub nsw i32 %154, %156
  %158 = bitcast i32 %157 to float
  %159 = sitofp i32 %156 to float
  %160 = tail call float @llvm.fma.f32(float %159, float 0x3E80000000000000, float %i.i.0.i53) #5
  %161 = fadd float %158, -1.000000e+00
  %162 = tail call float @llvm.fma.f32(float %161, float 0xBFC0AA04E0000000, float 0x3FC2073EC0000000) #5
  %163 = tail call float @llvm.fma.f32(float %162, float %161, float 0xBFBF19B980000000) #5
  %164 = tail call float @llvm.fma.f32(float %163, float %161, float 0x3FC1E52AA0000000) #5
  %165 = tail call float @llvm.fma.f32(float %164, float %161, float 0xBFC55B1720000000) #5
  %166 = tail call float @llvm.fma.f32(float %165, float %161, float 0x3FC99DA160000000) #5
  %167 = tail call float @llvm.fma.f32(float %166, float %161, float 0xBFCFFFE440000000) #5
  %168 = tail call float @llvm.fma.f32(float %167, float %161, float 0x3FD5554F00000000) #5
  %169 = tail call float @llvm.fma.f32(float %168, float %161, float -5.000000e-01) #5
  %170 = fmul float %161, %169
  %171 = tail call float @llvm.fma.f32(float %170, float %161, float %161) #5
  %172 = tail call float @llvm.fma.f32(float %160, float 0x3FE62E4300000000, float %171) #5
  %173 = icmp ugt i32 %154, 2139095039
  %174 = tail call float @llvm.fma.f32(float %.02.i52, float 0x7FF0000000000000, float 0x7FF0000000000000) #5
  %spec.select.i54 = select i1 %173, float %174, float %172
  %175 = fcmp oeq float %.02.i52, 0.000000e+00
  %r.i.1.i55 = select i1 %175, float 0xFFF0000000000000, float %spec.select.i54
  %176 = bitcast i8 addrspace(1)* %alloc2869 to float addrspace(1)*
  %177 = getelementptr float, float addrspace(1)* %176, i64 %3
  %178 = bitcast i8 addrspace(1)* %alloc2767 to float addrspace(1)*
  %179 = getelementptr float, float addrspace(1)* %178, i64 %3
  %subtract.410 = fsub float %126, %8
  %180 = tail call float @llvm.fma.f32(float %subtract.410, float 0x3F777313A0000000, float 5.000000e-01) #5
  %181 = tail call float @llvm.nvvm.saturate.f(float %180) #5
  %182 = tail call float @llvm.nvvm.fma.rm.f(float %181, float 2.520000e+02, float 0x4168000020000000) #5
  %183 = fadd float %182, 0xC168000FE0000000
  %184 = fneg float %183
  %185 = tail call float @llvm.fma.f32(float %subtract.410, float 0x3FF7154760000000, float %184) #5
  %186 = tail call float @llvm.fma.f32(float %subtract.410, float 0x3E54AE0C00000000, float %185) #5
  %187 = bitcast float %182 to i32
  %188 = shl i32 %187, 23
  %189 = bitcast i32 %188 to float
  %190 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %186) #5
  %191 = fmul float %190, %189
  %add.10.i51 = fadd float %191, 0.000000e+00
  %subtract.410.1 = fsub float %127, %8
  %192 = tail call float @llvm.fma.f32(float %subtract.410.1, float 0x3F777313A0000000, float 5.000000e-01) #5
  %193 = tail call float @llvm.nvvm.saturate.f(float %192) #5
  %194 = tail call float @llvm.nvvm.fma.rm.f(float %193, float 2.520000e+02, float 0x4168000020000000) #5
  %195 = fadd float %194, 0xC168000FE0000000
  %196 = fneg float %195
  %197 = tail call float @llvm.fma.f32(float %subtract.410.1, float 0x3FF7154760000000, float %196) #5
  %198 = tail call float @llvm.fma.f32(float %subtract.410.1, float 0x3E54AE0C00000000, float %197) #5
  %199 = bitcast float %194 to i32
  %200 = shl i32 %199, 23
  %201 = bitcast i32 %200 to float
  %202 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %198) #5
  %203 = fmul float %202, %201
  %add.10.i51.1 = fadd float %add.10.i51, %203
  %204 = getelementptr inbounds float, float addrspace(1)* %11, i64 12
  %205 = bitcast float addrspace(1)* %204 to <4 x float> addrspace(1)*
  %206 = load <4 x float>, <4 x float> addrspace(1)* %205, align 16, !invariant.load !39
  %207 = extractelement <4 x float> %206, i32 0
  %208 = extractelement <4 x float> %206, i32 1
  %209 = extractelement <4 x float> %206, i32 2
  %210 = extractelement <4 x float> %206, i32 3
  %subtract.410.2 = fsub float %207, %8
  %211 = tail call float @llvm.fma.f32(float %subtract.410.2, float 0x3F777313A0000000, float 5.000000e-01) #5
  %212 = tail call float @llvm.nvvm.saturate.f(float %211) #5
  %213 = tail call float @llvm.nvvm.fma.rm.f(float %212, float 2.520000e+02, float 0x4168000020000000) #5
  %214 = fadd float %213, 0xC168000FE0000000
  %215 = fneg float %214
  %216 = tail call float @llvm.fma.f32(float %subtract.410.2, float 0x3FF7154760000000, float %215) #5
  %217 = tail call float @llvm.fma.f32(float %subtract.410.2, float 0x3E54AE0C00000000, float %216) #5
  %218 = bitcast float %213 to i32
  %219 = shl i32 %218, 23
  %220 = bitcast i32 %219 to float
  %221 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %217) #5
  %222 = fmul float %221, %220
  %add.10.i51.2 = fadd float %add.10.i51.1, %222
  %subtract.410.3 = fsub float %208, %8
  %223 = tail call float @llvm.fma.f32(float %subtract.410.3, float 0x3F777313A0000000, float 5.000000e-01) #5
  %224 = tail call float @llvm.nvvm.saturate.f(float %223) #5
  %225 = tail call float @llvm.nvvm.fma.rm.f(float %224, float 2.520000e+02, float 0x4168000020000000) #5
  %226 = fadd float %225, 0xC168000FE0000000
  %227 = fneg float %226
  %228 = tail call float @llvm.fma.f32(float %subtract.410.3, float 0x3FF7154760000000, float %227) #5
  %229 = tail call float @llvm.fma.f32(float %subtract.410.3, float 0x3E54AE0C00000000, float %228) #5
  %230 = bitcast float %225 to i32
  %231 = shl i32 %230, 23
  %232 = bitcast i32 %231 to float
  %233 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %229) #5
  %234 = fmul float %233, %232
  %add.10.i51.3 = fadd float %add.10.i51.2, %234
  %subtract.410.4 = fsub float %209, %8
  %235 = tail call float @llvm.fma.f32(float %subtract.410.4, float 0x3F777313A0000000, float 5.000000e-01) #5
  %236 = tail call float @llvm.nvvm.saturate.f(float %235) #5
  %237 = tail call float @llvm.nvvm.fma.rm.f(float %236, float 2.520000e+02, float 0x4168000020000000) #5
  %238 = fadd float %237, 0xC168000FE0000000
  %239 = fneg float %238
  %240 = tail call float @llvm.fma.f32(float %subtract.410.4, float 0x3FF7154760000000, float %239) #5
  %241 = tail call float @llvm.fma.f32(float %subtract.410.4, float 0x3E54AE0C00000000, float %240) #5
  %242 = bitcast float %237 to i32
  %243 = shl i32 %242, 23
  %244 = bitcast i32 %243 to float
  %245 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %241) #5
  %246 = fmul float %245, %244
  %add.10.i51.4 = fadd float %add.10.i51.3, %246
  %subtract.410.5 = fsub float %210, %8
  %247 = tail call float @llvm.fma.f32(float %subtract.410.5, float 0x3F777313A0000000, float 5.000000e-01) #5
  %248 = tail call float @llvm.nvvm.saturate.f(float %247) #5
  %249 = tail call float @llvm.nvvm.fma.rm.f(float %248, float 2.520000e+02, float 0x4168000020000000) #5
  %250 = fadd float %249, 0xC168000FE0000000
  %251 = fneg float %250
  %252 = tail call float @llvm.fma.f32(float %subtract.410.5, float 0x3FF7154760000000, float %251) #5
  %253 = tail call float @llvm.fma.f32(float %subtract.410.5, float 0x3E54AE0C00000000, float %252) #5
  %254 = bitcast float %249 to i32
  %255 = shl i32 %254, 23
  %256 = bitcast i32 %255 to float
  %257 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %253) #5
  %258 = fmul float %257, %256
  %add.10.i51.5 = fadd float %add.10.i51.4, %258
  %259 = getelementptr inbounds float, float addrspace(1)* %11, i64 16
  %260 = bitcast float addrspace(1)* %259 to <4 x float> addrspace(1)*
  %261 = load <4 x float>, <4 x float> addrspace(1)* %260, align 32, !invariant.load !39
  %262 = extractelement <4 x float> %261, i32 0
  %263 = extractelement <4 x float> %261, i32 1
  %264 = extractelement <4 x float> %261, i32 2
  %265 = extractelement <4 x float> %261, i32 3
  %subtract.410.6 = fsub float %262, %8
  %266 = tail call float @llvm.fma.f32(float %subtract.410.6, float 0x3F777313A0000000, float 5.000000e-01) #5
  %267 = tail call float @llvm.nvvm.saturate.f(float %266) #5
  %268 = tail call float @llvm.nvvm.fma.rm.f(float %267, float 2.520000e+02, float 0x4168000020000000) #5
  %269 = fadd float %268, 0xC168000FE0000000
  %270 = fneg float %269
  %271 = tail call float @llvm.fma.f32(float %subtract.410.6, float 0x3FF7154760000000, float %270) #5
  %272 = tail call float @llvm.fma.f32(float %subtract.410.6, float 0x3E54AE0C00000000, float %271) #5
  %273 = bitcast float %268 to i32
  %274 = shl i32 %273, 23
  %275 = bitcast i32 %274 to float
  %276 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %272) #5
  %277 = fmul float %276, %275
  %add.10.i51.6 = fadd float %add.10.i51.5, %277
  %subtract.410.7 = fsub float %263, %8
  %278 = tail call float @llvm.fma.f32(float %subtract.410.7, float 0x3F777313A0000000, float 5.000000e-01) #5
  %279 = tail call float @llvm.nvvm.saturate.f(float %278) #5
  %280 = tail call float @llvm.nvvm.fma.rm.f(float %279, float 2.520000e+02, float 0x4168000020000000) #5
  %281 = fadd float %280, 0xC168000FE0000000
  %282 = fneg float %281
  %283 = tail call float @llvm.fma.f32(float %subtract.410.7, float 0x3FF7154760000000, float %282) #5
  %284 = tail call float @llvm.fma.f32(float %subtract.410.7, float 0x3E54AE0C00000000, float %283) #5
  %285 = bitcast float %280 to i32
  %286 = shl i32 %285, 23
  %287 = bitcast i32 %286 to float
  %288 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %284) #5
  %289 = fmul float %288, %287
  %add.10.i51.7 = fadd float %add.10.i51.6, %289
  %subtract.410.8 = fsub float %264, %8
  %290 = tail call float @llvm.fma.f32(float %subtract.410.8, float 0x3F777313A0000000, float 5.000000e-01) #5
  %291 = tail call float @llvm.nvvm.saturate.f(float %290) #5
  %292 = tail call float @llvm.nvvm.fma.rm.f(float %291, float 2.520000e+02, float 0x4168000020000000) #5
  %293 = fadd float %292, 0xC168000FE0000000
  %294 = fneg float %293
  %295 = tail call float @llvm.fma.f32(float %subtract.410.8, float 0x3FF7154760000000, float %294) #5
  %296 = tail call float @llvm.fma.f32(float %subtract.410.8, float 0x3E54AE0C00000000, float %295) #5
  %297 = bitcast float %292 to i32
  %298 = shl i32 %297, 23
  %299 = bitcast i32 %298 to float
  %300 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %296) #5
  %301 = fmul float %300, %299
  %add.10.i51.8 = fadd float %add.10.i51.7, %301
  %subtract.410.9 = fsub float %265, %8
  %302 = tail call float @llvm.fma.f32(float %subtract.410.9, float 0x3F777313A0000000, float 5.000000e-01) #5
  %303 = tail call float @llvm.nvvm.saturate.f(float %302) #5
  %304 = tail call float @llvm.nvvm.fma.rm.f(float %303, float 2.520000e+02, float 0x4168000020000000) #5
  %305 = fadd float %304, 0xC168000FE0000000
  %306 = fneg float %305
  %307 = tail call float @llvm.fma.f32(float %subtract.410.9, float 0x3FF7154760000000, float %306) #5
  %308 = tail call float @llvm.fma.f32(float %subtract.410.9, float 0x3E54AE0C00000000, float %307) #5
  %309 = bitcast float %304 to i32
  %310 = shl i32 %309, 23
  %311 = bitcast i32 %310 to float
  %312 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %308) #5
  %313 = fmul float %312, %311
  %add.10.i51.9 = fadd float %add.10.i51.8, %313
  %314 = fcmp olt float %add.10.i51.9, 0x3810000000000000
  %315 = fmul float %add.10.i51.9, 0x4160000000000000
  %.02.i47 = select i1 %314, float %315, float %add.10.i51.9
  %i.i.0.i48 = select i1 %314, float -2.300000e+01, float 0.000000e+00
  %316 = bitcast float %.02.i47 to i32
  %317 = add nsw i32 %316, -1059760811
  %318 = and i32 %317, -8388608
  %319 = sub nsw i32 %316, %318
  %320 = bitcast i32 %319 to float
  %321 = sitofp i32 %318 to float
  %322 = tail call float @llvm.fma.f32(float %321, float 0x3E80000000000000, float %i.i.0.i48) #5
  %323 = fadd float %320, -1.000000e+00
  %324 = tail call float @llvm.fma.f32(float %323, float 0xBFC0AA04E0000000, float 0x3FC2073EC0000000) #5
  %325 = tail call float @llvm.fma.f32(float %324, float %323, float 0xBFBF19B980000000) #5
  %326 = tail call float @llvm.fma.f32(float %325, float %323, float 0x3FC1E52AA0000000) #5
  %327 = tail call float @llvm.fma.f32(float %326, float %323, float 0xBFC55B1720000000) #5
  %328 = tail call float @llvm.fma.f32(float %327, float %323, float 0x3FC99DA160000000) #5
  %329 = tail call float @llvm.fma.f32(float %328, float %323, float 0xBFCFFFE440000000) #5
  %330 = tail call float @llvm.fma.f32(float %329, float %323, float 0x3FD5554F00000000) #5
  %331 = tail call float @llvm.fma.f32(float %330, float %323, float -5.000000e-01) #5
  %332 = fmul float %323, %331
  %333 = tail call float @llvm.fma.f32(float %332, float %323, float %323) #5
  %334 = tail call float @llvm.fma.f32(float %322, float 0x3FE62E4300000000, float %333) #5
  %335 = icmp ugt i32 %316, 2139095039
  %336 = tail call float @llvm.fma.f32(float %.02.i47, float 0x7FF0000000000000, float 0x7FF0000000000000) #5
  %spec.select.i49 = select i1 %335, float %336, float %334
  %337 = fcmp oeq float %.02.i47, 0.000000e+00
  %r.i.1.i50 = select i1 %337, float 0xFFF0000000000000, float %spec.select.i49
  %338 = getelementptr inbounds float, float addrspace(1)* %11, i64 20
  %339 = bitcast float addrspace(1)* %338 to <4 x float> addrspace(1)*
  %340 = load <4 x float>, <4 x float> addrspace(1)* %339, align 16, !invariant.load !39
  %341 = extractelement <4 x float> %340, i32 0
  %342 = extractelement <4 x float> %340, i32 1
  %343 = extractelement <4 x float> %340, i32 2
  %344 = extractelement <4 x float> %340, i32 3
  %subtract.422 = fsub float %341, %9
  %345 = tail call float @llvm.fma.f32(float %subtract.422, float 0x3F777313A0000000, float 5.000000e-01) #5
  %346 = tail call float @llvm.nvvm.saturate.f(float %345) #5
  %347 = tail call float @llvm.nvvm.fma.rm.f(float %346, float 2.520000e+02, float 0x4168000020000000) #5
  %348 = fadd float %347, 0xC168000FE0000000
  %349 = fneg float %348
  %350 = tail call float @llvm.fma.f32(float %subtract.422, float 0x3FF7154760000000, float %349) #5
  %351 = tail call float @llvm.fma.f32(float %subtract.422, float 0x3E54AE0C00000000, float %350) #5
  %352 = bitcast float %347 to i32
  %353 = shl i32 %352, 23
  %354 = bitcast i32 %353 to float
  %355 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %351) #5
  %356 = fmul float %355, %354
  %add.10.i46 = fadd float %356, 0.000000e+00
  %subtract.422.1 = fsub float %342, %9
  %357 = tail call float @llvm.fma.f32(float %subtract.422.1, float 0x3F777313A0000000, float 5.000000e-01) #5
  %358 = tail call float @llvm.nvvm.saturate.f(float %357) #5
  %359 = tail call float @llvm.nvvm.fma.rm.f(float %358, float 2.520000e+02, float 0x4168000020000000) #5
  %360 = fadd float %359, 0xC168000FE0000000
  %361 = fneg float %360
  %362 = tail call float @llvm.fma.f32(float %subtract.422.1, float 0x3FF7154760000000, float %361) #5
  %363 = tail call float @llvm.fma.f32(float %subtract.422.1, float 0x3E54AE0C00000000, float %362) #5
  %364 = bitcast float %359 to i32
  %365 = shl i32 %364, 23
  %366 = bitcast i32 %365 to float
  %367 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %363) #5
  %368 = fmul float %367, %366
  %add.10.i46.1 = fadd float %add.10.i46, %368
  %subtract.422.2 = fsub float %343, %9
  %369 = tail call float @llvm.fma.f32(float %subtract.422.2, float 0x3F777313A0000000, float 5.000000e-01) #5
  %370 = tail call float @llvm.nvvm.saturate.f(float %369) #5
  %371 = tail call float @llvm.nvvm.fma.rm.f(float %370, float 2.520000e+02, float 0x4168000020000000) #5
  %372 = fadd float %371, 0xC168000FE0000000
  %373 = fneg float %372
  %374 = tail call float @llvm.fma.f32(float %subtract.422.2, float 0x3FF7154760000000, float %373) #5
  %375 = tail call float @llvm.fma.f32(float %subtract.422.2, float 0x3E54AE0C00000000, float %374) #5
  %376 = bitcast float %371 to i32
  %377 = shl i32 %376, 23
  %378 = bitcast i32 %377 to float
  %379 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %375) #5
  %380 = fmul float %379, %378
  %add.10.i46.2 = fadd float %add.10.i46.1, %380
  %subtract.422.3 = fsub float %344, %9
  %381 = tail call float @llvm.fma.f32(float %subtract.422.3, float 0x3F777313A0000000, float 5.000000e-01) #5
  %382 = tail call float @llvm.nvvm.saturate.f(float %381) #5
  %383 = tail call float @llvm.nvvm.fma.rm.f(float %382, float 2.520000e+02, float 0x4168000020000000) #5
  %384 = fadd float %383, 0xC168000FE0000000
  %385 = fneg float %384
  %386 = tail call float @llvm.fma.f32(float %subtract.422.3, float 0x3FF7154760000000, float %385) #5
  %387 = tail call float @llvm.fma.f32(float %subtract.422.3, float 0x3E54AE0C00000000, float %386) #5
  %388 = bitcast float %383 to i32
  %389 = shl i32 %388, 23
  %390 = bitcast i32 %389 to float
  %391 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %387) #5
  %392 = fmul float %391, %390
  %add.10.i46.3 = fadd float %add.10.i46.2, %392
  %393 = getelementptr inbounds float, float addrspace(1)* %11, i64 24
  %394 = bitcast float addrspace(1)* %393 to <4 x float> addrspace(1)*
  %395 = load <4 x float>, <4 x float> addrspace(1)* %394, align 32, !invariant.load !39
  %396 = extractelement <4 x float> %395, i32 0
  %397 = extractelement <4 x float> %395, i32 1
  %398 = extractelement <4 x float> %395, i32 2
  %399 = extractelement <4 x float> %395, i32 3
  %subtract.422.4 = fsub float %396, %9
  %400 = tail call float @llvm.fma.f32(float %subtract.422.4, float 0x3F777313A0000000, float 5.000000e-01) #5
  %401 = tail call float @llvm.nvvm.saturate.f(float %400) #5
  %402 = tail call float @llvm.nvvm.fma.rm.f(float %401, float 2.520000e+02, float 0x4168000020000000) #5
  %403 = fadd float %402, 0xC168000FE0000000
  %404 = fneg float %403
  %405 = tail call float @llvm.fma.f32(float %subtract.422.4, float 0x3FF7154760000000, float %404) #5
  %406 = tail call float @llvm.fma.f32(float %subtract.422.4, float 0x3E54AE0C00000000, float %405) #5
  %407 = bitcast float %402 to i32
  %408 = shl i32 %407, 23
  %409 = bitcast i32 %408 to float
  %410 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %406) #5
  %411 = fmul float %410, %409
  %add.10.i46.4 = fadd float %add.10.i46.3, %411
  %subtract.422.5 = fsub float %397, %9
  %412 = tail call float @llvm.fma.f32(float %subtract.422.5, float 0x3F777313A0000000, float 5.000000e-01) #5
  %413 = tail call float @llvm.nvvm.saturate.f(float %412) #5
  %414 = tail call float @llvm.nvvm.fma.rm.f(float %413, float 2.520000e+02, float 0x4168000020000000) #5
  %415 = fadd float %414, 0xC168000FE0000000
  %416 = fneg float %415
  %417 = tail call float @llvm.fma.f32(float %subtract.422.5, float 0x3FF7154760000000, float %416) #5
  %418 = tail call float @llvm.fma.f32(float %subtract.422.5, float 0x3E54AE0C00000000, float %417) #5
  %419 = bitcast float %414 to i32
  %420 = shl i32 %419, 23
  %421 = bitcast i32 %420 to float
  %422 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %418) #5
  %423 = fmul float %422, %421
  %add.10.i46.5 = fadd float %add.10.i46.4, %423
  %subtract.422.6 = fsub float %398, %9
  %424 = tail call float @llvm.fma.f32(float %subtract.422.6, float 0x3F777313A0000000, float 5.000000e-01) #5
  %425 = tail call float @llvm.nvvm.saturate.f(float %424) #5
  %426 = tail call float @llvm.nvvm.fma.rm.f(float %425, float 2.520000e+02, float 0x4168000020000000) #5
  %427 = fadd float %426, 0xC168000FE0000000
  %428 = fneg float %427
  %429 = tail call float @llvm.fma.f32(float %subtract.422.6, float 0x3FF7154760000000, float %428) #5
  %430 = tail call float @llvm.fma.f32(float %subtract.422.6, float 0x3E54AE0C00000000, float %429) #5
  %431 = bitcast float %426 to i32
  %432 = shl i32 %431, 23
  %433 = bitcast i32 %432 to float
  %434 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %430) #5
  %435 = fmul float %434, %433
  %add.10.i46.6 = fadd float %add.10.i46.5, %435
  %subtract.422.7 = fsub float %399, %9
  %436 = tail call float @llvm.fma.f32(float %subtract.422.7, float 0x3F777313A0000000, float 5.000000e-01) #5
  %437 = tail call float @llvm.nvvm.saturate.f(float %436) #5
  %438 = tail call float @llvm.nvvm.fma.rm.f(float %437, float 2.520000e+02, float 0x4168000020000000) #5
  %439 = fadd float %438, 0xC168000FE0000000
  %440 = fneg float %439
  %441 = tail call float @llvm.fma.f32(float %subtract.422.7, float 0x3FF7154760000000, float %440) #5
  %442 = tail call float @llvm.fma.f32(float %subtract.422.7, float 0x3E54AE0C00000000, float %441) #5
  %443 = bitcast float %438 to i32
  %444 = shl i32 %443, 23
  %445 = bitcast i32 %444 to float
  %446 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %442) #5
  %447 = fmul float %446, %445
  %add.10.i46.7 = fadd float %add.10.i46.6, %447
  %448 = getelementptr inbounds float, float addrspace(1)* %11, i64 28
  %449 = bitcast float addrspace(1)* %448 to <4 x float> addrspace(1)*
  %450 = load <4 x float>, <4 x float> addrspace(1)* %449, align 16, !invariant.load !39
  %451 = extractelement <4 x float> %450, i32 0
  %452 = extractelement <4 x float> %450, i32 1
  %453 = extractelement <4 x float> %450, i32 2
  %454 = extractelement <4 x float> %450, i32 3
  %subtract.422.8 = fsub float %451, %9
  %455 = tail call float @llvm.fma.f32(float %subtract.422.8, float 0x3F777313A0000000, float 5.000000e-01) #5
  %456 = tail call float @llvm.nvvm.saturate.f(float %455) #5
  %457 = tail call float @llvm.nvvm.fma.rm.f(float %456, float 2.520000e+02, float 0x4168000020000000) #5
  %458 = fadd float %457, 0xC168000FE0000000
  %459 = fneg float %458
  %460 = tail call float @llvm.fma.f32(float %subtract.422.8, float 0x3FF7154760000000, float %459) #5
  %461 = tail call float @llvm.fma.f32(float %subtract.422.8, float 0x3E54AE0C00000000, float %460) #5
  %462 = bitcast float %457 to i32
  %463 = shl i32 %462, 23
  %464 = bitcast i32 %463 to float
  %465 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %461) #5
  %466 = fmul float %465, %464
  %add.10.i46.8 = fadd float %add.10.i46.7, %466
  %subtract.422.9 = fsub float %452, %9
  %467 = tail call float @llvm.fma.f32(float %subtract.422.9, float 0x3F777313A0000000, float 5.000000e-01) #5
  %468 = tail call float @llvm.nvvm.saturate.f(float %467) #5
  %469 = tail call float @llvm.nvvm.fma.rm.f(float %468, float 2.520000e+02, float 0x4168000020000000) #5
  %470 = fadd float %469, 0xC168000FE0000000
  %471 = fneg float %470
  %472 = tail call float @llvm.fma.f32(float %subtract.422.9, float 0x3FF7154760000000, float %471) #5
  %473 = tail call float @llvm.fma.f32(float %subtract.422.9, float 0x3E54AE0C00000000, float %472) #5
  %474 = bitcast float %469 to i32
  %475 = shl i32 %474, 23
  %476 = bitcast i32 %475 to float
  %477 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %473) #5
  %478 = fmul float %477, %476
  %add.10.i46.9 = fadd float %add.10.i46.8, %478
  %479 = fcmp olt float %add.10.i46.9, 0x3810000000000000
  %480 = fmul float %add.10.i46.9, 0x4160000000000000
  %.02.i42 = select i1 %479, float %480, float %add.10.i46.9
  %i.i.0.i43 = select i1 %479, float -2.300000e+01, float 0.000000e+00
  %481 = bitcast float %.02.i42 to i32
  %482 = add nsw i32 %481, -1059760811
  %483 = and i32 %482, -8388608
  %484 = sub nsw i32 %481, %483
  %485 = bitcast i32 %484 to float
  %486 = sitofp i32 %483 to float
  %487 = tail call float @llvm.fma.f32(float %486, float 0x3E80000000000000, float %i.i.0.i43) #5
  %488 = fadd float %485, -1.000000e+00
  %489 = tail call float @llvm.fma.f32(float %488, float 0xBFC0AA04E0000000, float 0x3FC2073EC0000000) #5
  %490 = tail call float @llvm.fma.f32(float %489, float %488, float 0xBFBF19B980000000) #5
  %491 = tail call float @llvm.fma.f32(float %490, float %488, float 0x3FC1E52AA0000000) #5
  %492 = tail call float @llvm.fma.f32(float %491, float %488, float 0xBFC55B1720000000) #5
  %493 = tail call float @llvm.fma.f32(float %492, float %488, float 0x3FC99DA160000000) #5
  %494 = tail call float @llvm.fma.f32(float %493, float %488, float 0xBFCFFFE440000000) #5
  %495 = tail call float @llvm.fma.f32(float %494, float %488, float 0x3FD5554F00000000) #5
  %496 = tail call float @llvm.fma.f32(float %495, float %488, float -5.000000e-01) #5
  %497 = fmul float %488, %496
  %498 = tail call float @llvm.fma.f32(float %497, float %488, float %488) #5
  %499 = tail call float @llvm.fma.f32(float %487, float 0x3FE62E4300000000, float %498) #5
  %500 = icmp ugt i32 %481, 2139095039
  %501 = tail call float @llvm.fma.f32(float %.02.i42, float 0x7FF0000000000000, float 0x7FF0000000000000) #5
  %spec.select.i44 = select i1 %500, float %501, float %499
  %502 = fcmp oeq float %.02.i42, 0.000000e+00
  %r.i.1.i45 = select i1 %502, float 0xFFF0000000000000, float %spec.select.i44
  %subtract.434 = fsub float %453, %10
  %503 = tail call float @llvm.fma.f32(float %subtract.434, float 0x3F777313A0000000, float 5.000000e-01) #5
  %504 = tail call float @llvm.nvvm.saturate.f(float %503) #5
  %505 = tail call float @llvm.nvvm.fma.rm.f(float %504, float 2.520000e+02, float 0x4168000020000000) #5
  %506 = fadd float %505, 0xC168000FE0000000
  %507 = fneg float %506
  %508 = tail call float @llvm.fma.f32(float %subtract.434, float 0x3FF7154760000000, float %507) #5
  %509 = tail call float @llvm.fma.f32(float %subtract.434, float 0x3E54AE0C00000000, float %508) #5
  %510 = bitcast float %505 to i32
  %511 = shl i32 %510, 23
  %512 = bitcast i32 %511 to float
  %513 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %509) #5
  %514 = fmul float %513, %512
  %add.10.i = fadd float %514, 0.000000e+00
  %subtract.434.1 = fsub float %454, %10
  %515 = tail call float @llvm.fma.f32(float %subtract.434.1, float 0x3F777313A0000000, float 5.000000e-01) #5
  %516 = tail call float @llvm.nvvm.saturate.f(float %515) #5
  %517 = tail call float @llvm.nvvm.fma.rm.f(float %516, float 2.520000e+02, float 0x4168000020000000) #5
  %518 = fadd float %517, 0xC168000FE0000000
  %519 = fneg float %518
  %520 = tail call float @llvm.fma.f32(float %subtract.434.1, float 0x3FF7154760000000, float %519) #5
  %521 = tail call float @llvm.fma.f32(float %subtract.434.1, float 0x3E54AE0C00000000, float %520) #5
  %522 = bitcast float %517 to i32
  %523 = shl i32 %522, 23
  %524 = bitcast i32 %523 to float
  %525 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %521) #5
  %526 = fmul float %525, %524
  %add.10.i.1 = fadd float %add.10.i, %526
  %527 = getelementptr inbounds float, float addrspace(1)* %11, i64 32
  %528 = bitcast float addrspace(1)* %527 to <4 x float> addrspace(1)*
  %529 = load <4 x float>, <4 x float> addrspace(1)* %528, align 32, !invariant.load !39
  %530 = extractelement <4 x float> %529, i32 0
  %531 = extractelement <4 x float> %529, i32 1
  %532 = extractelement <4 x float> %529, i32 2
  %533 = extractelement <4 x float> %529, i32 3
  %subtract.434.2 = fsub float %530, %10
  %534 = tail call float @llvm.fma.f32(float %subtract.434.2, float 0x3F777313A0000000, float 5.000000e-01) #5
  %535 = tail call float @llvm.nvvm.saturate.f(float %534) #5
  %536 = tail call float @llvm.nvvm.fma.rm.f(float %535, float 2.520000e+02, float 0x4168000020000000) #5
  %537 = fadd float %536, 0xC168000FE0000000
  %538 = fneg float %537
  %539 = tail call float @llvm.fma.f32(float %subtract.434.2, float 0x3FF7154760000000, float %538) #5
  %540 = tail call float @llvm.fma.f32(float %subtract.434.2, float 0x3E54AE0C00000000, float %539) #5
  %541 = bitcast float %536 to i32
  %542 = shl i32 %541, 23
  %543 = bitcast i32 %542 to float
  %544 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %540) #5
  %545 = fmul float %544, %543
  %add.10.i.2 = fadd float %add.10.i.1, %545
  %subtract.434.3 = fsub float %531, %10
  %546 = tail call float @llvm.fma.f32(float %subtract.434.3, float 0x3F777313A0000000, float 5.000000e-01) #5
  %547 = tail call float @llvm.nvvm.saturate.f(float %546) #5
  %548 = tail call float @llvm.nvvm.fma.rm.f(float %547, float 2.520000e+02, float 0x4168000020000000) #5
  %549 = fadd float %548, 0xC168000FE0000000
  %550 = fneg float %549
  %551 = tail call float @llvm.fma.f32(float %subtract.434.3, float 0x3FF7154760000000, float %550) #5
  %552 = tail call float @llvm.fma.f32(float %subtract.434.3, float 0x3E54AE0C00000000, float %551) #5
  %553 = bitcast float %548 to i32
  %554 = shl i32 %553, 23
  %555 = bitcast i32 %554 to float
  %556 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %552) #5
  %557 = fmul float %556, %555
  %add.10.i.3 = fadd float %add.10.i.2, %557
  %subtract.434.4 = fsub float %532, %10
  %558 = tail call float @llvm.fma.f32(float %subtract.434.4, float 0x3F777313A0000000, float 5.000000e-01) #5
  %559 = tail call float @llvm.nvvm.saturate.f(float %558) #5
  %560 = tail call float @llvm.nvvm.fma.rm.f(float %559, float 2.520000e+02, float 0x4168000020000000) #5
  %561 = fadd float %560, 0xC168000FE0000000
  %562 = fneg float %561
  %563 = tail call float @llvm.fma.f32(float %subtract.434.4, float 0x3FF7154760000000, float %562) #5
  %564 = tail call float @llvm.fma.f32(float %subtract.434.4, float 0x3E54AE0C00000000, float %563) #5
  %565 = bitcast float %560 to i32
  %566 = shl i32 %565, 23
  %567 = bitcast i32 %566 to float
  %568 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %564) #5
  %569 = fmul float %568, %567
  %add.10.i.4 = fadd float %add.10.i.3, %569
  %subtract.434.5 = fsub float %533, %10
  %570 = tail call float @llvm.fma.f32(float %subtract.434.5, float 0x3F777313A0000000, float 5.000000e-01) #5
  %571 = tail call float @llvm.nvvm.saturate.f(float %570) #5
  %572 = tail call float @llvm.nvvm.fma.rm.f(float %571, float 2.520000e+02, float 0x4168000020000000) #5
  %573 = fadd float %572, 0xC168000FE0000000
  %574 = fneg float %573
  %575 = tail call float @llvm.fma.f32(float %subtract.434.5, float 0x3FF7154760000000, float %574) #5
  %576 = tail call float @llvm.fma.f32(float %subtract.434.5, float 0x3E54AE0C00000000, float %575) #5
  %577 = bitcast float %572 to i32
  %578 = shl i32 %577, 23
  %579 = bitcast i32 %578 to float
  %580 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %576) #5
  %581 = fmul float %580, %579
  %add.10.i.5 = fadd float %add.10.i.4, %581
  %582 = getelementptr inbounds float, float addrspace(1)* %11, i64 36
  %583 = bitcast float addrspace(1)* %582 to <4 x float> addrspace(1)*
  %584 = load <4 x float>, <4 x float> addrspace(1)* %583, align 16, !invariant.load !39
  %585 = extractelement <4 x float> %584, i32 0
  %586 = extractelement <4 x float> %584, i32 1
  %587 = extractelement <4 x float> %584, i32 2
  %588 = extractelement <4 x float> %584, i32 3
  %subtract.434.6 = fsub float %585, %10
  %589 = tail call float @llvm.fma.f32(float %subtract.434.6, float 0x3F777313A0000000, float 5.000000e-01) #5
  %590 = tail call float @llvm.nvvm.saturate.f(float %589) #5
  %591 = tail call float @llvm.nvvm.fma.rm.f(float %590, float 2.520000e+02, float 0x4168000020000000) #5
  %592 = fadd float %591, 0xC168000FE0000000
  %593 = fneg float %592
  %594 = tail call float @llvm.fma.f32(float %subtract.434.6, float 0x3FF7154760000000, float %593) #5
  %595 = tail call float @llvm.fma.f32(float %subtract.434.6, float 0x3E54AE0C00000000, float %594) #5
  %596 = bitcast float %591 to i32
  %597 = shl i32 %596, 23
  %598 = bitcast i32 %597 to float
  %599 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %595) #5
  %600 = fmul float %599, %598
  %add.10.i.6 = fadd float %add.10.i.5, %600
  %subtract.434.7 = fsub float %586, %10
  %601 = tail call float @llvm.fma.f32(float %subtract.434.7, float 0x3F777313A0000000, float 5.000000e-01) #5
  %602 = tail call float @llvm.nvvm.saturate.f(float %601) #5
  %603 = tail call float @llvm.nvvm.fma.rm.f(float %602, float 2.520000e+02, float 0x4168000020000000) #5
  %604 = fadd float %603, 0xC168000FE0000000
  %605 = fneg float %604
  %606 = tail call float @llvm.fma.f32(float %subtract.434.7, float 0x3FF7154760000000, float %605) #5
  %607 = tail call float @llvm.fma.f32(float %subtract.434.7, float 0x3E54AE0C00000000, float %606) #5
  %608 = bitcast float %603 to i32
  %609 = shl i32 %608, 23
  %610 = bitcast i32 %609 to float
  %611 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %607) #5
  %612 = fmul float %611, %610
  %add.10.i.7 = fadd float %add.10.i.6, %612
  %subtract.434.8 = fsub float %587, %10
  %613 = tail call float @llvm.fma.f32(float %subtract.434.8, float 0x3F777313A0000000, float 5.000000e-01) #5
  %614 = tail call float @llvm.nvvm.saturate.f(float %613) #5
  %615 = tail call float @llvm.nvvm.fma.rm.f(float %614, float 2.520000e+02, float 0x4168000020000000) #5
  %616 = fadd float %615, 0xC168000FE0000000
  %617 = fneg float %616
  %618 = tail call float @llvm.fma.f32(float %subtract.434.8, float 0x3FF7154760000000, float %617) #5
  %619 = tail call float @llvm.fma.f32(float %subtract.434.8, float 0x3E54AE0C00000000, float %618) #5
  %620 = bitcast float %615 to i32
  %621 = shl i32 %620, 23
  %622 = bitcast i32 %621 to float
  %623 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %619) #5
  %624 = fmul float %623, %622
  %add.10.i.8 = fadd float %add.10.i.7, %624
  %subtract.434.9 = fsub float %588, %10
  %625 = tail call float @llvm.fma.f32(float %subtract.434.9, float 0x3F777313A0000000, float 5.000000e-01) #5
  %626 = tail call float @llvm.nvvm.saturate.f(float %625) #5
  %627 = tail call float @llvm.nvvm.fma.rm.f(float %626, float 2.520000e+02, float 0x4168000020000000) #5
  %628 = fadd float %627, 0xC168000FE0000000
  %629 = fneg float %628
  %630 = tail call float @llvm.fma.f32(float %subtract.434.9, float 0x3FF7154760000000, float %629) #5
  %631 = tail call float @llvm.fma.f32(float %subtract.434.9, float 0x3E54AE0C00000000, float %630) #5
  %632 = bitcast float %627 to i32
  %633 = shl i32 %632, 23
  %634 = bitcast i32 %633 to float
  %635 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %631) #5
  %636 = fmul float %635, %634
  %add.10.i.9 = fadd float %add.10.i.8, %636
  %637 = fcmp olt float %add.10.i.9, 0x3810000000000000
  %638 = fmul float %add.10.i.9, 0x4160000000000000
  %.02.i = select i1 %637, float %638, float %add.10.i.9
  %i.i.0.i = select i1 %637, float -2.300000e+01, float 0.000000e+00
  %639 = bitcast float %.02.i to i32
  %640 = add nsw i32 %639, -1059760811
  %641 = and i32 %640, -8388608
  %642 = sub nsw i32 %639, %641
  %643 = bitcast i32 %642 to float
  %644 = sitofp i32 %641 to float
  %645 = tail call float @llvm.fma.f32(float %644, float 0x3E80000000000000, float %i.i.0.i) #5
  %646 = fadd float %643, -1.000000e+00
  %647 = tail call float @llvm.fma.f32(float %646, float 0xBFC0AA04E0000000, float 0x3FC2073EC0000000) #5
  %648 = tail call float @llvm.fma.f32(float %647, float %646, float 0xBFBF19B980000000) #5
  %649 = tail call float @llvm.fma.f32(float %648, float %646, float 0x3FC1E52AA0000000) #5
  %650 = tail call float @llvm.fma.f32(float %649, float %646, float 0xBFC55B1720000000) #5
  %651 = tail call float @llvm.fma.f32(float %650, float %646, float 0x3FC99DA160000000) #5
  %652 = tail call float @llvm.fma.f32(float %651, float %646, float 0xBFCFFFE440000000) #5
  %653 = tail call float @llvm.fma.f32(float %652, float %646, float 0x3FD5554F00000000) #5
  %654 = tail call float @llvm.fma.f32(float %653, float %646, float -5.000000e-01) #5
  %655 = fmul float %646, %654
  %656 = tail call float @llvm.fma.f32(float %655, float %646, float %646) #5
  %657 = tail call float @llvm.fma.f32(float %645, float 0x3FE62E4300000000, float %656) #5
  %658 = icmp ugt i32 %639, 2139095039
  %659 = tail call float @llvm.fma.f32(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #5
  %spec.select.i = select i1 %658, float %659, float %657
  %660 = fcmp oeq float %.02.i, 0.000000e+00
  %r.i.1.i = select i1 %660, float 0xFFF0000000000000, float %spec.select.i
  %661 = insertelement <4 x float> poison, float %r.i.1.i55, i32 0
  %662 = insertelement <4 x float> %661, float %r.i.1.i50, i32 1
  %663 = insertelement <4 x float> %662, float %r.i.1.i45, i32 2
  %664 = insertelement <4 x float> %663, float %r.i.1.i, i32 3
  %665 = bitcast float addrspace(1)* %177 to <4 x float> addrspace(1)*
  store <4 x float> %664, <4 x float> addrspace(1)* %665, align 16
  %666 = insertelement <4 x float> poison, float %add.10.i56.9, i32 0
  %667 = insertelement <4 x float> %666, float %add.10.i51.9, i32 1
  %668 = insertelement <4 x float> %667, float %add.10.i46.9, i32 2
  %669 = insertelement <4 x float> %668, float %add.10.i.9, i32 3
  %670 = bitcast float addrspace(1)* %179 to <4 x float> addrspace(1)*
  store <4 x float> %669, <4 x float> addrspace(1)* %670, align 16
  ret void
}

; Function Attrs: nounwind
define void @input_fusion_reduce_1(i8* noalias nocapture readonly align 16 dereferenceable(32) %alloc2, i8* noalias nocapture readonly align 128 dereferenceable(5120) %alloc26, i8* noalias nocapture readonly align 128 dereferenceable(512) %alloc28, i8* noalias nocapture readonly align 128 dereferenceable(512) %alloc29, i8* noalias nocapture writeonly align 128 dereferenceable(4) %alloc34, i8* noalias nocapture readnone align 128 dereferenceable(5272) %temp_buf) local_unnamed_addr #5 {
entry:
  %alloc34107 = addrspacecast i8* %alloc34 to i8 addrspace(1)*
  %alloc29105 = addrspacecast i8* %alloc29 to i8 addrspace(1)*
  %alloc28103 = addrspacecast i8* %alloc28 to i8 addrspace(1)*
  %alloc26101 = addrspacecast i8* %alloc26 to i8 addrspace(1)*
  %alloc299 = addrspacecast i8* %alloc2 to i8 addrspace(1)*
  %initial_value_addr = alloca float, align 4
  %0 = bitcast i8 addrspace(1)* %alloc28103 to [32 x float] addrspace(1)*
  %1 = bitcast i8 addrspace(1)* %alloc29105 to [32 x float] addrspace(1)*
  %2 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !42
  %3 = bitcast i8 addrspace(1)* %alloc26101 to float addrspace(1)*
  %.lhs.trunc88 = trunc i32 %2 to i8
  %4 = urem i8 %.lhs.trunc88, 10
  %5 = udiv i8 %.lhs.trunc88, 10
  %6 = zext i8 %5 to i64
  %Arg_1.216 = getelementptr inbounds i8, i8 addrspace(1)* %alloc299, i64 %6
  %Arg_1.217 = load i8, i8 addrspace(1)* %Arg_1.216, align 1, !invariant.load !39
  %7 = icmp eq i8 %4, %Arg_1.217
  %8 = select i1 %7, float 1.000000e+00, float 0.000000e+00
  %9 = icmp ult i8 %Arg_1.217, 10
  %10 = select i1 %9, float 0.000000e+00, float 0x7FF8000000000000
  %add.2624 = fadd float %10, %8
  %compare.2825 = fcmp oeq float %add.2624, 0.000000e+00
  %11 = zext i32 %2 to i64
  %Arg_2.326 = getelementptr float, float addrspace(1)* %3, i64 %11
  %Arg_2.327 = load float, float addrspace(1)* %Arg_2.326, align 4, !invariant.load !39
  %Arg_3.428 = getelementptr inbounds [32 x float], [32 x float] addrspace(1)* %1, i64 0, i64 %6
  %Arg_3.429 = load float, float addrspace(1)* %Arg_3.428, align 4, !invariant.load !39
  %subtract.3030 = fsub float %Arg_2.327, %Arg_3.429
  %Arg_0.131 = getelementptr inbounds [32 x float], [32 x float] addrspace(1)* %0, i64 0, i64 %6
  %Arg_0.132 = load float, float addrspace(1)* %Arg_0.131, align 4, !invariant.load !39
  %subtract.3233 = fsub float %subtract.3030, %Arg_0.132
  %12 = select i1 %compare.2825, float 0.000000e+00, float %subtract.3233
  %13 = fmul float %add.2624, %12
  %add.39.i74 = fsub float 0.000000e+00, %13
  %x_loc15.1 = or i32 %2, 32
  %.lhs.trunc.1 = trunc i32 %x_loc15.1 to i16
  %.lhs.trunc.1.frozen = freeze i16 %.lhs.trunc.1
  %14 = udiv i16 %.lhs.trunc.1.frozen, 10
  %15 = mul i16 %14, 10
  %.decomposed = sub i16 %.lhs.trunc.1.frozen, %15
  %16 = zext i16 %14 to i64
  %Arg_1.216.1 = getelementptr inbounds i8, i8 addrspace(1)* %alloc299, i64 %16
  %Arg_1.217.1 = load i8, i8 addrspace(1)* %Arg_1.216.1, align 1, !invariant.load !39
  %17 = zext i8 %Arg_1.217.1 to i16
  %18 = icmp eq i16 %.decomposed, %17
  %19 = select i1 %18, float 1.000000e+00, float 0.000000e+00
  %20 = icmp ult i8 %Arg_1.217.1, 10
  %21 = select i1 %20, float 0.000000e+00, float 0x7FF8000000000000
  %add.2624.1 = fadd float %21, %19
  %compare.2825.1 = fcmp oeq float %add.2624.1, 0.000000e+00
  %Arg_2.326.1112 = getelementptr inbounds float, float addrspace(1)* %Arg_2.326, i64 32
  %Arg_2.327.1 = load float, float addrspace(1)* %Arg_2.326.1112, align 4, !invariant.load !39
  %Arg_3.428.1 = getelementptr inbounds [32 x float], [32 x float] addrspace(1)* %1, i64 0, i64 %16
  %Arg_3.429.1 = load float, float addrspace(1)* %Arg_3.428.1, align 4, !invariant.load !39
  %subtract.3030.1 = fsub float %Arg_2.327.1, %Arg_3.429.1
  %Arg_0.131.1 = getelementptr inbounds [32 x float], [32 x float] addrspace(1)* %0, i64 0, i64 %16
  %Arg_0.132.1 = load float, float addrspace(1)* %Arg_0.131.1, align 4, !invariant.load !39
  %subtract.3233.1 = fsub float %subtract.3030.1, %Arg_0.132.1
  %22 = select i1 %compare.2825.1, float 0.000000e+00, float %subtract.3233.1
  %23 = fmul float %add.2624.1, %22
  %add.39.i74.1 = fsub float %add.39.i74, %23
  %x_loc15.2 = or i32 %2, 64
  %.lhs.trunc.2 = trunc i32 %x_loc15.2 to i16
  %.lhs.trunc.2.frozen = freeze i16 %.lhs.trunc.2
  %24 = udiv i16 %.lhs.trunc.2.frozen, 10
  %25 = mul i16 %24, 10
  %.decomposed91 = sub i16 %.lhs.trunc.2.frozen, %25
  %26 = zext i16 %24 to i64
  %Arg_1.216.2 = getelementptr inbounds i8, i8 addrspace(1)* %alloc299, i64 %26
  %Arg_1.217.2 = load i8, i8 addrspace(1)* %Arg_1.216.2, align 1, !invariant.load !39
  %27 = zext i8 %Arg_1.217.2 to i16
  %28 = icmp eq i16 %.decomposed91, %27
  %29 = select i1 %28, float 1.000000e+00, float 0.000000e+00
  %30 = icmp ult i8 %Arg_1.217.2, 10
  %31 = select i1 %30, float 0.000000e+00, float 0x7FF8000000000000
  %add.2624.2 = fadd float %31, %29
  %compare.2825.2 = fcmp oeq float %add.2624.2, 0.000000e+00
  %Arg_2.326.2114 = getelementptr inbounds float, float addrspace(1)* %Arg_2.326, i64 64
  %Arg_2.327.2 = load float, float addrspace(1)* %Arg_2.326.2114, align 4, !invariant.load !39
  %Arg_3.428.2 = getelementptr inbounds [32 x float], [32 x float] addrspace(1)* %1, i64 0, i64 %26
  %Arg_3.429.2 = load float, float addrspace(1)* %Arg_3.428.2, align 4, !invariant.load !39
  %subtract.3030.2 = fsub float %Arg_2.327.2, %Arg_3.429.2
  %Arg_0.131.2 = getelementptr inbounds [32 x float], [32 x float] addrspace(1)* %0, i64 0, i64 %26
  %Arg_0.132.2 = load float, float addrspace(1)* %Arg_0.131.2, align 4, !invariant.load !39
  %subtract.3233.2 = fsub float %subtract.3030.2, %Arg_0.132.2
  %32 = select i1 %compare.2825.2, float 0.000000e+00, float %subtract.3233.2
  %33 = fmul float %add.2624.2, %32
  %add.39.i74.2 = fsub float %add.39.i74.1, %33
  %x_loc15.3 = or i32 %2, 96
  %.lhs.trunc.3 = trunc i32 %x_loc15.3 to i16
  %.lhs.trunc.3.frozen = freeze i16 %.lhs.trunc.3
  %34 = udiv i16 %.lhs.trunc.3.frozen, 10
  %35 = mul i16 %34, 10
  %.decomposed92 = sub i16 %.lhs.trunc.3.frozen, %35
  %36 = zext i16 %34 to i64
  %Arg_1.216.3 = getelementptr inbounds i8, i8 addrspace(1)* %alloc299, i64 %36
  %Arg_1.217.3 = load i8, i8 addrspace(1)* %Arg_1.216.3, align 1, !invariant.load !39
  %37 = zext i8 %Arg_1.217.3 to i16
  %38 = icmp eq i16 %.decomposed92, %37
  %39 = select i1 %38, float 1.000000e+00, float 0.000000e+00
  %40 = icmp ult i8 %Arg_1.217.3, 10
  %41 = select i1 %40, float 0.000000e+00, float 0x7FF8000000000000
  %add.2624.3 = fadd float %41, %39
  %compare.2825.3 = fcmp oeq float %add.2624.3, 0.000000e+00
  %Arg_2.326.3116 = getelementptr inbounds float, float addrspace(1)* %Arg_2.326, i64 96
  %Arg_2.327.3 = load float, float addrspace(1)* %Arg_2.326.3116, align 4, !invariant.load !39
  %Arg_3.428.3 = getelementptr inbounds [32 x float], [32 x float] addrspace(1)* %1, i64 0, i64 %36
  %Arg_3.429.3 = load float, float addrspace(1)* %Arg_3.428.3, align 4, !invariant.load !39
  %subtract.3030.3 = fsub float %Arg_2.327.3, %Arg_3.429.3
  %Arg_0.131.3 = getelementptr inbounds [32 x float], [32 x float] addrspace(1)* %0, i64 0, i64 %36
  %Arg_0.132.3 = load float, float addrspace(1)* %Arg_0.131.3, align 4, !invariant.load !39
  %subtract.3233.3 = fsub float %subtract.3030.3, %Arg_0.132.3
  %42 = select i1 %compare.2825.3, float 0.000000e+00, float %subtract.3233.3
  %43 = fmul float %add.2624.3, %42
  %add.39.i74.3 = fsub float %add.39.i74.2, %43
  %x_loc15.4 = or i32 %2, 128
  %.lhs.trunc.4 = trunc i32 %x_loc15.4 to i16
  %.lhs.trunc.4.frozen = freeze i16 %.lhs.trunc.4
  %44 = udiv i16 %.lhs.trunc.4.frozen, 10
  %45 = mul i16 %44, 10
  %.decomposed93 = sub i16 %.lhs.trunc.4.frozen, %45
  %46 = zext i16 %44 to i64
  %Arg_1.216.4 = getelementptr inbounds i8, i8 addrspace(1)* %alloc299, i64 %46
  %Arg_1.217.4 = load i8, i8 addrspace(1)* %Arg_1.216.4, align 1, !invariant.load !39
  %47 = zext i8 %Arg_1.217.4 to i16
  %48 = icmp eq i16 %.decomposed93, %47
  %49 = select i1 %48, float 1.000000e+00, float 0.000000e+00
  %50 = icmp ult i8 %Arg_1.217.4, 10
  %51 = select i1 %50, float 0.000000e+00, float 0x7FF8000000000000
  %add.2624.4 = fadd float %51, %49
  %compare.2825.4 = fcmp oeq float %add.2624.4, 0.000000e+00
  %Arg_2.326.4118 = getelementptr inbounds float, float addrspace(1)* %Arg_2.326, i64 128
  %Arg_2.327.4 = load float, float addrspace(1)* %Arg_2.326.4118, align 4, !invariant.load !39
  %Arg_3.428.4 = getelementptr inbounds [32 x float], [32 x float] addrspace(1)* %1, i64 0, i64 %46
  %Arg_3.429.4 = load float, float addrspace(1)* %Arg_3.428.4, align 4, !invariant.load !39
  %subtract.3030.4 = fsub float %Arg_2.327.4, %Arg_3.429.4
  %Arg_0.131.4 = getelementptr inbounds [32 x float], [32 x float] addrspace(1)* %0, i64 0, i64 %46
  %Arg_0.132.4 = load float, float addrspace(1)* %Arg_0.131.4, align 4, !invariant.load !39
  %subtract.3233.4 = fsub float %subtract.3030.4, %Arg_0.132.4
  %52 = select i1 %compare.2825.4, float 0.000000e+00, float %subtract.3233.4
  %53 = fmul float %add.2624.4, %52
  %add.39.i74.4 = fsub float %add.39.i74.3, %53
  %x_loc15.5 = or i32 %2, 160
  %.lhs.trunc.5 = trunc i32 %x_loc15.5 to i16
  %.lhs.trunc.5.frozen = freeze i16 %.lhs.trunc.5
  %54 = udiv i16 %.lhs.trunc.5.frozen, 10
  %55 = mul i16 %54, 10
  %.decomposed94 = sub i16 %.lhs.trunc.5.frozen, %55
  %56 = zext i16 %54 to i64
  %Arg_1.216.5 = getelementptr inbounds i8, i8 addrspace(1)* %alloc299, i64 %56
  %Arg_1.217.5 = load i8, i8 addrspace(1)* %Arg_1.216.5, align 1, !invariant.load !39
  %57 = zext i8 %Arg_1.217.5 to i16
  %58 = icmp eq i16 %.decomposed94, %57
  %59 = select i1 %58, float 1.000000e+00, float 0.000000e+00
  %60 = icmp ult i8 %Arg_1.217.5, 10
  %61 = select i1 %60, float 0.000000e+00, float 0x7FF8000000000000
  %add.2624.5 = fadd float %61, %59
  %compare.2825.5 = fcmp oeq float %add.2624.5, 0.000000e+00
  %Arg_2.326.5120 = getelementptr inbounds float, float addrspace(1)* %Arg_2.326, i64 160
  %Arg_2.327.5 = load float, float addrspace(1)* %Arg_2.326.5120, align 4, !invariant.load !39
  %Arg_3.428.5 = getelementptr inbounds [32 x float], [32 x float] addrspace(1)* %1, i64 0, i64 %56
  %Arg_3.429.5 = load float, float addrspace(1)* %Arg_3.428.5, align 4, !invariant.load !39
  %subtract.3030.5 = fsub float %Arg_2.327.5, %Arg_3.429.5
  %Arg_0.131.5 = getelementptr inbounds [32 x float], [32 x float] addrspace(1)* %0, i64 0, i64 %56
  %Arg_0.132.5 = load float, float addrspace(1)* %Arg_0.131.5, align 4, !invariant.load !39
  %subtract.3233.5 = fsub float %subtract.3030.5, %Arg_0.132.5
  %62 = select i1 %compare.2825.5, float 0.000000e+00, float %subtract.3233.5
  %63 = fmul float %add.2624.5, %62
  %add.39.i74.5 = fsub float %add.39.i74.4, %63
  %x_loc15.6 = or i32 %2, 192
  %.lhs.trunc.6 = trunc i32 %x_loc15.6 to i16
  %.lhs.trunc.6.frozen = freeze i16 %.lhs.trunc.6
  %64 = udiv i16 %.lhs.trunc.6.frozen, 10
  %65 = mul i16 %64, 10
  %.decomposed95 = sub i16 %.lhs.trunc.6.frozen, %65
  %66 = zext i16 %64 to i64
  %Arg_1.216.6 = getelementptr inbounds i8, i8 addrspace(1)* %alloc299, i64 %66
  %Arg_1.217.6 = load i8, i8 addrspace(1)* %Arg_1.216.6, align 1, !invariant.load !39
  %67 = zext i8 %Arg_1.217.6 to i16
  %68 = icmp eq i16 %.decomposed95, %67
  %69 = select i1 %68, float 1.000000e+00, float 0.000000e+00
  %70 = icmp ult i8 %Arg_1.217.6, 10
  %71 = select i1 %70, float 0.000000e+00, float 0x7FF8000000000000
  %add.2624.6 = fadd float %71, %69
  %compare.2825.6 = fcmp oeq float %add.2624.6, 0.000000e+00
  %Arg_2.326.6122 = getelementptr inbounds float, float addrspace(1)* %Arg_2.326, i64 192
  %Arg_2.327.6 = load float, float addrspace(1)* %Arg_2.326.6122, align 4, !invariant.load !39
  %Arg_3.428.6 = getelementptr inbounds [32 x float], [32 x float] addrspace(1)* %1, i64 0, i64 %66
  %Arg_3.429.6 = load float, float addrspace(1)* %Arg_3.428.6, align 4, !invariant.load !39
  %subtract.3030.6 = fsub float %Arg_2.327.6, %Arg_3.429.6
  %Arg_0.131.6 = getelementptr inbounds [32 x float], [32 x float] addrspace(1)* %0, i64 0, i64 %66
  %Arg_0.132.6 = load float, float addrspace(1)* %Arg_0.131.6, align 4, !invariant.load !39
  %subtract.3233.6 = fsub float %subtract.3030.6, %Arg_0.132.6
  %72 = select i1 %compare.2825.6, float 0.000000e+00, float %subtract.3233.6
  %73 = fmul float %add.2624.6, %72
  %add.39.i74.6 = fsub float %add.39.i74.5, %73
  %x_loc15.7 = or i32 %2, 224
  %.lhs.trunc.7 = trunc i32 %x_loc15.7 to i16
  %.lhs.trunc.7.frozen = freeze i16 %.lhs.trunc.7
  %74 = udiv i16 %.lhs.trunc.7.frozen, 10
  %75 = mul i16 %74, 10
  %.decomposed96 = sub i16 %.lhs.trunc.7.frozen, %75
  %76 = zext i16 %74 to i64
  %Arg_1.216.7 = getelementptr inbounds i8, i8 addrspace(1)* %alloc299, i64 %76
  %Arg_1.217.7 = load i8, i8 addrspace(1)* %Arg_1.216.7, align 1, !invariant.load !39
  %77 = zext i8 %Arg_1.217.7 to i16
  %78 = icmp eq i16 %.decomposed96, %77
  %79 = select i1 %78, float 1.000000e+00, float 0.000000e+00
  %80 = icmp ult i8 %Arg_1.217.7, 10
  %81 = select i1 %80, float 0.000000e+00, float 0x7FF8000000000000
  %add.2624.7 = fadd float %81, %79
  %compare.2825.7 = fcmp oeq float %add.2624.7, 0.000000e+00
  %Arg_2.326.7124 = getelementptr inbounds float, float addrspace(1)* %Arg_2.326, i64 224
  %Arg_2.327.7 = load float, float addrspace(1)* %Arg_2.326.7124, align 4, !invariant.load !39
  %Arg_3.428.7 = getelementptr inbounds [32 x float], [32 x float] addrspace(1)* %1, i64 0, i64 %76
  %Arg_3.429.7 = load float, float addrspace(1)* %Arg_3.428.7, align 4, !invariant.load !39
  %subtract.3030.7 = fsub float %Arg_2.327.7, %Arg_3.429.7
  %Arg_0.131.7 = getelementptr inbounds [32 x float], [32 x float] addrspace(1)* %0, i64 0, i64 %76
  %Arg_0.132.7 = load float, float addrspace(1)* %Arg_0.131.7, align 4, !invariant.load !39
  %subtract.3233.7 = fsub float %subtract.3030.7, %Arg_0.132.7
  %82 = select i1 %compare.2825.7, float 0.000000e+00, float %subtract.3233.7
  %83 = fmul float %add.2624.7, %82
  %add.39.i74.7 = fsub float %add.39.i74.6, %83
  %x_loc15.8 = or i32 %2, 256
  %.lhs.trunc.8 = trunc i32 %x_loc15.8 to i16
  %.lhs.trunc.8.frozen = freeze i16 %.lhs.trunc.8
  %84 = udiv i16 %.lhs.trunc.8.frozen, 10
  %85 = mul i16 %84, 10
  %.decomposed97 = sub i16 %.lhs.trunc.8.frozen, %85
  %86 = zext i16 %84 to i64
  %Arg_1.216.8 = getelementptr inbounds i8, i8 addrspace(1)* %alloc299, i64 %86
  %Arg_1.217.8 = load i8, i8 addrspace(1)* %Arg_1.216.8, align 1, !invariant.load !39
  %87 = zext i8 %Arg_1.217.8 to i16
  %88 = icmp eq i16 %.decomposed97, %87
  %89 = select i1 %88, float 1.000000e+00, float 0.000000e+00
  %90 = icmp ult i8 %Arg_1.217.8, 10
  %91 = select i1 %90, float 0.000000e+00, float 0x7FF8000000000000
  %add.2624.8 = fadd float %91, %89
  %compare.2825.8 = fcmp oeq float %add.2624.8, 0.000000e+00
  %Arg_2.326.8126 = getelementptr inbounds float, float addrspace(1)* %Arg_2.326, i64 256
  %Arg_2.327.8 = load float, float addrspace(1)* %Arg_2.326.8126, align 4, !invariant.load !39
  %Arg_3.428.8 = getelementptr inbounds [32 x float], [32 x float] addrspace(1)* %1, i64 0, i64 %86
  %Arg_3.429.8 = load float, float addrspace(1)* %Arg_3.428.8, align 4, !invariant.load !39
  %subtract.3030.8 = fsub float %Arg_2.327.8, %Arg_3.429.8
  %Arg_0.131.8 = getelementptr inbounds [32 x float], [32 x float] addrspace(1)* %0, i64 0, i64 %86
  %Arg_0.132.8 = load float, float addrspace(1)* %Arg_0.131.8, align 4, !invariant.load !39
  %subtract.3233.8 = fsub float %subtract.3030.8, %Arg_0.132.8
  %92 = select i1 %compare.2825.8, float 0.000000e+00, float %subtract.3233.8
  %93 = fmul float %add.2624.8, %92
  %add.39.i74.8 = fsub float %add.39.i74.7, %93
  %x_loc15.9 = or i32 %2, 288
  %.lhs.trunc.9 = trunc i32 %x_loc15.9 to i16
  %.lhs.trunc.9.frozen = freeze i16 %.lhs.trunc.9
  %94 = udiv i16 %.lhs.trunc.9.frozen, 10
  %95 = mul i16 %94, 10
  %.decomposed98 = sub i16 %.lhs.trunc.9.frozen, %95
  %96 = zext i16 %94 to i64
  %Arg_1.216.9 = getelementptr inbounds i8, i8 addrspace(1)* %alloc299, i64 %96
  %Arg_1.217.9 = load i8, i8 addrspace(1)* %Arg_1.216.9, align 1, !invariant.load !39
  %97 = zext i8 %Arg_1.217.9 to i16
  %98 = icmp eq i16 %.decomposed98, %97
  %99 = select i1 %98, float 1.000000e+00, float 0.000000e+00
  %100 = icmp ult i8 %Arg_1.217.9, 10
  %101 = select i1 %100, float 0.000000e+00, float 0x7FF8000000000000
  %add.2624.9 = fadd float %101, %99
  %compare.2825.9 = fcmp oeq float %add.2624.9, 0.000000e+00
  %Arg_2.326.9128 = getelementptr inbounds float, float addrspace(1)* %Arg_2.326, i64 288
  %Arg_2.327.9 = load float, float addrspace(1)* %Arg_2.326.9128, align 4, !invariant.load !39
  %Arg_3.428.9 = getelementptr inbounds [32 x float], [32 x float] addrspace(1)* %1, i64 0, i64 %96
  %Arg_3.429.9 = load float, float addrspace(1)* %Arg_3.428.9, align 4, !invariant.load !39
  %subtract.3030.9 = fsub float %Arg_2.327.9, %Arg_3.429.9
  %Arg_0.131.9 = getelementptr inbounds [32 x float], [32 x float] addrspace(1)* %0, i64 0, i64 %96
  %Arg_0.132.9 = load float, float addrspace(1)* %Arg_0.131.9, align 4, !invariant.load !39
  %subtract.3233.9 = fsub float %subtract.3030.9, %Arg_0.132.9
  %102 = select i1 %compare.2825.9, float 0.000000e+00, float %subtract.3233.9
  %103 = fmul float %add.2624.9, %102
  %add.39.i74.9 = fsub float %add.39.i74.8, %103
  %104 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.39.i74.9, i32 16, i32 31)
  %add.39.i = fadd float %add.39.i74.9, %104
  %105 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.39.i, i32 8, i32 31)
  %add.39.i83 = fadd float %add.39.i, %105
  %106 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.39.i83, i32 4, i32 31)
  %add.39.i82 = fadd float %add.39.i83, %106
  %107 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.39.i82, i32 2, i32 31)
  %add.39.i81 = fadd float %add.39.i82, %107
  %108 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.39.i81, i32 1, i32 31)
  %109 = icmp eq i32 %2, 0
  %add.39.i80 = fadd float %add.39.i81, %108
  br i1 %109, label %intra_warp_reduce_write-true, label %intra_warp_reduce_write-after

common.ret:                                       ; preds = %intra_warp_reduce_write-after, %reduction_write_output-true
  ret void

intra_warp_reduce_write-after:                    ; preds = %intra_warp_reduce_write-true, %entry
  %110 = trunc i64 %11 to i32
  %111 = icmp eq i32 %110, 0
  tail call void @llvm.nvvm.barrier0()
  %112 = getelementptr inbounds [1 x [1 x [1 x float]]], [1 x [1 x [1 x float]]] addrspace(3)* @shared_cache1, i64 0, i64 0, i64 0, i64 %11
  %113 = addrspacecast float addrspace(3)* %112 to float*
  store float 0.000000e+00, float* %initial_value_addr, align 4
  %114 = select i1 %111, float* %113, float* %initial_value_addr
  %partial_reduction_result51 = load float, float* %114, align 4
  %115 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result51, i32 16, i32 31)
  %add.39.i79 = fadd float %partial_reduction_result51, %115
  %116 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.39.i79, i32 8, i32 31)
  %add.39.i78 = fadd float %add.39.i79, %116
  %117 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.39.i78, i32 4, i32 31)
  %add.39.i77 = fadd float %add.39.i78, %117
  %118 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.39.i77, i32 2, i32 31)
  %add.39.i76 = fadd float %add.39.i77, %118
  %119 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.39.i76, i32 1, i32 31)
  %add.39.i75 = fadd float %add.39.i76, %119
  store float %add.39.i75, float* %114, align 4
  br i1 %111, label %reduction_write_output-true, label %common.ret

intra_warp_reduce_write-true:                     ; preds = %entry
  store float %add.39.i80, float addrspace(3)* getelementptr inbounds ([1 x [1 x [1 x float]]], [1 x [1 x [1 x float]]] addrspace(3)* @shared_cache1, i64 0, i64 0, i64 0, i64 0), align 4
  br label %intra_warp_reduce_write-after

reduction_write_output-true:                      ; preds = %intra_warp_reduce_write-after
  %120 = bitcast i8 addrspace(1)* %alloc34107 to float addrspace(1)*
  store float %add.39.i75, float addrspace(1)* %120, align 128
  br label %common.ret
}

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
define void @fusion_15(i8* noalias nocapture readonly align 16 dereferenceable(32) %alloc2, i8* noalias nocapture writeonly align 128 dereferenceable(401408) %alloc21, i8* noalias nocapture readonly align 128 dereferenceable(5120) %alloc26, i8* noalias nocapture readonly align 128 dereferenceable(512) %alloc27, i8* noalias nocapture readonly align 128 dereferenceable(512) %alloc29, i8* noalias nocapture readnone align 128 dereferenceable(5272) %temp_buf) local_unnamed_addr #2 {
entry:
  %alloc2950 = addrspacecast i8* %alloc29 to i8 addrspace(1)*
  %alloc2748 = addrspacecast i8* %alloc27 to i8 addrspace(1)*
  %alloc2646 = addrspacecast i8* %alloc26 to i8 addrspace(1)*
  %alloc2144 = addrspacecast i8* %alloc21 to i8 addrspace(1)*
  %alloc242 = addrspacecast i8* %alloc2 to i8 addrspace(1)*
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !41
  %linear_index_base = shl nuw nsw i32 %0, 2
  %linear_index3 = or i32 %linear_index_base, 3
  %linear_index3.frozen = freeze i32 %linear_index3
  %1 = udiv i32 %linear_index3.frozen, 10
  %2 = mul i32 %1, 10
  %.decomposed = sub i32 %linear_index3.frozen, %2
  %linear_index2 = or i32 %linear_index_base, 2
  %linear_index2.frozen = freeze i32 %linear_index2
  %3 = udiv i32 %linear_index2.frozen, 10
  %4 = mul i32 %3, 10
  %.decomposed40 = sub i32 %linear_index2.frozen, %4
  %linear_index1 = or i32 %linear_index_base, 1
  %.lhs.trunc = trunc i32 %linear_index_base to i16
  %.lhs.trunc.frozen = freeze i16 %.lhs.trunc
  %5 = udiv i16 %.lhs.trunc.frozen, 10
  %6 = urem i32 %linear_index1, 10
  %7 = mul i16 %5, 10
  %.decomposed41 = sub i16 %.lhs.trunc.frozen, %7
  %8 = bitcast i8 addrspace(1)* %alloc2950 to [32 x float] addrspace(1)*
  %9 = bitcast i8 addrspace(1)* %alloc2748 to [32 x float] addrspace(1)*
  %10 = bitcast i8 addrspace(1)* %alloc2646 to float addrspace(1)*
  %11 = zext i32 %linear_index_base to i64
  %12 = getelementptr float, float addrspace(1)* %10, i64 %11
  %13 = bitcast float addrspace(1)* %12 to <4 x float> addrspace(1)*
  %14 = load <4 x float>, <4 x float> addrspace(1)* %13, align 16, !invariant.load !39
  %15 = extractelement <4 x float> %14, i32 0
  %16 = extractelement <4 x float> %14, i32 1
  %17 = extractelement <4 x float> %14, i32 2
  %18 = extractelement <4 x float> %14, i32 3
  %19 = zext i16 %5 to i64
  %20 = getelementptr inbounds [32 x float], [32 x float] addrspace(1)* %8, i64 0, i64 %19
  %21 = load float, float addrspace(1)* %20, align 4, !invariant.load !39
  %subtract.8 = fsub float %15, %21
  %22 = tail call float @llvm.fma.f32(float %subtract.8, float 0x3F777313A0000000, float 5.000000e-01) #5
  %23 = tail call float @llvm.nvvm.saturate.f(float %22) #5
  %24 = tail call float @llvm.nvvm.fma.rm.f(float %23, float 2.520000e+02, float 0x4168000020000000) #5
  %25 = fadd float %24, 0xC168000FE0000000
  %26 = fneg float %25
  %27 = tail call float @llvm.fma.f32(float %subtract.8, float 0x3FF7154760000000, float %26) #5
  %28 = tail call float @llvm.fma.f32(float %subtract.8, float 0x3E54AE0C00000000, float %27) #5
  %29 = bitcast float %24 to i32
  %30 = shl i32 %29, 23
  %31 = bitcast i32 %30 to float
  %32 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %28) #5
  %33 = fmul float %32, %31
  %34 = getelementptr inbounds [32 x float], [32 x float] addrspace(1)* %9, i64 0, i64 %19
  %35 = load float, float addrspace(1)* %34, align 4, !invariant.load !39
  %divide.11 = fdiv float %33, %35
  %36 = getelementptr inbounds i8, i8 addrspace(1)* %alloc242, i64 %19
  %37 = load i8, i8 addrspace(1)* %36, align 1, !invariant.load !39
  %38 = zext i8 %37 to i32
  %39 = zext i8 %37 to i16
  %40 = icmp eq i16 %.decomposed41, %39
  %41 = select i1 %40, float 1.000000e+00, float 0.000000e+00
  %42 = icmp ult i8 %37, 10
  %43 = select i1 %42, float 0.000000e+00, float 0x7FF8000000000000
  %add.33 = fadd float %43, %41
  %subtract.34 = fsub float %divide.11, %add.33
  %multiply.35 = fmul float %subtract.34, 3.125000e-02
  %44 = bitcast i8 addrspace(1)* %alloc2144 to float addrspace(1)*
  %45 = getelementptr float, float addrspace(1)* %44, i64 %11
  %subtract.83 = fsub float %16, %21
  %46 = tail call float @llvm.fma.f32(float %subtract.83, float 0x3F777313A0000000, float 5.000000e-01) #5
  %47 = tail call float @llvm.nvvm.saturate.f(float %46) #5
  %48 = tail call float @llvm.nvvm.fma.rm.f(float %47, float 2.520000e+02, float 0x4168000020000000) #5
  %49 = fadd float %48, 0xC168000FE0000000
  %50 = fneg float %49
  %51 = tail call float @llvm.fma.f32(float %subtract.83, float 0x3FF7154760000000, float %50) #5
  %52 = tail call float @llvm.fma.f32(float %subtract.83, float 0x3E54AE0C00000000, float %51) #5
  %53 = bitcast float %48 to i32
  %54 = shl i32 %53, 23
  %55 = bitcast i32 %54 to float
  %56 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %52) #5
  %57 = fmul float %56, %55
  %divide.114 = fdiv float %57, %35
  %58 = icmp eq i32 %6, %38
  %59 = select i1 %58, float 1.000000e+00, float 0.000000e+00
  %add.3311 = fadd float %43, %59
  %subtract.3412 = fsub float %divide.114, %add.3311
  %multiply.3513 = fmul float %subtract.3412, 3.125000e-02
  %60 = zext i32 %3 to i64
  %61 = getelementptr inbounds [32 x float], [32 x float] addrspace(1)* %8, i64 0, i64 %60
  %62 = load float, float addrspace(1)* %61, align 4, !invariant.load !39
  %subtract.815 = fsub float %17, %62
  %63 = tail call float @llvm.fma.f32(float %subtract.815, float 0x3F777313A0000000, float 5.000000e-01) #5
  %64 = tail call float @llvm.nvvm.saturate.f(float %63) #5
  %65 = tail call float @llvm.nvvm.fma.rm.f(float %64, float 2.520000e+02, float 0x4168000020000000) #5
  %66 = fadd float %65, 0xC168000FE0000000
  %67 = fneg float %66
  %68 = tail call float @llvm.fma.f32(float %subtract.815, float 0x3FF7154760000000, float %67) #5
  %69 = tail call float @llvm.fma.f32(float %subtract.815, float 0x3E54AE0C00000000, float %68) #5
  %70 = bitcast float %65 to i32
  %71 = shl i32 %70, 23
  %72 = bitcast i32 %71 to float
  %73 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %69) #5
  %74 = fmul float %73, %72
  %75 = getelementptr inbounds [32 x float], [32 x float] addrspace(1)* %9, i64 0, i64 %60
  %76 = load float, float addrspace(1)* %75, align 4, !invariant.load !39
  %divide.1116 = fdiv float %74, %76
  %77 = getelementptr inbounds i8, i8 addrspace(1)* %alloc242, i64 %60
  %78 = load i8, i8 addrspace(1)* %77, align 1, !invariant.load !39
  %79 = zext i8 %78 to i32
  %80 = icmp eq i32 %.decomposed40, %79
  %81 = select i1 %80, float 1.000000e+00, float 0.000000e+00
  %82 = icmp ult i8 %78, 10
  %83 = select i1 %82, float 0.000000e+00, float 0x7FF8000000000000
  %add.3323 = fadd float %83, %81
  %subtract.3424 = fsub float %divide.1116, %add.3323
  %multiply.3525 = fmul float %subtract.3424, 3.125000e-02
  %84 = zext i32 %1 to i64
  %85 = getelementptr inbounds [32 x float], [32 x float] addrspace(1)* %8, i64 0, i64 %84
  %86 = load float, float addrspace(1)* %85, align 4, !invariant.load !39
  %subtract.827 = fsub float %18, %86
  %87 = tail call float @llvm.fma.f32(float %subtract.827, float 0x3F777313A0000000, float 5.000000e-01) #5
  %88 = tail call float @llvm.nvvm.saturate.f(float %87) #5
  %89 = tail call float @llvm.nvvm.fma.rm.f(float %88, float 2.520000e+02, float 0x4168000020000000) #5
  %90 = fadd float %89, 0xC168000FE0000000
  %91 = fneg float %90
  %92 = tail call float @llvm.fma.f32(float %subtract.827, float 0x3FF7154760000000, float %91) #5
  %93 = tail call float @llvm.fma.f32(float %subtract.827, float 0x3E54AE0C00000000, float %92) #5
  %94 = bitcast float %89 to i32
  %95 = shl i32 %94, 23
  %96 = bitcast i32 %95 to float
  %97 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %93) #5
  %98 = fmul float %97, %96
  %99 = getelementptr inbounds [32 x float], [32 x float] addrspace(1)* %9, i64 0, i64 %84
  %100 = load float, float addrspace(1)* %99, align 4, !invariant.load !39
  %divide.1128 = fdiv float %98, %100
  %101 = getelementptr inbounds i8, i8 addrspace(1)* %alloc242, i64 %84
  %102 = load i8, i8 addrspace(1)* %101, align 1, !invariant.load !39
  %103 = zext i8 %102 to i32
  %104 = icmp eq i32 %.decomposed, %103
  %105 = select i1 %104, float 1.000000e+00, float 0.000000e+00
  %106 = icmp ult i8 %102, 10
  %107 = select i1 %106, float 0.000000e+00, float 0x7FF8000000000000
  %add.3335 = fadd float %107, %105
  %subtract.3436 = fsub float %divide.1128, %add.3335
  %multiply.3537 = fmul float %subtract.3436, 3.125000e-02
  %108 = insertelement <4 x float> poison, float %multiply.35, i32 0
  %109 = insertelement <4 x float> %108, float %multiply.3513, i32 1
  %110 = insertelement <4 x float> %109, float %multiply.3525, i32 2
  %111 = insertelement <4 x float> %110, float %multiply.3537, i32 3
  %112 = bitcast float addrspace(1)* %45 to <4 x float> addrspace(1)*
  store <4 x float> %111, <4 x float> addrspace(1)* %112, align 16
  ret void
}

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
define void @fusion_25(i8* noalias nocapture readonly align 16 dereferenceable(4) %alloc15, i8* noalias nocapture readonly align 16 dereferenceable(4) %alloc16, i8* noalias nocapture align 128 dereferenceable(4) %alloc34, i8* noalias nocapture align 128 dereferenceable(4) %alloc35, i8* noalias nocapture readnone align 128 dereferenceable(5272) %temp_buf) local_unnamed_addr #2 {
entry:
  %alloc3515 = addrspacecast i8* %alloc35 to i8 addrspace(1)*
  %alloc3413 = addrspacecast i8* %alloc34 to i8 addrspace(1)*
  %alloc1611 = addrspacecast i8* %alloc16 to i8 addrspace(1)*
  %alloc159 = addrspacecast i8* %alloc15 to i8 addrspace(1)*
  %0 = bitcast i8 addrspace(1)* %alloc3413 to float addrspace(1)*
  %1 = bitcast i8 addrspace(1)* %alloc3515 to float addrspace(1)*
  %2 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !47
  %.not = icmp eq i32 %2, 1
  %alloc16.alloc15 = select i1 %.not, i8 addrspace(1)* %alloc1611, i8 addrspace(1)* %alloc159
  %3 = bitcast i8 addrspace(1)* %alloc16.alloc15 to float addrspace(1)*
  %4 = load float, float addrspace(1)* %3, align 16, !invariant.load !39
  %.val = load float, float addrspace(1)* %1, align 128
  %.val8 = load float, float addrspace(1)* %0, align 128
  %5 = select i1 %.not, float %.val, float %.val8
  %add.7 = fadd float %4, %5
  %.sink = select i1 %.not, float addrspace(1)* %1, float addrspace(1)* %0
  store float %add.7, float addrspace(1)* %.sink, align 128
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind
define void @reduce_156(i8* noalias nocapture readonly align 128 dereferenceable(401408) %alloc21, i8* noalias nocapture writeonly align 128 dereferenceable(40) %alloc32, i8* noalias nocapture readnone align 128 dereferenceable(5272) %temp_buf) local_unnamed_addr #8 {
entry:
  %alloc3221 = addrspacecast i8* %alloc32 to i8 addrspace(1)*
  %alloc2119 = addrspacecast i8* %alloc21 to i8 addrspace(1)*
  %0 = bitcast i8 addrspace(1)* %alloc2119 to [32 x [10 x float]] addrspace(1)*
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !48
  %linear_index_base = shl nuw nsw i32 %1, 1
  %2 = zext i32 %linear_index_base to i64
  %3 = getelementptr inbounds [32 x [10 x float]], [32 x [10 x float]] addrspace(1)* %0, i64 0, i64 0, i64 %2
  %4 = bitcast float addrspace(1)* %3 to <2 x float> addrspace(1)*
  %5 = load <2 x float>, <2 x float> addrspace(1)* %4, align 8, !invariant.load !39
  %6 = extractelement <2 x float> %5, i32 0
  %7 = extractelement <2 x float> %5, i32 1
  %8 = getelementptr inbounds float, float addrspace(1)* %3, i64 10
  %9 = bitcast float addrspace(1)* %8 to <2 x float> addrspace(1)*
  %10 = load <2 x float>, <2 x float> addrspace(1)* %9, align 8, !invariant.load !39
  %11 = extractelement <2 x float> %10, i32 0
  %12 = extractelement <2 x float> %10, i32 1
  %add.6.i.1 = fadd float %6, %11
  %13 = getelementptr inbounds float, float addrspace(1)* %3, i64 20
  %14 = bitcast float addrspace(1)* %13 to <2 x float> addrspace(1)*
  %15 = load <2 x float>, <2 x float> addrspace(1)* %14, align 8, !invariant.load !39
  %16 = extractelement <2 x float> %15, i32 0
  %17 = extractelement <2 x float> %15, i32 1
  %add.6.i.2 = fadd float %add.6.i.1, %16
  %18 = getelementptr inbounds float, float addrspace(1)* %3, i64 30
  %19 = bitcast float addrspace(1)* %18 to <2 x float> addrspace(1)*
  %20 = load <2 x float>, <2 x float> addrspace(1)* %19, align 8, !invariant.load !39
  %21 = extractelement <2 x float> %20, i32 0
  %22 = extractelement <2 x float> %20, i32 1
  %add.6.i.3 = fadd float %add.6.i.2, %21
  %23 = getelementptr inbounds float, float addrspace(1)* %3, i64 40
  %24 = bitcast float addrspace(1)* %23 to <2 x float> addrspace(1)*
  %25 = load <2 x float>, <2 x float> addrspace(1)* %24, align 8, !invariant.load !39
  %26 = extractelement <2 x float> %25, i32 0
  %27 = extractelement <2 x float> %25, i32 1
  %add.6.i.4 = fadd float %add.6.i.3, %26
  %28 = getelementptr inbounds float, float addrspace(1)* %3, i64 50
  %29 = bitcast float addrspace(1)* %28 to <2 x float> addrspace(1)*
  %30 = load <2 x float>, <2 x float> addrspace(1)* %29, align 8, !invariant.load !39
  %31 = extractelement <2 x float> %30, i32 0
  %32 = extractelement <2 x float> %30, i32 1
  %add.6.i.5 = fadd float %add.6.i.4, %31
  %33 = getelementptr inbounds float, float addrspace(1)* %3, i64 60
  %34 = bitcast float addrspace(1)* %33 to <2 x float> addrspace(1)*
  %35 = load <2 x float>, <2 x float> addrspace(1)* %34, align 8, !invariant.load !39
  %36 = extractelement <2 x float> %35, i32 0
  %37 = extractelement <2 x float> %35, i32 1
  %add.6.i.6 = fadd float %add.6.i.5, %36
  %38 = getelementptr inbounds float, float addrspace(1)* %3, i64 70
  %39 = bitcast float addrspace(1)* %38 to <2 x float> addrspace(1)*
  %40 = load <2 x float>, <2 x float> addrspace(1)* %39, align 8, !invariant.load !39
  %41 = extractelement <2 x float> %40, i32 0
  %42 = extractelement <2 x float> %40, i32 1
  %add.6.i.7 = fadd float %add.6.i.6, %41
  %43 = getelementptr inbounds float, float addrspace(1)* %3, i64 80
  %44 = bitcast float addrspace(1)* %43 to <2 x float> addrspace(1)*
  %45 = load <2 x float>, <2 x float> addrspace(1)* %44, align 8, !invariant.load !39
  %46 = extractelement <2 x float> %45, i32 0
  %47 = extractelement <2 x float> %45, i32 1
  %add.6.i.8 = fadd float %add.6.i.7, %46
  %48 = getelementptr inbounds float, float addrspace(1)* %3, i64 90
  %49 = bitcast float addrspace(1)* %48 to <2 x float> addrspace(1)*
  %50 = load <2 x float>, <2 x float> addrspace(1)* %49, align 8, !invariant.load !39
  %51 = extractelement <2 x float> %50, i32 0
  %52 = extractelement <2 x float> %50, i32 1
  %add.6.i.9 = fadd float %add.6.i.8, %51
  %53 = getelementptr inbounds float, float addrspace(1)* %3, i64 100
  %54 = bitcast float addrspace(1)* %53 to <2 x float> addrspace(1)*
  %55 = load <2 x float>, <2 x float> addrspace(1)* %54, align 8, !invariant.load !39
  %56 = extractelement <2 x float> %55, i32 0
  %57 = extractelement <2 x float> %55, i32 1
  %add.6.i.10 = fadd float %add.6.i.9, %56
  %58 = getelementptr inbounds float, float addrspace(1)* %3, i64 110
  %59 = bitcast float addrspace(1)* %58 to <2 x float> addrspace(1)*
  %60 = load <2 x float>, <2 x float> addrspace(1)* %59, align 8, !invariant.load !39
  %61 = extractelement <2 x float> %60, i32 0
  %62 = extractelement <2 x float> %60, i32 1
  %add.6.i.11 = fadd float %add.6.i.10, %61
  %63 = getelementptr inbounds float, float addrspace(1)* %3, i64 120
  %64 = bitcast float addrspace(1)* %63 to <2 x float> addrspace(1)*
  %65 = load <2 x float>, <2 x float> addrspace(1)* %64, align 8, !invariant.load !39
  %66 = extractelement <2 x float> %65, i32 0
  %67 = extractelement <2 x float> %65, i32 1
  %add.6.i.12 = fadd float %add.6.i.11, %66
  %68 = getelementptr inbounds float, float addrspace(1)* %3, i64 130
  %69 = bitcast float addrspace(1)* %68 to <2 x float> addrspace(1)*
  %70 = load <2 x float>, <2 x float> addrspace(1)* %69, align 8, !invariant.load !39
  %71 = extractelement <2 x float> %70, i32 0
  %72 = extractelement <2 x float> %70, i32 1
  %add.6.i.13 = fadd float %add.6.i.12, %71
  %73 = getelementptr inbounds float, float addrspace(1)* %3, i64 140
  %74 = bitcast float addrspace(1)* %73 to <2 x float> addrspace(1)*
  %75 = load <2 x float>, <2 x float> addrspace(1)* %74, align 8, !invariant.load !39
  %76 = extractelement <2 x float> %75, i32 0
  %77 = extractelement <2 x float> %75, i32 1
  %add.6.i.14 = fadd float %add.6.i.13, %76
  %78 = getelementptr inbounds float, float addrspace(1)* %3, i64 150
  %79 = bitcast float addrspace(1)* %78 to <2 x float> addrspace(1)*
  %80 = load <2 x float>, <2 x float> addrspace(1)* %79, align 8, !invariant.load !39
  %81 = extractelement <2 x float> %80, i32 0
  %82 = extractelement <2 x float> %80, i32 1
  %add.6.i.15 = fadd float %add.6.i.14, %81
  %83 = getelementptr inbounds float, float addrspace(1)* %3, i64 160
  %84 = bitcast float addrspace(1)* %83 to <2 x float> addrspace(1)*
  %85 = load <2 x float>, <2 x float> addrspace(1)* %84, align 8, !invariant.load !39
  %86 = extractelement <2 x float> %85, i32 0
  %87 = extractelement <2 x float> %85, i32 1
  %add.6.i.16 = fadd float %add.6.i.15, %86
  %88 = getelementptr inbounds float, float addrspace(1)* %3, i64 170
  %89 = bitcast float addrspace(1)* %88 to <2 x float> addrspace(1)*
  %90 = load <2 x float>, <2 x float> addrspace(1)* %89, align 8, !invariant.load !39
  %91 = extractelement <2 x float> %90, i32 0
  %92 = extractelement <2 x float> %90, i32 1
  %add.6.i.17 = fadd float %add.6.i.16, %91
  %93 = getelementptr inbounds float, float addrspace(1)* %3, i64 180
  %94 = bitcast float addrspace(1)* %93 to <2 x float> addrspace(1)*
  %95 = load <2 x float>, <2 x float> addrspace(1)* %94, align 8, !invariant.load !39
  %96 = extractelement <2 x float> %95, i32 0
  %97 = extractelement <2 x float> %95, i32 1
  %add.6.i.18 = fadd float %add.6.i.17, %96
  %98 = getelementptr inbounds float, float addrspace(1)* %3, i64 190
  %99 = bitcast float addrspace(1)* %98 to <2 x float> addrspace(1)*
  %100 = load <2 x float>, <2 x float> addrspace(1)* %99, align 8, !invariant.load !39
  %101 = extractelement <2 x float> %100, i32 0
  %102 = extractelement <2 x float> %100, i32 1
  %add.6.i.19 = fadd float %add.6.i.18, %101
  %103 = getelementptr inbounds float, float addrspace(1)* %3, i64 200
  %104 = bitcast float addrspace(1)* %103 to <2 x float> addrspace(1)*
  %105 = load <2 x float>, <2 x float> addrspace(1)* %104, align 8, !invariant.load !39
  %106 = extractelement <2 x float> %105, i32 0
  %107 = extractelement <2 x float> %105, i32 1
  %add.6.i.20 = fadd float %add.6.i.19, %106
  %108 = getelementptr inbounds float, float addrspace(1)* %3, i64 210
  %109 = bitcast float addrspace(1)* %108 to <2 x float> addrspace(1)*
  %110 = load <2 x float>, <2 x float> addrspace(1)* %109, align 8, !invariant.load !39
  %111 = extractelement <2 x float> %110, i32 0
  %112 = extractelement <2 x float> %110, i32 1
  %add.6.i.21 = fadd float %add.6.i.20, %111
  %113 = getelementptr inbounds float, float addrspace(1)* %3, i64 220
  %114 = bitcast float addrspace(1)* %113 to <2 x float> addrspace(1)*
  %115 = load <2 x float>, <2 x float> addrspace(1)* %114, align 8, !invariant.load !39
  %116 = extractelement <2 x float> %115, i32 0
  %117 = extractelement <2 x float> %115, i32 1
  %add.6.i.22 = fadd float %add.6.i.21, %116
  %118 = getelementptr inbounds float, float addrspace(1)* %3, i64 230
  %119 = bitcast float addrspace(1)* %118 to <2 x float> addrspace(1)*
  %120 = load <2 x float>, <2 x float> addrspace(1)* %119, align 8, !invariant.load !39
  %121 = extractelement <2 x float> %120, i32 0
  %122 = extractelement <2 x float> %120, i32 1
  %add.6.i.23 = fadd float %add.6.i.22, %121
  %123 = getelementptr inbounds float, float addrspace(1)* %3, i64 240
  %124 = bitcast float addrspace(1)* %123 to <2 x float> addrspace(1)*
  %125 = load <2 x float>, <2 x float> addrspace(1)* %124, align 8, !invariant.load !39
  %126 = extractelement <2 x float> %125, i32 0
  %127 = extractelement <2 x float> %125, i32 1
  %add.6.i.24 = fadd float %add.6.i.23, %126
  %128 = getelementptr inbounds float, float addrspace(1)* %3, i64 250
  %129 = bitcast float addrspace(1)* %128 to <2 x float> addrspace(1)*
  %130 = load <2 x float>, <2 x float> addrspace(1)* %129, align 8, !invariant.load !39
  %131 = extractelement <2 x float> %130, i32 0
  %132 = extractelement <2 x float> %130, i32 1
  %add.6.i.25 = fadd float %add.6.i.24, %131
  %133 = getelementptr inbounds float, float addrspace(1)* %3, i64 260
  %134 = bitcast float addrspace(1)* %133 to <2 x float> addrspace(1)*
  %135 = load <2 x float>, <2 x float> addrspace(1)* %134, align 8, !invariant.load !39
  %136 = extractelement <2 x float> %135, i32 0
  %137 = extractelement <2 x float> %135, i32 1
  %add.6.i.26 = fadd float %add.6.i.25, %136
  %138 = getelementptr inbounds float, float addrspace(1)* %3, i64 270
  %139 = bitcast float addrspace(1)* %138 to <2 x float> addrspace(1)*
  %140 = load <2 x float>, <2 x float> addrspace(1)* %139, align 8, !invariant.load !39
  %141 = extractelement <2 x float> %140, i32 0
  %142 = extractelement <2 x float> %140, i32 1
  %add.6.i.27 = fadd float %add.6.i.26, %141
  %143 = getelementptr inbounds float, float addrspace(1)* %3, i64 280
  %144 = bitcast float addrspace(1)* %143 to <2 x float> addrspace(1)*
  %145 = load <2 x float>, <2 x float> addrspace(1)* %144, align 8, !invariant.load !39
  %146 = extractelement <2 x float> %145, i32 0
  %147 = extractelement <2 x float> %145, i32 1
  %add.6.i.28 = fadd float %add.6.i.27, %146
  %148 = getelementptr inbounds float, float addrspace(1)* %3, i64 290
  %149 = bitcast float addrspace(1)* %148 to <2 x float> addrspace(1)*
  %150 = load <2 x float>, <2 x float> addrspace(1)* %149, align 8, !invariant.load !39
  %151 = extractelement <2 x float> %150, i32 0
  %152 = extractelement <2 x float> %150, i32 1
  %add.6.i.29 = fadd float %add.6.i.28, %151
  %153 = getelementptr inbounds float, float addrspace(1)* %3, i64 300
  %154 = bitcast float addrspace(1)* %153 to <2 x float> addrspace(1)*
  %155 = load <2 x float>, <2 x float> addrspace(1)* %154, align 8, !invariant.load !39
  %156 = extractelement <2 x float> %155, i32 0
  %157 = extractelement <2 x float> %155, i32 1
  %add.6.i.30 = fadd float %add.6.i.29, %156
  %158 = getelementptr inbounds float, float addrspace(1)* %3, i64 310
  %159 = bitcast float addrspace(1)* %158 to <2 x float> addrspace(1)*
  %160 = load <2 x float>, <2 x float> addrspace(1)* %159, align 8, !invariant.load !39
  %161 = extractelement <2 x float> %160, i32 0
  %162 = extractelement <2 x float> %160, i32 1
  %add.6.i.31 = fadd float %add.6.i.30, %161
  %163 = bitcast i8 addrspace(1)* %alloc3221 to float addrspace(1)*
  %164 = getelementptr float, float addrspace(1)* %163, i64 %2
  %add.6.i14.1 = fadd float %7, %12
  %add.6.i14.2 = fadd float %add.6.i14.1, %17
  %add.6.i14.3 = fadd float %add.6.i14.2, %22
  %add.6.i14.4 = fadd float %add.6.i14.3, %27
  %add.6.i14.5 = fadd float %add.6.i14.4, %32
  %add.6.i14.6 = fadd float %add.6.i14.5, %37
  %add.6.i14.7 = fadd float %add.6.i14.6, %42
  %add.6.i14.8 = fadd float %add.6.i14.7, %47
  %add.6.i14.9 = fadd float %add.6.i14.8, %52
  %add.6.i14.10 = fadd float %add.6.i14.9, %57
  %add.6.i14.11 = fadd float %add.6.i14.10, %62
  %add.6.i14.12 = fadd float %add.6.i14.11, %67
  %add.6.i14.13 = fadd float %add.6.i14.12, %72
  %add.6.i14.14 = fadd float %add.6.i14.13, %77
  %add.6.i14.15 = fadd float %add.6.i14.14, %82
  %add.6.i14.16 = fadd float %add.6.i14.15, %87
  %add.6.i14.17 = fadd float %add.6.i14.16, %92
  %add.6.i14.18 = fadd float %add.6.i14.17, %97
  %add.6.i14.19 = fadd float %add.6.i14.18, %102
  %add.6.i14.20 = fadd float %add.6.i14.19, %107
  %add.6.i14.21 = fadd float %add.6.i14.20, %112
  %add.6.i14.22 = fadd float %add.6.i14.21, %117
  %add.6.i14.23 = fadd float %add.6.i14.22, %122
  %add.6.i14.24 = fadd float %add.6.i14.23, %127
  %add.6.i14.25 = fadd float %add.6.i14.24, %132
  %add.6.i14.26 = fadd float %add.6.i14.25, %137
  %add.6.i14.27 = fadd float %add.6.i14.26, %142
  %add.6.i14.28 = fadd float %add.6.i14.27, %147
  %add.6.i14.29 = fadd float %add.6.i14.28, %152
  %add.6.i14.30 = fadd float %add.6.i14.29, %157
  %add.6.i14.31 = fadd float %add.6.i14.30, %162
  %165 = insertelement <2 x float> poison, float %add.6.i.31, i32 0
  %166 = insertelement <2 x float> %165, float %add.6.i14.31, i32 1
  %167 = bitcast float addrspace(1)* %164 to <2 x float> addrspace(1)*
  store <2 x float> %166, <2 x float> addrspace(1)* %167, align 8
  ret void
}

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
define void @fusion_4(i8* noalias nocapture readonly align 16 dereferenceable(4) %alloc5, i8* noalias nocapture readonly align 16 dereferenceable(4) %alloc6, i8* noalias nocapture readonly align 16 dereferenceable(40) %alloc9, i8* noalias nocapture readonly align 16 dereferenceable(40) %alloc11, i8* noalias nocapture readonly align 16 dereferenceable(40) %alloc12, i8* noalias nocapture writeonly align 128 dereferenceable(40) %alloc30, i8* noalias nocapture writeonly align 128 dereferenceable(40) %alloc31, i8* noalias nocapture align 128 dereferenceable(40) %alloc32, i8* noalias nocapture readonly align 128 dereferenceable(5272) %temp_buf) local_unnamed_addr #2 {
entry:
  %temp_buf30 = addrspacecast i8* %temp_buf to i8 addrspace(1)*
  %alloc3228 = addrspacecast i8* %alloc32 to i8 addrspace(1)*
  %alloc3126 = addrspacecast i8* %alloc31 to i8 addrspace(1)*
  %alloc3024 = addrspacecast i8* %alloc30 to i8 addrspace(1)*
  %alloc1222 = addrspacecast i8* %alloc12 to i8 addrspace(1)*
  %alloc1120 = addrspacecast i8* %alloc11 to i8 addrspace(1)*
  %alloc918 = addrspacecast i8* %alloc9 to i8 addrspace(1)*
  %alloc616 = addrspacecast i8* %alloc6 to i8 addrspace(1)*
  %alloc514 = addrspacecast i8* %alloc5 to i8 addrspace(1)*
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !48
  %linear_index_base = shl nuw nsw i32 %0, 1
  %1 = bitcast i8 addrspace(1)* %alloc616 to float addrspace(1)*
  %2 = bitcast i8 addrspace(1)* %alloc514 to float addrspace(1)*
  %3 = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf30, i64 4096
  %4 = bitcast i8 addrspace(1)* %3 to float addrspace(1)*
  %5 = bitcast i8 addrspace(1)* %alloc918 to float addrspace(1)*
  %6 = zext i32 %linear_index_base to i64
  %7 = getelementptr float, float addrspace(1)* %5, i64 %6
  %8 = bitcast float addrspace(1)* %7 to <2 x float> addrspace(1)*
  %9 = load <2 x float>, <2 x float> addrspace(1)* %8, align 8, !invariant.load !39
  %10 = extractelement <2 x float> %9, i32 0
  %11 = extractelement <2 x float> %9, i32 1
  %12 = bitcast i8 addrspace(1)* %alloc1120 to float addrspace(1)*
  %13 = getelementptr float, float addrspace(1)* %12, i64 %6
  %14 = bitcast float addrspace(1)* %13 to <2 x float> addrspace(1)*
  %15 = load <2 x float>, <2 x float> addrspace(1)* %14, align 8, !invariant.load !39
  %16 = extractelement <2 x float> %15, i32 0
  %17 = extractelement <2 x float> %15, i32 1
  %18 = bitcast i8 addrspace(1)* %alloc3228 to float addrspace(1)*
  %19 = getelementptr float, float addrspace(1)* %18, i64 %6
  %20 = bitcast float addrspace(1)* %19 to <2 x float> addrspace(1)*
  %21 = load <2 x float>, <2 x float> addrspace(1)* %20, align 8
  %22 = extractelement <2 x float> %21, i32 0
  %23 = extractelement <2 x float> %21, i32 1
  %subtract.8 = fsub float %22, %16
  %24 = load float, float addrspace(1)* %2, align 16, !invariant.load !39
  %subtract.10 = fsub float 1.000000e+00, %24
  %multiply.12 = fmul float %subtract.8, %subtract.10
  %add.13 = fadd float %16, %multiply.12
  %25 = load float, float addrspace(1)* %4, align 128, !invariant.load !39
  %multiply.15 = fmul float %25, %add.13
  %26 = bitcast i8 addrspace(1)* %alloc1222 to float addrspace(1)*
  %27 = getelementptr float, float addrspace(1)* %26, i64 %6
  %28 = bitcast float addrspace(1)* %27 to <2 x float> addrspace(1)*
  %29 = load <2 x float>, <2 x float> addrspace(1)* %28, align 8, !invariant.load !39
  %30 = extractelement <2 x float> %29, i32 0
  %31 = extractelement <2 x float> %29, i32 1
  %multiply.16 = fmul float %22, %22
  %subtract.17 = fsub float %multiply.16, %30
  %32 = load float, float addrspace(1)* %1, align 16, !invariant.load !39
  %subtract.18 = fsub float 1.000000e+00, %32
  %multiply.20 = fmul float %subtract.17, %subtract.18
  %add.21 = fadd float %30, %multiply.20
  %33 = tail call float @llvm.nvvm.sqrt.approx.f(float %add.21) #5
  %add.25 = fadd float %33, 0x3E7AD7F2A0000000
  %divide.26 = fdiv float %multiply.15, %add.25
  %subtract.27 = fsub float %10, %divide.26
  %34 = bitcast i8 addrspace(1)* %alloc3024 to float addrspace(1)*
  %35 = getelementptr float, float addrspace(1)* %34, i64 %6
  %36 = bitcast i8 addrspace(1)* %alloc3126 to float addrspace(1)*
  %37 = getelementptr float, float addrspace(1)* %36, i64 %6
  %subtract.82 = fsub float %23, %17
  %multiply.123 = fmul float %subtract.10, %subtract.82
  %add.134 = fadd float %17, %multiply.123
  %multiply.155 = fmul float %25, %add.134
  %multiply.166 = fmul float %23, %23
  %subtract.177 = fsub float %multiply.166, %31
  %multiply.208 = fmul float %subtract.18, %subtract.177
  %add.219 = fadd float %31, %multiply.208
  %38 = tail call float @llvm.nvvm.sqrt.approx.f(float %add.219) #5
  %add.2511 = fadd float %38, 0x3E7AD7F2A0000000
  %divide.2612 = fdiv float %multiply.155, %add.2511
  %subtract.2713 = fsub float %11, %divide.2612
  %39 = insertelement <2 x float> poison, float %subtract.27, i32 0
  %40 = insertelement <2 x float> %39, float %subtract.2713, i32 1
  %41 = bitcast float addrspace(1)* %35 to <2 x float> addrspace(1)*
  store <2 x float> %40, <2 x float> addrspace(1)* %41, align 8
  %42 = insertelement <2 x float> poison, float %add.13, i32 0
  %43 = insertelement <2 x float> %42, float %add.134, i32 1
  %44 = bitcast float addrspace(1)* %37 to <2 x float> addrspace(1)*
  store <2 x float> %43, <2 x float> addrspace(1)* %44, align 8
  %45 = insertelement <2 x float> poison, float %add.21, i32 0
  %46 = insertelement <2 x float> %45, float %add.219, i32 1
  %47 = bitcast float addrspace(1)* %19 to <2 x float> addrspace(1)*
  store <2 x float> %46, <2 x float> addrspace(1)* %47, align 8
  ret void
}

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
define void @fusion_1(i8* noalias nocapture readonly align 16 dereferenceable(4) %alloc5, i8* noalias nocapture readonly align 16 dereferenceable(4) %alloc6, i8* noalias nocapture readonly align 16 dereferenceable(5120) %alloc10, i8* noalias nocapture readonly align 16 dereferenceable(5120) %alloc13, i8* noalias nocapture readonly align 16 dereferenceable(5120) %alloc14, i8* noalias nocapture writeonly align 128 dereferenceable(5120) %alloc24, i8* noalias nocapture writeonly align 128 dereferenceable(5120) %alloc25, i8* noalias nocapture align 128 dereferenceable(5120) %alloc26, i8* noalias nocapture readonly align 128 dereferenceable(5272) %temp_buf) local_unnamed_addr #2 {
entry:
  %temp_buf54 = addrspacecast i8* %temp_buf to i8 addrspace(1)*
  %alloc2652 = addrspacecast i8* %alloc26 to i8 addrspace(1)*
  %alloc2550 = addrspacecast i8* %alloc25 to i8 addrspace(1)*
  %alloc2448 = addrspacecast i8* %alloc24 to i8 addrspace(1)*
  %alloc1446 = addrspacecast i8* %alloc14 to i8 addrspace(1)*
  %alloc1344 = addrspacecast i8* %alloc13 to i8 addrspace(1)*
  %alloc1042 = addrspacecast i8* %alloc10 to i8 addrspace(1)*
  %alloc640 = addrspacecast i8* %alloc6 to i8 addrspace(1)*
  %alloc538 = addrspacecast i8* %alloc5 to i8 addrspace(1)*
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !47
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !45
  %2 = shl nuw nsw i32 %0, 10
  %3 = shl nuw nsw i32 %1, 2
  %linear_index_base = or i32 %2, %3
  %4 = icmp ult i32 %linear_index_base, 1280
  br i1 %4, label %fusion_1.in_bounds-true, label %fusion_1.in_bounds-after

fusion_1.in_bounds-after:                         ; preds = %fusion_1.in_bounds-true, %entry
  ret void

fusion_1.in_bounds-true:                          ; preds = %entry
  %5 = bitcast i8 addrspace(1)* %alloc640 to float addrspace(1)*
  %6 = bitcast i8 addrspace(1)* %alloc538 to float addrspace(1)*
  %7 = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf54, i64 4096
  %8 = bitcast i8 addrspace(1)* %7 to float addrspace(1)*
  %9 = bitcast i8 addrspace(1)* %alloc1042 to float addrspace(1)*
  %10 = zext i32 %linear_index_base to i64
  %11 = getelementptr float, float addrspace(1)* %9, i64 %10
  %12 = bitcast float addrspace(1)* %11 to <4 x float> addrspace(1)*
  %13 = load <4 x float>, <4 x float> addrspace(1)* %12, align 16, !invariant.load !39
  %14 = extractelement <4 x float> %13, i32 0
  %15 = extractelement <4 x float> %13, i32 1
  %16 = extractelement <4 x float> %13, i32 2
  %17 = extractelement <4 x float> %13, i32 3
  %18 = bitcast i8 addrspace(1)* %alloc1344 to float addrspace(1)*
  %19 = getelementptr float, float addrspace(1)* %18, i64 %10
  %20 = bitcast float addrspace(1)* %19 to <4 x float> addrspace(1)*
  %21 = load <4 x float>, <4 x float> addrspace(1)* %20, align 16, !invariant.load !39
  %22 = extractelement <4 x float> %21, i32 0
  %23 = extractelement <4 x float> %21, i32 1
  %24 = extractelement <4 x float> %21, i32 2
  %25 = extractelement <4 x float> %21, i32 3
  %26 = bitcast i8 addrspace(1)* %alloc2652 to float addrspace(1)*
  %27 = getelementptr float, float addrspace(1)* %26, i64 %10
  %28 = bitcast float addrspace(1)* %27 to <4 x float> addrspace(1)*
  %29 = load <4 x float>, <4 x float> addrspace(1)* %28, align 16
  %30 = extractelement <4 x float> %29, i32 0
  %31 = extractelement <4 x float> %29, i32 1
  %32 = extractelement <4 x float> %29, i32 2
  %33 = extractelement <4 x float> %29, i32 3
  %subtract.8 = fsub float %30, %22
  %34 = load float, float addrspace(1)* %6, align 16, !invariant.load !39
  %subtract.10 = fsub float 1.000000e+00, %34
  %multiply.12 = fmul float %subtract.8, %subtract.10
  %add.13 = fadd float %22, %multiply.12
  %35 = load float, float addrspace(1)* %8, align 128, !invariant.load !39
  %multiply.15 = fmul float %35, %add.13
  %36 = bitcast i8 addrspace(1)* %alloc1446 to float addrspace(1)*
  %37 = getelementptr float, float addrspace(1)* %36, i64 %10
  %38 = bitcast float addrspace(1)* %37 to <4 x float> addrspace(1)*
  %39 = load <4 x float>, <4 x float> addrspace(1)* %38, align 16, !invariant.load !39
  %40 = extractelement <4 x float> %39, i32 0
  %41 = extractelement <4 x float> %39, i32 1
  %42 = extractelement <4 x float> %39, i32 2
  %43 = extractelement <4 x float> %39, i32 3
  %multiply.16 = fmul float %30, %30
  %subtract.17 = fsub float %multiply.16, %40
  %44 = load float, float addrspace(1)* %5, align 16, !invariant.load !39
  %subtract.18 = fsub float 1.000000e+00, %44
  %multiply.20 = fmul float %subtract.17, %subtract.18
  %add.21 = fadd float %40, %multiply.20
  %45 = tail call float @llvm.nvvm.sqrt.approx.f(float %add.21) #5
  %add.25 = fadd float %45, 0x3E7AD7F2A0000000
  %divide.26 = fdiv float %multiply.15, %add.25
  %subtract.27 = fsub float %14, %divide.26
  %46 = bitcast i8 addrspace(1)* %alloc2448 to float addrspace(1)*
  %47 = getelementptr float, float addrspace(1)* %46, i64 %10
  %48 = bitcast i8 addrspace(1)* %alloc2550 to float addrspace(1)*
  %49 = getelementptr float, float addrspace(1)* %48, i64 %10
  %subtract.82 = fsub float %31, %23
  %multiply.123 = fmul float %subtract.10, %subtract.82
  %add.134 = fadd float %23, %multiply.123
  %multiply.155 = fmul float %35, %add.134
  %multiply.166 = fmul float %31, %31
  %subtract.177 = fsub float %multiply.166, %41
  %multiply.208 = fmul float %subtract.18, %subtract.177
  %add.219 = fadd float %41, %multiply.208
  %50 = tail call float @llvm.nvvm.sqrt.approx.f(float %add.219) #5
  %add.2511 = fadd float %50, 0x3E7AD7F2A0000000
  %divide.2612 = fdiv float %multiply.155, %add.2511
  %subtract.2713 = fsub float %15, %divide.2612
  %subtract.814 = fsub float %32, %24
  %multiply.1215 = fmul float %subtract.10, %subtract.814
  %add.1316 = fadd float %24, %multiply.1215
  %multiply.1517 = fmul float %35, %add.1316
  %multiply.1618 = fmul float %32, %32
  %subtract.1719 = fsub float %multiply.1618, %42
  %multiply.2020 = fmul float %subtract.18, %subtract.1719
  %add.2121 = fadd float %42, %multiply.2020
  %51 = tail call float @llvm.nvvm.sqrt.approx.f(float %add.2121) #5
  %add.2523 = fadd float %51, 0x3E7AD7F2A0000000
  %divide.2624 = fdiv float %multiply.1517, %add.2523
  %subtract.2725 = fsub float %16, %divide.2624
  %subtract.826 = fsub float %33, %25
  %multiply.1227 = fmul float %subtract.10, %subtract.826
  %add.1328 = fadd float %25, %multiply.1227
  %multiply.1529 = fmul float %35, %add.1328
  %multiply.1630 = fmul float %33, %33
  %subtract.1731 = fsub float %multiply.1630, %43
  %multiply.2032 = fmul float %subtract.18, %subtract.1731
  %add.2133 = fadd float %43, %multiply.2032
  %52 = tail call float @llvm.nvvm.sqrt.approx.f(float %add.2133) #5
  %add.2535 = fadd float %52, 0x3E7AD7F2A0000000
  %divide.2636 = fdiv float %multiply.1529, %add.2535
  %subtract.2737 = fsub float %17, %divide.2636
  %53 = insertelement <4 x float> poison, float %subtract.27, i32 0
  %54 = insertelement <4 x float> %53, float %subtract.2713, i32 1
  %55 = insertelement <4 x float> %54, float %subtract.2725, i32 2
  %56 = insertelement <4 x float> %55, float %subtract.2737, i32 3
  %57 = bitcast float addrspace(1)* %47 to <4 x float> addrspace(1)*
  store <4 x float> %56, <4 x float> addrspace(1)* %57, align 16
  %58 = insertelement <4 x float> poison, float %add.13, i32 0
  %59 = insertelement <4 x float> %58, float %add.134, i32 1
  %60 = insertelement <4 x float> %59, float %add.1316, i32 2
  %61 = insertelement <4 x float> %60, float %add.1328, i32 3
  %62 = bitcast float addrspace(1)* %49 to <4 x float> addrspace(1)*
  store <4 x float> %61, <4 x float> addrspace(1)* %62, align 16
  %63 = insertelement <4 x float> poison, float %add.21, i32 0
  %64 = insertelement <4 x float> %63, float %add.219, i32 1
  %65 = insertelement <4 x float> %64, float %add.2121, i32 2
  %66 = insertelement <4 x float> %65, float %add.2133, i32 3
  %67 = bitcast float addrspace(1)* %27 to <4 x float> addrspace(1)*
  store <4 x float> %66, <4 x float> addrspace(1)* %67, align 16
  br label %fusion_1.in_bounds-after
}

; Function Attrs: nounwind
define void @input_fusion_reduce_2(i8* noalias nocapture writeonly align 128 dereferenceable(401408) %alloc21, i8* noalias nocapture readonly align 128 dereferenceable(401408) %alloc22, i8* noalias nocapture readonly align 128 dereferenceable(401408) %alloc23, i8* noalias nocapture writeonly align 128 dereferenceable(512) %alloc29, i8* noalias nocapture readonly align 128 dereferenceable(5272) %temp_buf) local_unnamed_addr #5 {
entry:
  %temp_buf93 = addrspacecast i8* %temp_buf to i8 addrspace(1)*
  %alloc2991 = addrspacecast i8* %alloc29 to i8 addrspace(1)*
  %alloc2389 = addrspacecast i8* %alloc23 to i8 addrspace(1)*
  %alloc2287 = addrspacecast i8* %alloc22 to i8 addrspace(1)*
  %alloc2185 = addrspacecast i8* %alloc21 to i8 addrspace(1)*
  %0 = bitcast i8 addrspace(1)* %alloc2991 to [128 x float] addrspace(1)*
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !47
  %2 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !49
  %thread_id.x = and i32 %2, 31
  %thread_id.y56 = lshr i32 %2, 5
  %tile_origin.2 = shl nuw nsw i32 %1, 6
  %3 = bitcast i8 addrspace(1)* %alloc2185 to [32 x [128 x float]] addrspace(1)*
  %4 = bitcast i8 addrspace(1)* %alloc2389 to [32 x [128 x float]] addrspace(1)*
  %5 = bitcast i8 addrspace(1)* %alloc2287 to [32 x [128 x float]] addrspace(1)*
  %6 = bitcast i8 addrspace(1)* %temp_buf93 to [32 x [128 x i8]] addrspace(1)*
  %7 = shl nuw nsw i32 %thread_id.x, 1
  %8 = or i32 %7, %tile_origin.2
  %9 = zext i32 %8 to i64
  %10 = zext i32 %thread_id.y56 to i64
  %Arg_2.3 = getelementptr inbounds [32 x [128 x float]], [32 x [128 x float]] addrspace(1)* %4, i64 0, i64 %10, i64 %9
  %11 = bitcast float addrspace(1)* %Arg_2.3 to <2 x float> addrspace(1)*
  %12 = load <2 x float>, <2 x float> addrspace(1)* %11, align 8, !invariant.load !39
  %Arg_2.33101 = extractelement <2 x float> %12, i32 0
  %Arg_2.310102 = extractelement <2 x float> %12, i32 1
  %.inv = fcmp olt float %Arg_2.33101, 0.000000e+00
  %13 = select i1 %.inv, float 0.000000e+00, float %Arg_2.33101
  %compare.7 = fcmp ogt float %13, 0.000000e+00
  %Arg_0.1 = getelementptr inbounds [32 x [128 x i8]], [32 x [128 x i8]] addrspace(1)* %6, i64 0, i64 %10, i64 %9
  %14 = bitcast i8 addrspace(1)* %Arg_0.1 to <2 x i8> addrspace(1)*
  %15 = load <2 x i8>, <2 x i8> addrspace(1)* %14, align 2, !invariant.load !39
  %Arg_0.14103 = extractelement <2 x i8> %15, i32 0
  %Arg_0.115104 = extractelement <2 x i8> %15, i32 1
  %Arg_1.2 = getelementptr inbounds [32 x [128 x float]], [32 x [128 x float]] addrspace(1)* %5, i64 0, i64 %10, i64 %9
  %16 = bitcast float addrspace(1)* %Arg_1.2 to <2 x float> addrspace(1)*
  %17 = load <2 x float>, <2 x float> addrspace(1)* %16, align 8, !invariant.load !39
  %Arg_1.25105 = extractelement <2 x float> %17, i32 0
  %Arg_1.217106 = extractelement <2 x float> %17, i32 1
  %18 = and i8 %Arg_0.14103, 1
  %.not = icmp eq i8 %18, 0
  %19 = select i1 %.not, float 0.000000e+00, float %Arg_1.25105
  %20 = select i1 %compare.7, float %19, float 0.000000e+00
  %21 = getelementptr inbounds [32 x [128 x float]], [32 x [128 x float]] addrspace(1)* %3, i64 0, i64 %10, i64 %9
  %.inv57 = fcmp olt float %Arg_2.310102, 0.000000e+00
  %22 = select i1 %.inv57, float 0.000000e+00, float %Arg_2.310102
  %compare.713 = fcmp ogt float %22, 0.000000e+00
  %23 = and i8 %Arg_0.115104, 1
  %.not58 = icmp eq i8 %23, 0
  %24 = select i1 %.not58, float 0.000000e+00, float %Arg_1.217106
  %25 = select i1 %compare.713, float %24, float 0.000000e+00
  %26 = insertelement <2 x float> poison, float %20, i32 0
  %27 = insertelement <2 x float> %26, float %25, i32 1
  %28 = bitcast float addrspace(1)* %21 to <2 x float> addrspace(1)*
  store <2 x float> %27, <2 x float> addrspace(1)* %28, align 8
  %29 = zext i32 %thread_id.x to i64
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], [1 x [2 x [32 x [33 x float]]]] addrspace(3)* @shared_cache2, i64 0, i64 0, i64 0, i64 %29, i64 %10
  store float %20, float addrspace(3)* %shmem_output_address, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], [1 x [2 x [32 x [33 x float]]]] addrspace(3)* @shared_cache2, i64 0, i64 0, i64 0, i64 %10, i64 %29
  %partial_reduction_result19 = load float, float addrspace(3)* %shmem_transposed_addr, align 4
  %30 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result19, i32 16, i32 31)
  %add.14.i79 = fadd float %partial_reduction_result19, %30
  %31 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.14.i79, i32 8, i32 31)
  %add.14.i78 = fadd float %add.14.i79, %31
  %32 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.14.i78, i32 4, i32 31)
  %add.14.i77 = fadd float %add.14.i78, %32
  %33 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.14.i77, i32 2, i32 31)
  %add.14.i76 = fadd float %add.14.i77, %33
  %34 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.14.i76, i32 1, i32 31)
  %add.14.i75 = fadd float %add.14.i76, %34
  store float %add.14.i75, float addrspace(3)* %shmem_transposed_addr, align 4
  %35 = shl nuw nsw i32 %thread_id.y56, 1
  %36 = icmp eq i32 %thread_id.x, 0
  %37 = or i32 %35, %tile_origin.2
  %38 = zext i32 %37 to i64
  %output_element_address = getelementptr [128 x float], [128 x float] addrspace(1)* %0, i64 0, i64 %38
  br i1 %36, label %reduction_write_output-true, label %reduction_write_output-after

common.ret:                                       ; preds = %reduction_write_output-after, %reduction_write_output-true51
  ret void

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %entry
  %39 = icmp eq i32 %thread_id.x, 0
  %shmem_output_address3398 = getelementptr inbounds float, float addrspace(3)* %shmem_output_address, i64 1056
  store float %25, float addrspace(3)* %shmem_output_address3398, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr3599 = getelementptr inbounds float, float addrspace(3)* %shmem_transposed_addr, i64 1056
  %partial_reduction_result37 = load float, float addrspace(3)* %shmem_transposed_addr3599, align 4
  %40 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result37, i32 16, i32 31)
  %add.14.i74 = fadd float %partial_reduction_result37, %40
  %41 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.14.i74, i32 8, i32 31)
  %add.14.i73 = fadd float %add.14.i74, %41
  %42 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.14.i73, i32 4, i32 31)
  %add.14.i72 = fadd float %add.14.i73, %42
  %43 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.14.i72, i32 2, i32 31)
  %add.14.i71 = fadd float %add.14.i72, %43
  %44 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.14.i71, i32 1, i32 31)
  %add.14.i70 = fadd float %add.14.i71, %44
  store float %add.14.i70, float addrspace(3)* %shmem_transposed_addr3599, align 4
  br i1 %39, label %reduction_write_output-true51, label %common.ret

reduction_write_output-true:                      ; preds = %entry
  store float %add.14.i75, float addrspace(1)* %output_element_address, align 8
  br label %reduction_write_output-after

reduction_write_output-true51:                    ; preds = %reduction_write_output-after
  %45 = bitcast float addrspace(1)* %output_element_address to i8 addrspace(1)*
  %sunkaddr = getelementptr inbounds i8, i8 addrspace(1)* %45, i64 4
  %46 = bitcast i8 addrspace(1)* %sunkaddr to float addrspace(1)*
  store float %add.14.i70, float addrspace(1)* %46, align 4
  br label %common.ret
}

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
define void @fusion_10(i8* noalias nocapture readonly align 16 dereferenceable(4) %alloc5, i8* noalias nocapture readonly align 16 dereferenceable(4) %alloc6, i8* noalias nocapture readonly align 16 dereferenceable(512) %alloc7, i8* noalias nocapture readonly align 16 dereferenceable(512) %alloc19, i8* noalias nocapture readonly align 16 dereferenceable(512) %alloc20, i8* noalias nocapture writeonly align 128 dereferenceable(512) %alloc27, i8* noalias nocapture writeonly align 128 dereferenceable(512) %alloc28, i8* noalias nocapture align 128 dereferenceable(512) %alloc29, i8* noalias nocapture readonly align 128 dereferenceable(5272) %temp_buf) local_unnamed_addr #2 {
entry:
  %temp_buf54 = addrspacecast i8* %temp_buf to i8 addrspace(1)*
  %alloc2952 = addrspacecast i8* %alloc29 to i8 addrspace(1)*
  %alloc2850 = addrspacecast i8* %alloc28 to i8 addrspace(1)*
  %alloc2748 = addrspacecast i8* %alloc27 to i8 addrspace(1)*
  %alloc2046 = addrspacecast i8* %alloc20 to i8 addrspace(1)*
  %alloc1944 = addrspacecast i8* %alloc19 to i8 addrspace(1)*
  %alloc742 = addrspacecast i8* %alloc7 to i8 addrspace(1)*
  %alloc640 = addrspacecast i8* %alloc6 to i8 addrspace(1)*
  %alloc538 = addrspacecast i8* %alloc5 to i8 addrspace(1)*
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !42
  %linear_index_base = shl nuw nsw i32 %0, 2
  %1 = bitcast i8 addrspace(1)* %alloc640 to float addrspace(1)*
  %2 = bitcast i8 addrspace(1)* %alloc538 to float addrspace(1)*
  %3 = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf54, i64 4096
  %4 = bitcast i8 addrspace(1)* %3 to float addrspace(1)*
  %5 = bitcast i8 addrspace(1)* %alloc742 to float addrspace(1)*
  %6 = zext i32 %linear_index_base to i64
  %7 = getelementptr float, float addrspace(1)* %5, i64 %6
  %8 = bitcast float addrspace(1)* %7 to <4 x float> addrspace(1)*
  %9 = load <4 x float>, <4 x float> addrspace(1)* %8, align 16, !invariant.load !39
  %10 = extractelement <4 x float> %9, i32 0
  %11 = extractelement <4 x float> %9, i32 1
  %12 = extractelement <4 x float> %9, i32 2
  %13 = extractelement <4 x float> %9, i32 3
  %14 = bitcast i8 addrspace(1)* %alloc1944 to float addrspace(1)*
  %15 = getelementptr float, float addrspace(1)* %14, i64 %6
  %16 = bitcast float addrspace(1)* %15 to <4 x float> addrspace(1)*
  %17 = load <4 x float>, <4 x float> addrspace(1)* %16, align 16, !invariant.load !39
  %18 = extractelement <4 x float> %17, i32 0
  %19 = extractelement <4 x float> %17, i32 1
  %20 = extractelement <4 x float> %17, i32 2
  %21 = extractelement <4 x float> %17, i32 3
  %22 = bitcast i8 addrspace(1)* %alloc2952 to float addrspace(1)*
  %23 = getelementptr float, float addrspace(1)* %22, i64 %6
  %24 = bitcast float addrspace(1)* %23 to <4 x float> addrspace(1)*
  %25 = load <4 x float>, <4 x float> addrspace(1)* %24, align 16
  %26 = extractelement <4 x float> %25, i32 0
  %27 = extractelement <4 x float> %25, i32 1
  %28 = extractelement <4 x float> %25, i32 2
  %29 = extractelement <4 x float> %25, i32 3
  %subtract.8 = fsub float %26, %18
  %30 = load float, float addrspace(1)* %2, align 16, !invariant.load !39
  %subtract.10 = fsub float 1.000000e+00, %30
  %multiply.12 = fmul float %subtract.8, %subtract.10
  %add.13 = fadd float %18, %multiply.12
  %31 = load float, float addrspace(1)* %4, align 128, !invariant.load !39
  %multiply.15 = fmul float %31, %add.13
  %32 = bitcast i8 addrspace(1)* %alloc2046 to float addrspace(1)*
  %33 = getelementptr float, float addrspace(1)* %32, i64 %6
  %34 = bitcast float addrspace(1)* %33 to <4 x float> addrspace(1)*
  %35 = load <4 x float>, <4 x float> addrspace(1)* %34, align 16, !invariant.load !39
  %36 = extractelement <4 x float> %35, i32 0
  %37 = extractelement <4 x float> %35, i32 1
  %38 = extractelement <4 x float> %35, i32 2
  %39 = extractelement <4 x float> %35, i32 3
  %multiply.16 = fmul float %26, %26
  %subtract.17 = fsub float %multiply.16, %36
  %40 = load float, float addrspace(1)* %1, align 16, !invariant.load !39
  %subtract.18 = fsub float 1.000000e+00, %40
  %multiply.20 = fmul float %subtract.17, %subtract.18
  %add.21 = fadd float %36, %multiply.20
  %41 = tail call float @llvm.nvvm.sqrt.approx.f(float %add.21) #5
  %add.25 = fadd float %41, 0x3E7AD7F2A0000000
  %divide.26 = fdiv float %multiply.15, %add.25
  %subtract.27 = fsub float %10, %divide.26
  %42 = bitcast i8 addrspace(1)* %alloc2748 to float addrspace(1)*
  %43 = getelementptr float, float addrspace(1)* %42, i64 %6
  %44 = bitcast i8 addrspace(1)* %alloc2850 to float addrspace(1)*
  %45 = getelementptr float, float addrspace(1)* %44, i64 %6
  %subtract.82 = fsub float %27, %19
  %multiply.123 = fmul float %subtract.10, %subtract.82
  %add.134 = fadd float %19, %multiply.123
  %multiply.155 = fmul float %31, %add.134
  %multiply.166 = fmul float %27, %27
  %subtract.177 = fsub float %multiply.166, %37
  %multiply.208 = fmul float %subtract.18, %subtract.177
  %add.219 = fadd float %37, %multiply.208
  %46 = tail call float @llvm.nvvm.sqrt.approx.f(float %add.219) #5
  %add.2511 = fadd float %46, 0x3E7AD7F2A0000000
  %divide.2612 = fdiv float %multiply.155, %add.2511
  %subtract.2713 = fsub float %11, %divide.2612
  %subtract.814 = fsub float %28, %20
  %multiply.1215 = fmul float %subtract.10, %subtract.814
  %add.1316 = fadd float %20, %multiply.1215
  %multiply.1517 = fmul float %31, %add.1316
  %multiply.1618 = fmul float %28, %28
  %subtract.1719 = fsub float %multiply.1618, %38
  %multiply.2020 = fmul float %subtract.18, %subtract.1719
  %add.2121 = fadd float %38, %multiply.2020
  %47 = tail call float @llvm.nvvm.sqrt.approx.f(float %add.2121) #5
  %add.2523 = fadd float %47, 0x3E7AD7F2A0000000
  %divide.2624 = fdiv float %multiply.1517, %add.2523
  %subtract.2725 = fsub float %12, %divide.2624
  %subtract.826 = fsub float %29, %21
  %multiply.1227 = fmul float %subtract.10, %subtract.826
  %add.1328 = fadd float %21, %multiply.1227
  %multiply.1529 = fmul float %31, %add.1328
  %multiply.1630 = fmul float %29, %29
  %subtract.1731 = fsub float %multiply.1630, %39
  %multiply.2032 = fmul float %subtract.18, %subtract.1731
  %add.2133 = fadd float %39, %multiply.2032
  %48 = tail call float @llvm.nvvm.sqrt.approx.f(float %add.2133) #5
  %add.2535 = fadd float %48, 0x3E7AD7F2A0000000
  %divide.2636 = fdiv float %multiply.1529, %add.2535
  %subtract.2737 = fsub float %13, %divide.2636
  %49 = insertelement <4 x float> poison, float %subtract.27, i32 0
  %50 = insertelement <4 x float> %49, float %subtract.2713, i32 1
  %51 = insertelement <4 x float> %50, float %subtract.2725, i32 2
  %52 = insertelement <4 x float> %51, float %subtract.2737, i32 3
  %53 = bitcast float addrspace(1)* %43 to <4 x float> addrspace(1)*
  store <4 x float> %52, <4 x float> addrspace(1)* %53, align 16
  %54 = insertelement <4 x float> poison, float %add.13, i32 0
  %55 = insertelement <4 x float> %54, float %add.134, i32 1
  %56 = insertelement <4 x float> %55, float %add.1316, i32 2
  %57 = insertelement <4 x float> %56, float %add.1328, i32 3
  %58 = bitcast float addrspace(1)* %45 to <4 x float> addrspace(1)*
  store <4 x float> %57, <4 x float> addrspace(1)* %58, align 16
  %59 = insertelement <4 x float> poison, float %add.21, i32 0
  %60 = insertelement <4 x float> %59, float %add.219, i32 1
  %61 = insertelement <4 x float> %60, float %add.2121, i32 2
  %62 = insertelement <4 x float> %61, float %add.2133, i32 3
  %63 = bitcast float addrspace(1)* %23 to <4 x float> addrspace(1)*
  store <4 x float> %62, <4 x float> addrspace(1)* %63, align 16
  ret void
}

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
define void @fusion_7(i8* noalias nocapture readonly align 16 dereferenceable(4) %alloc5, i8* noalias nocapture readonly align 16 dereferenceable(4) %alloc6, i8* noalias nocapture readonly align 16 dereferenceable(401408) %alloc8, i8* noalias nocapture readonly align 16 dereferenceable(401408) %alloc17, i8* noalias nocapture readonly align 16 dereferenceable(401408) %alloc18, i8* noalias nocapture writeonly align 128 dereferenceable(401408) %alloc21, i8* noalias nocapture writeonly align 128 dereferenceable(401408) %alloc22, i8* noalias nocapture align 128 dereferenceable(401408) %alloc23, i8* noalias nocapture readonly align 128 dereferenceable(5272) %temp_buf) local_unnamed_addr #2 {
entry:
  %temp_buf54 = addrspacecast i8* %temp_buf to i8 addrspace(1)*
  %alloc2352 = addrspacecast i8* %alloc23 to i8 addrspace(1)*
  %alloc2250 = addrspacecast i8* %alloc22 to i8 addrspace(1)*
  %alloc2148 = addrspacecast i8* %alloc21 to i8 addrspace(1)*
  %alloc1846 = addrspacecast i8* %alloc18 to i8 addrspace(1)*
  %alloc1744 = addrspacecast i8* %alloc17 to i8 addrspace(1)*
  %alloc842 = addrspacecast i8* %alloc8 to i8 addrspace(1)*
  %alloc640 = addrspacecast i8* %alloc6 to i8 addrspace(1)*
  %alloc538 = addrspacecast i8* %alloc5 to i8 addrspace(1)*
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !50
  %1 = shl nuw nsw i32 %0, 10
  %2 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !45
  %3 = shl nuw nsw i32 %2, 2
  %linear_index_base = or i32 %1, %3
  %4 = bitcast i8 addrspace(1)* %alloc640 to float addrspace(1)*
  %5 = bitcast i8 addrspace(1)* %alloc538 to float addrspace(1)*
  %6 = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf54, i64 4096
  %7 = bitcast i8 addrspace(1)* %6 to float addrspace(1)*
  %8 = bitcast i8 addrspace(1)* %alloc842 to float addrspace(1)*
  %9 = zext i32 %linear_index_base to i64
  %10 = getelementptr float, float addrspace(1)* %8, i64 %9
  %11 = bitcast float addrspace(1)* %10 to <4 x float> addrspace(1)*
  %12 = load <4 x float>, <4 x float> addrspace(1)* %11, align 16, !invariant.load !39
  %13 = extractelement <4 x float> %12, i32 0
  %14 = extractelement <4 x float> %12, i32 1
  %15 = extractelement <4 x float> %12, i32 2
  %16 = extractelement <4 x float> %12, i32 3
  %17 = bitcast i8 addrspace(1)* %alloc1744 to float addrspace(1)*
  %18 = getelementptr float, float addrspace(1)* %17, i64 %9
  %19 = bitcast float addrspace(1)* %18 to <4 x float> addrspace(1)*
  %20 = load <4 x float>, <4 x float> addrspace(1)* %19, align 16, !invariant.load !39
  %21 = extractelement <4 x float> %20, i32 0
  %22 = extractelement <4 x float> %20, i32 1
  %23 = extractelement <4 x float> %20, i32 2
  %24 = extractelement <4 x float> %20, i32 3
  %25 = bitcast i8 addrspace(1)* %alloc2352 to float addrspace(1)*
  %26 = getelementptr float, float addrspace(1)* %25, i64 %9
  %27 = bitcast float addrspace(1)* %26 to <4 x float> addrspace(1)*
  %28 = load <4 x float>, <4 x float> addrspace(1)* %27, align 16
  %29 = extractelement <4 x float> %28, i32 0
  %30 = extractelement <4 x float> %28, i32 1
  %31 = extractelement <4 x float> %28, i32 2
  %32 = extractelement <4 x float> %28, i32 3
  %subtract.8 = fsub float %29, %21
  %33 = load float, float addrspace(1)* %5, align 16, !invariant.load !39
  %subtract.10 = fsub float 1.000000e+00, %33
  %multiply.12 = fmul float %subtract.8, %subtract.10
  %add.13 = fadd float %21, %multiply.12
  %34 = load float, float addrspace(1)* %7, align 128, !invariant.load !39
  %multiply.15 = fmul float %34, %add.13
  %35 = bitcast i8 addrspace(1)* %alloc1846 to float addrspace(1)*
  %36 = getelementptr float, float addrspace(1)* %35, i64 %9
  %37 = bitcast float addrspace(1)* %36 to <4 x float> addrspace(1)*
  %38 = load <4 x float>, <4 x float> addrspace(1)* %37, align 16, !invariant.load !39
  %39 = extractelement <4 x float> %38, i32 0
  %40 = extractelement <4 x float> %38, i32 1
  %41 = extractelement <4 x float> %38, i32 2
  %42 = extractelement <4 x float> %38, i32 3
  %multiply.16 = fmul float %29, %29
  %subtract.17 = fsub float %multiply.16, %39
  %43 = load float, float addrspace(1)* %4, align 16, !invariant.load !39
  %subtract.18 = fsub float 1.000000e+00, %43
  %multiply.20 = fmul float %subtract.17, %subtract.18
  %add.21 = fadd float %39, %multiply.20
  %44 = tail call float @llvm.nvvm.sqrt.approx.f(float %add.21) #5
  %add.25 = fadd float %44, 0x3E7AD7F2A0000000
  %divide.26 = fdiv float %multiply.15, %add.25
  %subtract.27 = fsub float %13, %divide.26
  %45 = bitcast i8 addrspace(1)* %alloc2148 to float addrspace(1)*
  %46 = getelementptr float, float addrspace(1)* %45, i64 %9
  %47 = bitcast i8 addrspace(1)* %alloc2250 to float addrspace(1)*
  %48 = getelementptr float, float addrspace(1)* %47, i64 %9
  %subtract.82 = fsub float %30, %22
  %multiply.123 = fmul float %subtract.10, %subtract.82
  %add.134 = fadd float %22, %multiply.123
  %multiply.155 = fmul float %34, %add.134
  %multiply.166 = fmul float %30, %30
  %subtract.177 = fsub float %multiply.166, %40
  %multiply.208 = fmul float %subtract.18, %subtract.177
  %add.219 = fadd float %40, %multiply.208
  %49 = tail call float @llvm.nvvm.sqrt.approx.f(float %add.219) #5
  %add.2511 = fadd float %49, 0x3E7AD7F2A0000000
  %divide.2612 = fdiv float %multiply.155, %add.2511
  %subtract.2713 = fsub float %14, %divide.2612
  %subtract.814 = fsub float %31, %23
  %multiply.1215 = fmul float %subtract.10, %subtract.814
  %add.1316 = fadd float %23, %multiply.1215
  %multiply.1517 = fmul float %34, %add.1316
  %multiply.1618 = fmul float %31, %31
  %subtract.1719 = fsub float %multiply.1618, %41
  %multiply.2020 = fmul float %subtract.18, %subtract.1719
  %add.2121 = fadd float %41, %multiply.2020
  %50 = tail call float @llvm.nvvm.sqrt.approx.f(float %add.2121) #5
  %add.2523 = fadd float %50, 0x3E7AD7F2A0000000
  %divide.2624 = fdiv float %multiply.1517, %add.2523
  %subtract.2725 = fsub float %15, %divide.2624
  %subtract.826 = fsub float %32, %24
  %multiply.1227 = fmul float %subtract.10, %subtract.826
  %add.1328 = fadd float %24, %multiply.1227
  %multiply.1529 = fmul float %34, %add.1328
  %multiply.1630 = fmul float %32, %32
  %subtract.1731 = fsub float %multiply.1630, %42
  %multiply.2032 = fmul float %subtract.18, %subtract.1731
  %add.2133 = fadd float %42, %multiply.2032
  %51 = tail call float @llvm.nvvm.sqrt.approx.f(float %add.2133) #5
  %add.2535 = fadd float %51, 0x3E7AD7F2A0000000
  %divide.2636 = fdiv float %multiply.1529, %add.2535
  %subtract.2737 = fsub float %16, %divide.2636
  %52 = insertelement <4 x float> poison, float %subtract.27, i32 0
  %53 = insertelement <4 x float> %52, float %subtract.2713, i32 1
  %54 = insertelement <4 x float> %53, float %subtract.2725, i32 2
  %55 = insertelement <4 x float> %54, float %subtract.2737, i32 3
  %56 = bitcast float addrspace(1)* %46 to <4 x float> addrspace(1)*
  store <4 x float> %55, <4 x float> addrspace(1)* %56, align 16
  %57 = insertelement <4 x float> poison, float %add.13, i32 0
  %58 = insertelement <4 x float> %57, float %add.134, i32 1
  %59 = insertelement <4 x float> %58, float %add.1316, i32 2
  %60 = insertelement <4 x float> %59, float %add.1328, i32 3
  %61 = bitcast float addrspace(1)* %48 to <4 x float> addrspace(1)*
  store <4 x float> %60, <4 x float> addrspace(1)* %61, align 16
  %62 = insertelement <4 x float> poison, float %add.21, i32 0
  %63 = insertelement <4 x float> %62, float %add.219, i32 1
  %64 = insertelement <4 x float> %63, float %add.2121, i32 2
  %65 = insertelement <4 x float> %64, float %add.2133, i32 3
  %66 = bitcast float addrspace(1)* %26 to <4 x float> addrspace(1)*
  store <4 x float> %65, <4 x float> addrspace(1)* %66, align 16
  ret void
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone willreturn
declare float @llvm.nvvm.sqrt.approx.f(float) #9

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.nvvm.saturate.f(float) #10

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.nvvm.fma.rm.f(float, float, float) #10

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone willreturn
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #9

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.smin.i32(i32, i32) #10

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fma.f32(float, float, float) #10

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.trunc.f32(float) #10

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fabs.f32(float) #10

attributes #0 = { argmemonly nounwind }
attributes #1 = { nofree nosync nounwind readnone speculatable }
attributes #2 = { argmemonly mustprogress nofree nosync nounwind willreturn }
attributes #3 = { argmemonly mustprogress nofree nosync nounwind willreturn writeonly }
attributes #4 = { nofree nosync nounwind }
attributes #5 = { nounwind }
attributes #6 = { convergent inaccessiblememonly nounwind }
attributes #7 = { convergent nounwind }
attributes #8 = { argmemonly nofree nosync nounwind }
attributes #9 = { mustprogress nocallback nofree nosync nounwind readnone willreturn }
attributes #10 = { mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn }
attributes #11 = { nounwind readnone }

!nvvm.annotations = !{!0, !1, !2, !3, !4, !5, !6, !7, !8, !9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36}
!llvm.ident = !{!37}
!llvm.module.flags = !{!38}

!0 = !{void (i8*, i8*, i8*, i8*, i8*)* @fusion_12, !"kernel", i32 1}
!1 = !{void (i8*, i8*, i8*, i8*, i8*)* @fusion_12, !"reqntidx", i32 1}
!2 = !{void (i8*, i8*, i8*)* @broadcast_57, !"kernel", i32 1}
!3 = !{void (i8*, i8*, i8*)* @broadcast_57, !"reqntidx", i32 80}
!4 = !{void (i8*, i8*)* @iota_62, !"kernel", i32 1}
!5 = !{void (i8*, i8*)* @iota_62, !"reqntidx", i32 80}
!6 = !{void (i8*, i8*, i8*)* @broadcast_40, !"kernel", i32 1}
!7 = !{void (i8*, i8*, i8*)* @broadcast_40, !"reqntidx", i32 32}
!8 = !{void (i8*, i8*, i8*)* @broadcast_40, !"reqntidy", i32 4}
!9 = !{void (i8*, i8*, i8*, i8*)* @fusion_18, !"kernel", i32 1}
!10 = !{void (i8*, i8*, i8*, i8*)* @fusion_18, !"reqntidx", i32 256}
!11 = !{void (i8*, i8*, i8*, i8*, i8*)* @reduce_75, !"kernel", i32 1}
!12 = !{void (i8*, i8*, i8*, i8*, i8*)* @reduce_75, !"reqntidx", i32 32}
!13 = !{void (i8*, i8*, i8*, i8*)* @input_fusion_reduce, !"kernel", i32 1}
!14 = !{void (i8*, i8*, i8*, i8*)* @input_fusion_reduce, !"reqntidx", i32 160}
!15 = !{void (i8*, i8*, i8*)* @reduce_114, !"kernel", i32 1}
!16 = !{void (i8*, i8*, i8*)* @reduce_114, !"reqntidx", i32 8}
!17 = !{void (i8*, i8*, i8*, i8*, i8*)* @fusion_22, !"kernel", i32 1}
!18 = !{void (i8*, i8*, i8*, i8*, i8*)* @fusion_22, !"reqntidx", i32 8}
!19 = !{void (i8*, i8*, i8*, i8*, i8*, i8*)* @input_fusion_reduce_1, !"kernel", i32 1}
!20 = !{void (i8*, i8*, i8*, i8*, i8*, i8*)* @input_fusion_reduce_1, !"reqntidx", i32 32}
!21 = !{void (i8*, i8*, i8*, i8*, i8*, i8*)* @fusion_15, !"kernel", i32 1}
!22 = !{void (i8*, i8*, i8*, i8*, i8*, i8*)* @fusion_15, !"reqntidx", i32 80}
!23 = !{void (i8*, i8*, i8*, i8*, i8*)* @fusion_25, !"kernel", i32 1}
!24 = !{void (i8*, i8*, i8*, i8*, i8*)* @fusion_25, !"reqntidx", i32 2}
!25 = !{void (i8*, i8*, i8*)* @reduce_156, !"kernel", i32 1}
!26 = !{void (i8*, i8*, i8*)* @reduce_156, !"reqntidx", i32 5}
!27 = !{void (i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*)* @fusion_4, !"kernel", i32 1}
!28 = !{void (i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*)* @fusion_4, !"reqntidx", i32 5}
!29 = !{void (i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*)* @fusion_1, !"kernel", i32 1}
!30 = !{void (i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*)* @fusion_1, !"reqntidx", i32 256}
!31 = !{void (i8*, i8*, i8*, i8*, i8*)* @input_fusion_reduce_2, !"kernel", i32 1}
!32 = !{void (i8*, i8*, i8*, i8*, i8*)* @input_fusion_reduce_2, !"reqntidx", i32 1024}
!33 = !{void (i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*)* @fusion_10, !"kernel", i32 1}
!34 = !{void (i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*)* @fusion_10, !"reqntidx", i32 32}
!35 = !{void (i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*)* @fusion_7, !"kernel", i32 1}
!36 = !{void (i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*)* @fusion_7, !"reqntidx", i32 256}
!37 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!38 = !{i32 4, !"nvvm-reflect-ftz", i32 0}
!39 = !{}
!40 = !{i32 17700}
!41 = !{i32 0, i32 80}
!42 = !{i32 0, i32 32}
!43 = !{i32 0, i32 8}
!44 = !{i32 0, i32 4}
!45 = !{i32 0, i32 256}
!46 = !{i32 0, i32 160}
!47 = !{i32 0, i32 2}
!48 = !{i32 0, i32 5}
!49 = !{i32 0, i32 1024}
!50 = !{i32 0, i32 98}
