target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"
target triple = "nvptx64-nvidia-cuda"

@buffer_for_constant_32 = external local_unnamed_addr addrspace(1) constant [4 x i8], align 128
@shared_cache = external dso_local unnamed_addr addrspace(3) global [1 x [1 x [1 x float]]]
@buffer_for_constant_33 = external local_unnamed_addr addrspace(1) constant [4 x i8], align 128
@shared_cache1 = external dso_local unnamed_addr addrspace(3) global [5 x [1 x [1 x float]]]
@buffer_for_constant_165 = external local_unnamed_addr addrspace(1) constant [4 x i8], align 128
@buffer_for_constant_162 = external local_unnamed_addr addrspace(1) constant [4 x i8], align 128

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
define void @broadcast_15(i8* noalias nocapture readonly align 16 dereferenceable(512) %alloc2, i8* noalias nocapture writeonly align 128 dereferenceable(17808) %temp_buf) local_unnamed_addr #0 {
entry:
  %temp_buf3 = addrspacecast i8* %temp_buf to i8 addrspace(1)*
  %alloc21 = addrspacecast i8* %alloc2 to i8 addrspace(1)*
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !23
  %row_index = shl nuw nsw i32 %0, 2
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !24
  %2 = shl nuw nsw i32 %1, 7
  %3 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.y(), !range !25
  %4 = shl nuw nsw i32 %3, 5
  %5 = or i32 %2, %4
  %linear_index = or i32 %5, %0
  %linear_index_base = shl nuw nsw i32 %linear_index, 2
  %6 = bitcast i8 addrspace(1)* %alloc21 to [128 x float] addrspace(1)*
  %7 = zext i32 %row_index to i64
  %8 = getelementptr inbounds [128 x float], [128 x float] addrspace(1)* %6, i64 0, i64 %7
  %9 = bitcast float addrspace(1)* %8 to <4 x float> addrspace(1)*
  %10 = load <4 x float>, <4 x float> addrspace(1)* %9, align 16, !invariant.load !26
  %11 = extractelement <4 x float> %10, i32 0
  %12 = extractelement <4 x float> %10, i32 1
  %13 = extractelement <4 x float> %10, i32 2
  %14 = extractelement <4 x float> %10, i32 3
  %15 = bitcast i8 addrspace(1)* %temp_buf3 to float addrspace(1)*
  %16 = zext i32 %linear_index_base to i64
  %17 = getelementptr float, float addrspace(1)* %15, i64 %16
  %18 = insertelement <4 x float> poison, float %11, i32 0
  %19 = insertelement <4 x float> %18, float %12, i32 1
  %20 = insertelement <4 x float> %19, float %13, i32 2
  %21 = insertelement <4 x float> %20, float %14, i32 3
  %22 = bitcast float addrspace(1)* %17 to <4 x float> addrspace(1)*
  store <4 x float> %21, <4 x float> addrspace(1)* %22, align 16
  ret void
}

; Function Attrs: nofree nosync nounwind readnone speculatable
declare i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: nofree nosync nounwind readnone speculatable
declare i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: nofree nosync nounwind readnone speculatable
declare i32 @llvm.nvvm.read.ptx.sreg.tid.y() #1

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
define void @fusion_3(i8* noalias nocapture align 128 dereferenceable(17808) %temp_buf) local_unnamed_addr #0 {
entry:
  %temp_buf10 = addrspacecast i8* %temp_buf to i8 addrspace(1)*
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !25
  %1 = shl nuw nsw i32 %0, 10
  %2 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !27
  %3 = shl nuw nsw i32 %2, 2
  %linear_index_base = or i32 %1, %3
  %4 = bitcast i8 addrspace(1)* %temp_buf10 to float addrspace(1)*
  %5 = zext i32 %linear_index_base to i64
  %6 = getelementptr float, float addrspace(1)* %4, i64 %5
  %7 = bitcast float addrspace(1)* %6 to <4 x float> addrspace(1)*
  %8 = load <4 x float>, <4 x float> addrspace(1)* %7, align 16
  %9 = extractelement <4 x float> %8, i32 0
  %10 = extractelement <4 x float> %8, i32 1
  %11 = extractelement <4 x float> %8, i32 2
  %12 = extractelement <4 x float> %8, i32 3
  %.inv = fcmp olt float %9, 0.000000e+00
  %13 = select i1 %.inv, float 0.000000e+00, float %9
  %.inv7 = fcmp olt float %10, 0.000000e+00
  %14 = select i1 %.inv7, float 0.000000e+00, float %10
  %.inv8 = fcmp olt float %11, 0.000000e+00
  %15 = select i1 %.inv8, float 0.000000e+00, float %11
  %.inv9 = fcmp olt float %12, 0.000000e+00
  %16 = select i1 %.inv9, float 0.000000e+00, float %12
  %17 = insertelement <4 x float> poison, float %13, i32 0
  %18 = insertelement <4 x float> %17, float %14, i32 1
  %19 = insertelement <4 x float> %18, float %15, i32 2
  %20 = insertelement <4 x float> %19, float %16, i32 3
  %21 = bitcast float addrspace(1)* %6 to <4 x float> addrspace(1)*
  store <4 x float> %20, <4 x float> addrspace(1)* %21, align 16
  ret void
}

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
define void @broadcast_22(i8* noalias nocapture readonly align 16 dereferenceable(40) %alloc4, i8* noalias nocapture writeonly align 128 dereferenceable(17808) %temp_buf) local_unnamed_addr #0 {
entry:
  %temp_buf3 = addrspacecast i8* %temp_buf to i8 addrspace(1)*
  %alloc41 = addrspacecast i8* %alloc4 to i8 addrspace(1)*
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !28
  %linear_index_base = shl nuw nsw i32 %0, 2
  %linear_index3 = or i32 %linear_index_base, 3
  %1 = urem i32 %linear_index3, 10
  %linear_index2 = or i32 %linear_index_base, 2
  %2 = urem i32 %linear_index2, 10
  %linear_index1 = or i32 %linear_index_base, 1
  %3 = urem i32 %linear_index1, 10
  %.lhs.trunc = trunc i32 %linear_index_base to i16
  %4 = urem i16 %.lhs.trunc, 10
  %5 = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf3, i64 16384
  %6 = bitcast i8 addrspace(1)* %alloc41 to [10 x float] addrspace(1)*
  %7 = zext i16 %4 to i64
  %8 = getelementptr inbounds [10 x float], [10 x float] addrspace(1)* %6, i64 0, i64 %7
  %9 = load float, float addrspace(1)* %8, align 4, !invariant.load !26
  %10 = bitcast i8 addrspace(1)* %5 to float addrspace(1)*
  %11 = zext i32 %linear_index_base to i64
  %12 = getelementptr float, float addrspace(1)* %10, i64 %11
  %13 = zext i32 %3 to i64
  %14 = getelementptr inbounds [10 x float], [10 x float] addrspace(1)* %6, i64 0, i64 %13
  %15 = load float, float addrspace(1)* %14, align 4, !invariant.load !26
  %16 = zext i32 %2 to i64
  %17 = getelementptr inbounds [10 x float], [10 x float] addrspace(1)* %6, i64 0, i64 %16
  %18 = load float, float addrspace(1)* %17, align 4, !invariant.load !26
  %19 = zext i32 %1 to i64
  %20 = getelementptr inbounds [10 x float], [10 x float] addrspace(1)* %6, i64 0, i64 %19
  %21 = load float, float addrspace(1)* %20, align 4, !invariant.load !26
  %22 = insertelement <4 x float> poison, float %9, i32 0
  %23 = insertelement <4 x float> %22, float %15, i32 1
  %24 = insertelement <4 x float> %23, float %18, i32 2
  %25 = insertelement <4 x float> %24, float %21, i32 3
  %26 = bitcast float addrspace(1)* %12 to <4 x float> addrspace(1)*
  store <4 x float> %25, <4 x float> addrspace(1)* %26, align 16
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind
define void @reduce_110(i8* noalias nocapture align 128 dereferenceable(17808) %temp_buf) local_unnamed_addr #2 {
entry:
  %temp_buf47 = addrspacecast i8* %temp_buf to i8 addrspace(1)*
  %0 = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf47, i64 16384
  %1 = bitcast i8 addrspace(1)* %0 to [32 x [10 x float]] addrspace(1)*
  %2 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !24
  %linear_index_base = shl nuw nsw i32 %2, 2
  %3 = zext i32 %linear_index_base to i64
  %4 = getelementptr inbounds [32 x [10 x float]], [32 x [10 x float]] addrspace(1)* %1, i64 0, i64 %3, i64 0
  %5 = bitcast float addrspace(1)* %4 to <4 x float> addrspace(1)*
  %6 = load <4 x float>, <4 x float> addrspace(1)* %5, align 32, !invariant.load !26
  %7 = extractelement <4 x float> %6, i32 0
  %8 = extractelement <4 x float> %6, i32 1
  %9 = extractelement <4 x float> %6, i32 2
  %10 = extractelement <4 x float> %6, i32 3
  %11 = fcmp ole float %7, 0xFFF0000000000000
  %maximum.6.i = select i1 %11, float 0xFFF0000000000000, float %7
  %12 = fcmp oge float %maximum.6.i, %8
  %13 = fcmp uno float %maximum.6.i, 0.000000e+00
  %14 = or i1 %13, %12
  %maximum.6.i.1 = select i1 %14, float %maximum.6.i, float %8
  %15 = fcmp oge float %maximum.6.i.1, %9
  %16 = fcmp uno float %maximum.6.i.1, 0.000000e+00
  %17 = or i1 %16, %15
  %maximum.6.i.2 = select i1 %17, float %maximum.6.i.1, float %9
  %18 = fcmp oge float %maximum.6.i.2, %10
  %19 = fcmp uno float %maximum.6.i.2, 0.000000e+00
  %20 = or i1 %19, %18
  %maximum.6.i.3 = select i1 %20, float %maximum.6.i.2, float %10
  %21 = getelementptr inbounds float, float addrspace(1)* %4, i64 4
  %22 = bitcast float addrspace(1)* %21 to <4 x float> addrspace(1)*
  %23 = load <4 x float>, <4 x float> addrspace(1)* %22, align 16, !invariant.load !26
  %24 = extractelement <4 x float> %23, i32 0
  %25 = extractelement <4 x float> %23, i32 1
  %26 = extractelement <4 x float> %23, i32 2
  %27 = extractelement <4 x float> %23, i32 3
  %28 = fcmp oge float %maximum.6.i.3, %24
  %29 = fcmp uno float %maximum.6.i.3, 0.000000e+00
  %30 = or i1 %29, %28
  %maximum.6.i.4 = select i1 %30, float %maximum.6.i.3, float %24
  %31 = fcmp oge float %maximum.6.i.4, %25
  %32 = fcmp uno float %maximum.6.i.4, 0.000000e+00
  %33 = or i1 %32, %31
  %maximum.6.i.5 = select i1 %33, float %maximum.6.i.4, float %25
  %34 = fcmp oge float %maximum.6.i.5, %26
  %35 = fcmp uno float %maximum.6.i.5, 0.000000e+00
  %36 = or i1 %35, %34
  %maximum.6.i.6 = select i1 %36, float %maximum.6.i.5, float %26
  %37 = fcmp oge float %maximum.6.i.6, %27
  %38 = fcmp uno float %maximum.6.i.6, 0.000000e+00
  %39 = or i1 %38, %37
  %maximum.6.i.7 = select i1 %39, float %maximum.6.i.6, float %27
  %40 = getelementptr inbounds float, float addrspace(1)* %4, i64 8
  %41 = bitcast float addrspace(1)* %40 to <4 x float> addrspace(1)*
  %42 = load <4 x float>, <4 x float> addrspace(1)* %41, align 32, !invariant.load !26
  %43 = extractelement <4 x float> %42, i32 0
  %44 = extractelement <4 x float> %42, i32 1
  %45 = extractelement <4 x float> %42, i32 2
  %46 = extractelement <4 x float> %42, i32 3
  %47 = fcmp oge float %maximum.6.i.7, %43
  %48 = fcmp uno float %maximum.6.i.7, 0.000000e+00
  %49 = or i1 %48, %47
  %maximum.6.i.8 = select i1 %49, float %maximum.6.i.7, float %43
  %50 = fcmp oge float %maximum.6.i.8, %44
  %51 = fcmp uno float %maximum.6.i.8, 0.000000e+00
  %52 = or i1 %51, %50
  %maximum.6.i.9 = select i1 %52, float %maximum.6.i.8, float %44
  %53 = bitcast i8 addrspace(1)* %temp_buf47 to float addrspace(1)*
  %54 = getelementptr float, float addrspace(1)* %53, i64 %3
  %55 = fcmp ole float %45, 0xFFF0000000000000
  %maximum.6.i38 = select i1 %55, float 0xFFF0000000000000, float %45
  %56 = fcmp oge float %maximum.6.i38, %46
  %57 = fcmp uno float %maximum.6.i38, 0.000000e+00
  %58 = or i1 %57, %56
  %maximum.6.i38.1 = select i1 %58, float %maximum.6.i38, float %46
  %59 = getelementptr inbounds float, float addrspace(1)* %4, i64 12
  %60 = bitcast float addrspace(1)* %59 to <4 x float> addrspace(1)*
  %61 = load <4 x float>, <4 x float> addrspace(1)* %60, align 16, !invariant.load !26
  %62 = extractelement <4 x float> %61, i32 0
  %63 = extractelement <4 x float> %61, i32 1
  %64 = extractelement <4 x float> %61, i32 2
  %65 = extractelement <4 x float> %61, i32 3
  %66 = fcmp oge float %maximum.6.i38.1, %62
  %67 = fcmp uno float %maximum.6.i38.1, 0.000000e+00
  %68 = or i1 %67, %66
  %maximum.6.i38.2 = select i1 %68, float %maximum.6.i38.1, float %62
  %69 = fcmp oge float %maximum.6.i38.2, %63
  %70 = fcmp uno float %maximum.6.i38.2, 0.000000e+00
  %71 = or i1 %70, %69
  %maximum.6.i38.3 = select i1 %71, float %maximum.6.i38.2, float %63
  %72 = fcmp oge float %maximum.6.i38.3, %64
  %73 = fcmp uno float %maximum.6.i38.3, 0.000000e+00
  %74 = or i1 %73, %72
  %maximum.6.i38.4 = select i1 %74, float %maximum.6.i38.3, float %64
  %75 = fcmp oge float %maximum.6.i38.4, %65
  %76 = fcmp uno float %maximum.6.i38.4, 0.000000e+00
  %77 = or i1 %76, %75
  %maximum.6.i38.5 = select i1 %77, float %maximum.6.i38.4, float %65
  %78 = getelementptr inbounds float, float addrspace(1)* %4, i64 16
  %79 = bitcast float addrspace(1)* %78 to <4 x float> addrspace(1)*
  %80 = load <4 x float>, <4 x float> addrspace(1)* %79, align 32, !invariant.load !26
  %81 = extractelement <4 x float> %80, i32 0
  %82 = extractelement <4 x float> %80, i32 1
  %83 = extractelement <4 x float> %80, i32 2
  %84 = extractelement <4 x float> %80, i32 3
  %85 = fcmp oge float %maximum.6.i38.5, %81
  %86 = fcmp uno float %maximum.6.i38.5, 0.000000e+00
  %87 = or i1 %86, %85
  %maximum.6.i38.6 = select i1 %87, float %maximum.6.i38.5, float %81
  %88 = fcmp oge float %maximum.6.i38.6, %82
  %89 = fcmp uno float %maximum.6.i38.6, 0.000000e+00
  %90 = or i1 %89, %88
  %maximum.6.i38.7 = select i1 %90, float %maximum.6.i38.6, float %82
  %91 = fcmp oge float %maximum.6.i38.7, %83
  %92 = fcmp uno float %maximum.6.i38.7, 0.000000e+00
  %93 = or i1 %92, %91
  %maximum.6.i38.8 = select i1 %93, float %maximum.6.i38.7, float %83
  %94 = fcmp oge float %maximum.6.i38.8, %84
  %95 = fcmp uno float %maximum.6.i38.8, 0.000000e+00
  %96 = or i1 %95, %94
  %maximum.6.i38.9 = select i1 %96, float %maximum.6.i38.8, float %84
  %97 = getelementptr inbounds float, float addrspace(1)* %4, i64 20
  %98 = bitcast float addrspace(1)* %97 to <4 x float> addrspace(1)*
  %99 = load <4 x float>, <4 x float> addrspace(1)* %98, align 16, !invariant.load !26
  %100 = extractelement <4 x float> %99, i32 0
  %101 = extractelement <4 x float> %99, i32 1
  %102 = extractelement <4 x float> %99, i32 2
  %103 = extractelement <4 x float> %99, i32 3
  %104 = fcmp ole float %100, 0xFFF0000000000000
  %maximum.6.i37 = select i1 %104, float 0xFFF0000000000000, float %100
  %105 = fcmp oge float %maximum.6.i37, %101
  %106 = fcmp uno float %maximum.6.i37, 0.000000e+00
  %107 = or i1 %106, %105
  %maximum.6.i37.1 = select i1 %107, float %maximum.6.i37, float %101
  %108 = fcmp oge float %maximum.6.i37.1, %102
  %109 = fcmp uno float %maximum.6.i37.1, 0.000000e+00
  %110 = or i1 %109, %108
  %maximum.6.i37.2 = select i1 %110, float %maximum.6.i37.1, float %102
  %111 = fcmp oge float %maximum.6.i37.2, %103
  %112 = fcmp uno float %maximum.6.i37.2, 0.000000e+00
  %113 = or i1 %112, %111
  %maximum.6.i37.3 = select i1 %113, float %maximum.6.i37.2, float %103
  %114 = getelementptr inbounds float, float addrspace(1)* %4, i64 24
  %115 = bitcast float addrspace(1)* %114 to <4 x float> addrspace(1)*
  %116 = load <4 x float>, <4 x float> addrspace(1)* %115, align 32, !invariant.load !26
  %117 = extractelement <4 x float> %116, i32 0
  %118 = extractelement <4 x float> %116, i32 1
  %119 = extractelement <4 x float> %116, i32 2
  %120 = extractelement <4 x float> %116, i32 3
  %121 = fcmp oge float %maximum.6.i37.3, %117
  %122 = fcmp uno float %maximum.6.i37.3, 0.000000e+00
  %123 = or i1 %122, %121
  %maximum.6.i37.4 = select i1 %123, float %maximum.6.i37.3, float %117
  %124 = fcmp oge float %maximum.6.i37.4, %118
  %125 = fcmp uno float %maximum.6.i37.4, 0.000000e+00
  %126 = or i1 %125, %124
  %maximum.6.i37.5 = select i1 %126, float %maximum.6.i37.4, float %118
  %127 = fcmp oge float %maximum.6.i37.5, %119
  %128 = fcmp uno float %maximum.6.i37.5, 0.000000e+00
  %129 = or i1 %128, %127
  %maximum.6.i37.6 = select i1 %129, float %maximum.6.i37.5, float %119
  %130 = fcmp oge float %maximum.6.i37.6, %120
  %131 = fcmp uno float %maximum.6.i37.6, 0.000000e+00
  %132 = or i1 %131, %130
  %maximum.6.i37.7 = select i1 %132, float %maximum.6.i37.6, float %120
  %133 = getelementptr inbounds float, float addrspace(1)* %4, i64 28
  %134 = bitcast float addrspace(1)* %133 to <4 x float> addrspace(1)*
  %135 = load <4 x float>, <4 x float> addrspace(1)* %134, align 16, !invariant.load !26
  %136 = extractelement <4 x float> %135, i32 0
  %137 = extractelement <4 x float> %135, i32 1
  %138 = extractelement <4 x float> %135, i32 2
  %139 = extractelement <4 x float> %135, i32 3
  %140 = fcmp oge float %maximum.6.i37.7, %136
  %141 = fcmp uno float %maximum.6.i37.7, 0.000000e+00
  %142 = or i1 %141, %140
  %maximum.6.i37.8 = select i1 %142, float %maximum.6.i37.7, float %136
  %143 = fcmp oge float %maximum.6.i37.8, %137
  %144 = fcmp uno float %maximum.6.i37.8, 0.000000e+00
  %145 = or i1 %144, %143
  %maximum.6.i37.9 = select i1 %145, float %maximum.6.i37.8, float %137
  %146 = fcmp ole float %138, 0xFFF0000000000000
  %maximum.6.i36 = select i1 %146, float 0xFFF0000000000000, float %138
  %147 = fcmp oge float %maximum.6.i36, %139
  %148 = fcmp uno float %maximum.6.i36, 0.000000e+00
  %149 = or i1 %148, %147
  %maximum.6.i36.1 = select i1 %149, float %maximum.6.i36, float %139
  %150 = getelementptr inbounds float, float addrspace(1)* %4, i64 32
  %151 = bitcast float addrspace(1)* %150 to <4 x float> addrspace(1)*
  %152 = load <4 x float>, <4 x float> addrspace(1)* %151, align 32, !invariant.load !26
  %153 = extractelement <4 x float> %152, i32 0
  %154 = extractelement <4 x float> %152, i32 1
  %155 = extractelement <4 x float> %152, i32 2
  %156 = extractelement <4 x float> %152, i32 3
  %157 = fcmp oge float %maximum.6.i36.1, %153
  %158 = fcmp uno float %maximum.6.i36.1, 0.000000e+00
  %159 = or i1 %158, %157
  %maximum.6.i36.2 = select i1 %159, float %maximum.6.i36.1, float %153
  %160 = fcmp oge float %maximum.6.i36.2, %154
  %161 = fcmp uno float %maximum.6.i36.2, 0.000000e+00
  %162 = or i1 %161, %160
  %maximum.6.i36.3 = select i1 %162, float %maximum.6.i36.2, float %154
  %163 = fcmp oge float %maximum.6.i36.3, %155
  %164 = fcmp uno float %maximum.6.i36.3, 0.000000e+00
  %165 = or i1 %164, %163
  %maximum.6.i36.4 = select i1 %165, float %maximum.6.i36.3, float %155
  %166 = fcmp oge float %maximum.6.i36.4, %156
  %167 = fcmp uno float %maximum.6.i36.4, 0.000000e+00
  %168 = or i1 %167, %166
  %maximum.6.i36.5 = select i1 %168, float %maximum.6.i36.4, float %156
  %169 = getelementptr inbounds float, float addrspace(1)* %4, i64 36
  %170 = bitcast float addrspace(1)* %169 to <4 x float> addrspace(1)*
  %171 = load <4 x float>, <4 x float> addrspace(1)* %170, align 16, !invariant.load !26
  %172 = extractelement <4 x float> %171, i32 0
  %173 = extractelement <4 x float> %171, i32 1
  %174 = extractelement <4 x float> %171, i32 2
  %175 = extractelement <4 x float> %171, i32 3
  %176 = fcmp oge float %maximum.6.i36.5, %172
  %177 = fcmp uno float %maximum.6.i36.5, 0.000000e+00
  %178 = or i1 %177, %176
  %maximum.6.i36.6 = select i1 %178, float %maximum.6.i36.5, float %172
  %179 = fcmp oge float %maximum.6.i36.6, %173
  %180 = fcmp uno float %maximum.6.i36.6, 0.000000e+00
  %181 = or i1 %180, %179
  %maximum.6.i36.7 = select i1 %181, float %maximum.6.i36.6, float %173
  %182 = fcmp oge float %maximum.6.i36.7, %174
  %183 = fcmp uno float %maximum.6.i36.7, 0.000000e+00
  %184 = or i1 %183, %182
  %maximum.6.i36.8 = select i1 %184, float %maximum.6.i36.7, float %174
  %185 = fcmp oge float %maximum.6.i36.8, %175
  %186 = fcmp uno float %maximum.6.i36.8, 0.000000e+00
  %187 = or i1 %186, %185
  %maximum.6.i36.9 = select i1 %187, float %maximum.6.i36.8, float %175
  %188 = insertelement <4 x float> poison, float %maximum.6.i.9, i32 0
  %189 = insertelement <4 x float> %188, float %maximum.6.i38.9, i32 1
  %190 = insertelement <4 x float> %189, float %maximum.6.i37.9, i32 2
  %191 = insertelement <4 x float> %190, float %maximum.6.i36.9, i32 3
  %192 = bitcast float addrspace(1)* %54 to <4 x float> addrspace(1)*
  store <4 x float> %191, <4 x float> addrspace(1)* %192, align 16
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind
define void @fusion_1(i8* noalias nocapture align 128 dereferenceable(17808) %temp_buf) local_unnamed_addr #2 {
entry:
  %temp_buf65 = addrspacecast i8* %temp_buf to i8 addrspace(1)*
  %0 = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf65, i64 16384
  %1 = bitcast i8 addrspace(1)* %0 to [32 x [10 x float]] addrspace(1)*
  %2 = bitcast i8 addrspace(1)* %temp_buf65 to [32 x float] addrspace(1)*
  %3 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !24
  %linear_index_base = shl nuw nsw i32 %3, 2
  %4 = zext i32 %linear_index_base to i64
  %5 = getelementptr inbounds [32 x float], [32 x float] addrspace(1)* %2, i64 0, i64 %4
  %6 = bitcast float addrspace(1)* %5 to <4 x float> addrspace(1)*
  %7 = load <4 x float>, <4 x float> addrspace(1)* %6, align 16, !invariant.load !26
  %8 = extractelement <4 x float> %7, i32 0
  %9 = extractelement <4 x float> %7, i32 1
  %10 = extractelement <4 x float> %7, i32 2
  %11 = extractelement <4 x float> %7, i32 3
  %12 = getelementptr inbounds [32 x [10 x float]], [32 x [10 x float]] addrspace(1)* %1, i64 0, i64 %4, i64 0
  %13 = bitcast float addrspace(1)* %12 to <4 x float> addrspace(1)*
  %14 = load <4 x float>, <4 x float> addrspace(1)* %13, align 32, !invariant.load !26
  %15 = extractelement <4 x float> %14, i32 0
  %16 = extractelement <4 x float> %14, i32 1
  %17 = extractelement <4 x float> %14, i32 2
  %18 = extractelement <4 x float> %14, i32 3
  %subtract.4 = fsub float %15, %8
  %19 = tail call float @llvm.fma.f32(float %subtract.4, float 0x3F777313A0000000, float 5.000000e-01) #3
  %20 = tail call float @llvm.nvvm.saturate.f(float %19) #3
  %21 = tail call float @llvm.nvvm.fma.rm.f(float %20, float 2.520000e+02, float 0x4168000020000000) #3
  %22 = fadd float %21, 0xC168000FE0000000
  %23 = fneg float %22
  %24 = tail call float @llvm.fma.f32(float %subtract.4, float 0x3FF7154760000000, float %23) #3
  %25 = tail call float @llvm.fma.f32(float %subtract.4, float 0x3E54AE0C00000000, float %24) #3
  %26 = bitcast float %21 to i32
  %27 = shl i32 %26, 23
  %28 = bitcast i32 %27 to float
  %29 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %25) #3
  %30 = fmul float %29, %28
  %add.10.i56 = fadd float %30, 0.000000e+00
  %subtract.4.1 = fsub float %16, %8
  %31 = tail call float @llvm.fma.f32(float %subtract.4.1, float 0x3F777313A0000000, float 5.000000e-01) #3
  %32 = tail call float @llvm.nvvm.saturate.f(float %31) #3
  %33 = tail call float @llvm.nvvm.fma.rm.f(float %32, float 2.520000e+02, float 0x4168000020000000) #3
  %34 = fadd float %33, 0xC168000FE0000000
  %35 = fneg float %34
  %36 = tail call float @llvm.fma.f32(float %subtract.4.1, float 0x3FF7154760000000, float %35) #3
  %37 = tail call float @llvm.fma.f32(float %subtract.4.1, float 0x3E54AE0C00000000, float %36) #3
  %38 = bitcast float %33 to i32
  %39 = shl i32 %38, 23
  %40 = bitcast i32 %39 to float
  %41 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %37) #3
  %42 = fmul float %41, %40
  %add.10.i56.1 = fadd float %add.10.i56, %42
  %subtract.4.2 = fsub float %17, %8
  %43 = tail call float @llvm.fma.f32(float %subtract.4.2, float 0x3F777313A0000000, float 5.000000e-01) #3
  %44 = tail call float @llvm.nvvm.saturate.f(float %43) #3
  %45 = tail call float @llvm.nvvm.fma.rm.f(float %44, float 2.520000e+02, float 0x4168000020000000) #3
  %46 = fadd float %45, 0xC168000FE0000000
  %47 = fneg float %46
  %48 = tail call float @llvm.fma.f32(float %subtract.4.2, float 0x3FF7154760000000, float %47) #3
  %49 = tail call float @llvm.fma.f32(float %subtract.4.2, float 0x3E54AE0C00000000, float %48) #3
  %50 = bitcast float %45 to i32
  %51 = shl i32 %50, 23
  %52 = bitcast i32 %51 to float
  %53 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %49) #3
  %54 = fmul float %53, %52
  %add.10.i56.2 = fadd float %add.10.i56.1, %54
  %subtract.4.3 = fsub float %18, %8
  %55 = tail call float @llvm.fma.f32(float %subtract.4.3, float 0x3F777313A0000000, float 5.000000e-01) #3
  %56 = tail call float @llvm.nvvm.saturate.f(float %55) #3
  %57 = tail call float @llvm.nvvm.fma.rm.f(float %56, float 2.520000e+02, float 0x4168000020000000) #3
  %58 = fadd float %57, 0xC168000FE0000000
  %59 = fneg float %58
  %60 = tail call float @llvm.fma.f32(float %subtract.4.3, float 0x3FF7154760000000, float %59) #3
  %61 = tail call float @llvm.fma.f32(float %subtract.4.3, float 0x3E54AE0C00000000, float %60) #3
  %62 = bitcast float %57 to i32
  %63 = shl i32 %62, 23
  %64 = bitcast i32 %63 to float
  %65 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %61) #3
  %66 = fmul float %65, %64
  %add.10.i56.3 = fadd float %add.10.i56.2, %66
  %67 = getelementptr inbounds float, float addrspace(1)* %12, i64 4
  %68 = bitcast float addrspace(1)* %67 to <4 x float> addrspace(1)*
  %69 = load <4 x float>, <4 x float> addrspace(1)* %68, align 16, !invariant.load !26
  %70 = extractelement <4 x float> %69, i32 0
  %71 = extractelement <4 x float> %69, i32 1
  %72 = extractelement <4 x float> %69, i32 2
  %73 = extractelement <4 x float> %69, i32 3
  %subtract.4.4 = fsub float %70, %8
  %74 = tail call float @llvm.fma.f32(float %subtract.4.4, float 0x3F777313A0000000, float 5.000000e-01) #3
  %75 = tail call float @llvm.nvvm.saturate.f(float %74) #3
  %76 = tail call float @llvm.nvvm.fma.rm.f(float %75, float 2.520000e+02, float 0x4168000020000000) #3
  %77 = fadd float %76, 0xC168000FE0000000
  %78 = fneg float %77
  %79 = tail call float @llvm.fma.f32(float %subtract.4.4, float 0x3FF7154760000000, float %78) #3
  %80 = tail call float @llvm.fma.f32(float %subtract.4.4, float 0x3E54AE0C00000000, float %79) #3
  %81 = bitcast float %76 to i32
  %82 = shl i32 %81, 23
  %83 = bitcast i32 %82 to float
  %84 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %80) #3
  %85 = fmul float %84, %83
  %add.10.i56.4 = fadd float %add.10.i56.3, %85
  %subtract.4.5 = fsub float %71, %8
  %86 = tail call float @llvm.fma.f32(float %subtract.4.5, float 0x3F777313A0000000, float 5.000000e-01) #3
  %87 = tail call float @llvm.nvvm.saturate.f(float %86) #3
  %88 = tail call float @llvm.nvvm.fma.rm.f(float %87, float 2.520000e+02, float 0x4168000020000000) #3
  %89 = fadd float %88, 0xC168000FE0000000
  %90 = fneg float %89
  %91 = tail call float @llvm.fma.f32(float %subtract.4.5, float 0x3FF7154760000000, float %90) #3
  %92 = tail call float @llvm.fma.f32(float %subtract.4.5, float 0x3E54AE0C00000000, float %91) #3
  %93 = bitcast float %88 to i32
  %94 = shl i32 %93, 23
  %95 = bitcast i32 %94 to float
  %96 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %92) #3
  %97 = fmul float %96, %95
  %add.10.i56.5 = fadd float %add.10.i56.4, %97
  %subtract.4.6 = fsub float %72, %8
  %98 = tail call float @llvm.fma.f32(float %subtract.4.6, float 0x3F777313A0000000, float 5.000000e-01) #3
  %99 = tail call float @llvm.nvvm.saturate.f(float %98) #3
  %100 = tail call float @llvm.nvvm.fma.rm.f(float %99, float 2.520000e+02, float 0x4168000020000000) #3
  %101 = fadd float %100, 0xC168000FE0000000
  %102 = fneg float %101
  %103 = tail call float @llvm.fma.f32(float %subtract.4.6, float 0x3FF7154760000000, float %102) #3
  %104 = tail call float @llvm.fma.f32(float %subtract.4.6, float 0x3E54AE0C00000000, float %103) #3
  %105 = bitcast float %100 to i32
  %106 = shl i32 %105, 23
  %107 = bitcast i32 %106 to float
  %108 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %104) #3
  %109 = fmul float %108, %107
  %add.10.i56.6 = fadd float %add.10.i56.5, %109
  %subtract.4.7 = fsub float %73, %8
  %110 = tail call float @llvm.fma.f32(float %subtract.4.7, float 0x3F777313A0000000, float 5.000000e-01) #3
  %111 = tail call float @llvm.nvvm.saturate.f(float %110) #3
  %112 = tail call float @llvm.nvvm.fma.rm.f(float %111, float 2.520000e+02, float 0x4168000020000000) #3
  %113 = fadd float %112, 0xC168000FE0000000
  %114 = fneg float %113
  %115 = tail call float @llvm.fma.f32(float %subtract.4.7, float 0x3FF7154760000000, float %114) #3
  %116 = tail call float @llvm.fma.f32(float %subtract.4.7, float 0x3E54AE0C00000000, float %115) #3
  %117 = bitcast float %112 to i32
  %118 = shl i32 %117, 23
  %119 = bitcast i32 %118 to float
  %120 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %116) #3
  %121 = fmul float %120, %119
  %add.10.i56.7 = fadd float %add.10.i56.6, %121
  %122 = getelementptr inbounds float, float addrspace(1)* %12, i64 8
  %123 = bitcast float addrspace(1)* %122 to <4 x float> addrspace(1)*
  %124 = load <4 x float>, <4 x float> addrspace(1)* %123, align 32, !invariant.load !26
  %125 = extractelement <4 x float> %124, i32 0
  %126 = extractelement <4 x float> %124, i32 1
  %127 = extractelement <4 x float> %124, i32 2
  %128 = extractelement <4 x float> %124, i32 3
  %subtract.4.8 = fsub float %125, %8
  %129 = tail call float @llvm.fma.f32(float %subtract.4.8, float 0x3F777313A0000000, float 5.000000e-01) #3
  %130 = tail call float @llvm.nvvm.saturate.f(float %129) #3
  %131 = tail call float @llvm.nvvm.fma.rm.f(float %130, float 2.520000e+02, float 0x4168000020000000) #3
  %132 = fadd float %131, 0xC168000FE0000000
  %133 = fneg float %132
  %134 = tail call float @llvm.fma.f32(float %subtract.4.8, float 0x3FF7154760000000, float %133) #3
  %135 = tail call float @llvm.fma.f32(float %subtract.4.8, float 0x3E54AE0C00000000, float %134) #3
  %136 = bitcast float %131 to i32
  %137 = shl i32 %136, 23
  %138 = bitcast i32 %137 to float
  %139 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %135) #3
  %140 = fmul float %139, %138
  %add.10.i56.8 = fadd float %add.10.i56.7, %140
  %subtract.4.9 = fsub float %126, %8
  %141 = tail call float @llvm.fma.f32(float %subtract.4.9, float 0x3F777313A0000000, float 5.000000e-01) #3
  %142 = tail call float @llvm.nvvm.saturate.f(float %141) #3
  %143 = tail call float @llvm.nvvm.fma.rm.f(float %142, float 2.520000e+02, float 0x4168000020000000) #3
  %144 = fadd float %143, 0xC168000FE0000000
  %145 = fneg float %144
  %146 = tail call float @llvm.fma.f32(float %subtract.4.9, float 0x3FF7154760000000, float %145) #3
  %147 = tail call float @llvm.fma.f32(float %subtract.4.9, float 0x3E54AE0C00000000, float %146) #3
  %148 = bitcast float %143 to i32
  %149 = shl i32 %148, 23
  %150 = bitcast i32 %149 to float
  %151 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %147) #3
  %152 = fmul float %151, %150
  %add.10.i56.9 = fadd float %add.10.i56.8, %152
  %153 = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf65, i64 128
  %154 = fcmp olt float %add.10.i56.9, 0x3810000000000000
  %155 = fmul float %add.10.i56.9, 0x4160000000000000
  %.02.i52 = select i1 %154, float %155, float %add.10.i56.9
  %i.i.0.i53 = select i1 %154, float -2.300000e+01, float 0.000000e+00
  %156 = bitcast float %.02.i52 to i32
  %157 = add nsw i32 %156, -1059760811
  %158 = and i32 %157, -8388608
  %159 = sub nsw i32 %156, %158
  %160 = bitcast i32 %159 to float
  %161 = sitofp i32 %158 to float
  %162 = tail call float @llvm.fma.f32(float %161, float 0x3E80000000000000, float %i.i.0.i53) #3
  %163 = fadd float %160, -1.000000e+00
  %164 = tail call float @llvm.fma.f32(float %163, float 0xBFC0AA04E0000000, float 0x3FC2073EC0000000) #3
  %165 = tail call float @llvm.fma.f32(float %164, float %163, float 0xBFBF19B980000000) #3
  %166 = tail call float @llvm.fma.f32(float %165, float %163, float 0x3FC1E52AA0000000) #3
  %167 = tail call float @llvm.fma.f32(float %166, float %163, float 0xBFC55B1720000000) #3
  %168 = tail call float @llvm.fma.f32(float %167, float %163, float 0x3FC99DA160000000) #3
  %169 = tail call float @llvm.fma.f32(float %168, float %163, float 0xBFCFFFE440000000) #3
  %170 = tail call float @llvm.fma.f32(float %169, float %163, float 0x3FD5554F00000000) #3
  %171 = tail call float @llvm.fma.f32(float %170, float %163, float -5.000000e-01) #3
  %172 = fmul float %163, %171
  %173 = tail call float @llvm.fma.f32(float %172, float %163, float %163) #3
  %174 = tail call float @llvm.fma.f32(float %162, float 0x3FE62E4300000000, float %173) #3
  %175 = icmp ugt i32 %156, 2139095039
  %176 = tail call float @llvm.fma.f32(float %.02.i52, float 0x7FF0000000000000, float 0x7FF0000000000000) #3
  %spec.select.i54 = select i1 %175, float %176, float %174
  %177 = fcmp oeq float %.02.i52, 0.000000e+00
  %r.i.1.i55 = select i1 %177, float 0xFFF0000000000000, float %spec.select.i54
  %178 = bitcast i8 addrspace(1)* %153 to float addrspace(1)*
  %179 = getelementptr float, float addrspace(1)* %178, i64 %4
  %subtract.410 = fsub float %127, %9
  %180 = tail call float @llvm.fma.f32(float %subtract.410, float 0x3F777313A0000000, float 5.000000e-01) #3
  %181 = tail call float @llvm.nvvm.saturate.f(float %180) #3
  %182 = tail call float @llvm.nvvm.fma.rm.f(float %181, float 2.520000e+02, float 0x4168000020000000) #3
  %183 = fadd float %182, 0xC168000FE0000000
  %184 = fneg float %183
  %185 = tail call float @llvm.fma.f32(float %subtract.410, float 0x3FF7154760000000, float %184) #3
  %186 = tail call float @llvm.fma.f32(float %subtract.410, float 0x3E54AE0C00000000, float %185) #3
  %187 = bitcast float %182 to i32
  %188 = shl i32 %187, 23
  %189 = bitcast i32 %188 to float
  %190 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %186) #3
  %191 = fmul float %190, %189
  %add.10.i51 = fadd float %191, 0.000000e+00
  %subtract.410.1 = fsub float %128, %9
  %192 = tail call float @llvm.fma.f32(float %subtract.410.1, float 0x3F777313A0000000, float 5.000000e-01) #3
  %193 = tail call float @llvm.nvvm.saturate.f(float %192) #3
  %194 = tail call float @llvm.nvvm.fma.rm.f(float %193, float 2.520000e+02, float 0x4168000020000000) #3
  %195 = fadd float %194, 0xC168000FE0000000
  %196 = fneg float %195
  %197 = tail call float @llvm.fma.f32(float %subtract.410.1, float 0x3FF7154760000000, float %196) #3
  %198 = tail call float @llvm.fma.f32(float %subtract.410.1, float 0x3E54AE0C00000000, float %197) #3
  %199 = bitcast float %194 to i32
  %200 = shl i32 %199, 23
  %201 = bitcast i32 %200 to float
  %202 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %198) #3
  %203 = fmul float %202, %201
  %add.10.i51.1 = fadd float %add.10.i51, %203
  %204 = getelementptr inbounds float, float addrspace(1)* %12, i64 12
  %205 = bitcast float addrspace(1)* %204 to <4 x float> addrspace(1)*
  %206 = load <4 x float>, <4 x float> addrspace(1)* %205, align 16, !invariant.load !26
  %207 = extractelement <4 x float> %206, i32 0
  %208 = extractelement <4 x float> %206, i32 1
  %209 = extractelement <4 x float> %206, i32 2
  %210 = extractelement <4 x float> %206, i32 3
  %subtract.410.2 = fsub float %207, %9
  %211 = tail call float @llvm.fma.f32(float %subtract.410.2, float 0x3F777313A0000000, float 5.000000e-01) #3
  %212 = tail call float @llvm.nvvm.saturate.f(float %211) #3
  %213 = tail call float @llvm.nvvm.fma.rm.f(float %212, float 2.520000e+02, float 0x4168000020000000) #3
  %214 = fadd float %213, 0xC168000FE0000000
  %215 = fneg float %214
  %216 = tail call float @llvm.fma.f32(float %subtract.410.2, float 0x3FF7154760000000, float %215) #3
  %217 = tail call float @llvm.fma.f32(float %subtract.410.2, float 0x3E54AE0C00000000, float %216) #3
  %218 = bitcast float %213 to i32
  %219 = shl i32 %218, 23
  %220 = bitcast i32 %219 to float
  %221 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %217) #3
  %222 = fmul float %221, %220
  %add.10.i51.2 = fadd float %add.10.i51.1, %222
  %subtract.410.3 = fsub float %208, %9
  %223 = tail call float @llvm.fma.f32(float %subtract.410.3, float 0x3F777313A0000000, float 5.000000e-01) #3
  %224 = tail call float @llvm.nvvm.saturate.f(float %223) #3
  %225 = tail call float @llvm.nvvm.fma.rm.f(float %224, float 2.520000e+02, float 0x4168000020000000) #3
  %226 = fadd float %225, 0xC168000FE0000000
  %227 = fneg float %226
  %228 = tail call float @llvm.fma.f32(float %subtract.410.3, float 0x3FF7154760000000, float %227) #3
  %229 = tail call float @llvm.fma.f32(float %subtract.410.3, float 0x3E54AE0C00000000, float %228) #3
  %230 = bitcast float %225 to i32
  %231 = shl i32 %230, 23
  %232 = bitcast i32 %231 to float
  %233 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %229) #3
  %234 = fmul float %233, %232
  %add.10.i51.3 = fadd float %add.10.i51.2, %234
  %subtract.410.4 = fsub float %209, %9
  %235 = tail call float @llvm.fma.f32(float %subtract.410.4, float 0x3F777313A0000000, float 5.000000e-01) #3
  %236 = tail call float @llvm.nvvm.saturate.f(float %235) #3
  %237 = tail call float @llvm.nvvm.fma.rm.f(float %236, float 2.520000e+02, float 0x4168000020000000) #3
  %238 = fadd float %237, 0xC168000FE0000000
  %239 = fneg float %238
  %240 = tail call float @llvm.fma.f32(float %subtract.410.4, float 0x3FF7154760000000, float %239) #3
  %241 = tail call float @llvm.fma.f32(float %subtract.410.4, float 0x3E54AE0C00000000, float %240) #3
  %242 = bitcast float %237 to i32
  %243 = shl i32 %242, 23
  %244 = bitcast i32 %243 to float
  %245 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %241) #3
  %246 = fmul float %245, %244
  %add.10.i51.4 = fadd float %add.10.i51.3, %246
  %subtract.410.5 = fsub float %210, %9
  %247 = tail call float @llvm.fma.f32(float %subtract.410.5, float 0x3F777313A0000000, float 5.000000e-01) #3
  %248 = tail call float @llvm.nvvm.saturate.f(float %247) #3
  %249 = tail call float @llvm.nvvm.fma.rm.f(float %248, float 2.520000e+02, float 0x4168000020000000) #3
  %250 = fadd float %249, 0xC168000FE0000000
  %251 = fneg float %250
  %252 = tail call float @llvm.fma.f32(float %subtract.410.5, float 0x3FF7154760000000, float %251) #3
  %253 = tail call float @llvm.fma.f32(float %subtract.410.5, float 0x3E54AE0C00000000, float %252) #3
  %254 = bitcast float %249 to i32
  %255 = shl i32 %254, 23
  %256 = bitcast i32 %255 to float
  %257 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %253) #3
  %258 = fmul float %257, %256
  %add.10.i51.5 = fadd float %add.10.i51.4, %258
  %259 = getelementptr inbounds float, float addrspace(1)* %12, i64 16
  %260 = bitcast float addrspace(1)* %259 to <4 x float> addrspace(1)*
  %261 = load <4 x float>, <4 x float> addrspace(1)* %260, align 32, !invariant.load !26
  %262 = extractelement <4 x float> %261, i32 0
  %263 = extractelement <4 x float> %261, i32 1
  %264 = extractelement <4 x float> %261, i32 2
  %265 = extractelement <4 x float> %261, i32 3
  %subtract.410.6 = fsub float %262, %9
  %266 = tail call float @llvm.fma.f32(float %subtract.410.6, float 0x3F777313A0000000, float 5.000000e-01) #3
  %267 = tail call float @llvm.nvvm.saturate.f(float %266) #3
  %268 = tail call float @llvm.nvvm.fma.rm.f(float %267, float 2.520000e+02, float 0x4168000020000000) #3
  %269 = fadd float %268, 0xC168000FE0000000
  %270 = fneg float %269
  %271 = tail call float @llvm.fma.f32(float %subtract.410.6, float 0x3FF7154760000000, float %270) #3
  %272 = tail call float @llvm.fma.f32(float %subtract.410.6, float 0x3E54AE0C00000000, float %271) #3
  %273 = bitcast float %268 to i32
  %274 = shl i32 %273, 23
  %275 = bitcast i32 %274 to float
  %276 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %272) #3
  %277 = fmul float %276, %275
  %add.10.i51.6 = fadd float %add.10.i51.5, %277
  %subtract.410.7 = fsub float %263, %9
  %278 = tail call float @llvm.fma.f32(float %subtract.410.7, float 0x3F777313A0000000, float 5.000000e-01) #3
  %279 = tail call float @llvm.nvvm.saturate.f(float %278) #3
  %280 = tail call float @llvm.nvvm.fma.rm.f(float %279, float 2.520000e+02, float 0x4168000020000000) #3
  %281 = fadd float %280, 0xC168000FE0000000
  %282 = fneg float %281
  %283 = tail call float @llvm.fma.f32(float %subtract.410.7, float 0x3FF7154760000000, float %282) #3
  %284 = tail call float @llvm.fma.f32(float %subtract.410.7, float 0x3E54AE0C00000000, float %283) #3
  %285 = bitcast float %280 to i32
  %286 = shl i32 %285, 23
  %287 = bitcast i32 %286 to float
  %288 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %284) #3
  %289 = fmul float %288, %287
  %add.10.i51.7 = fadd float %add.10.i51.6, %289
  %subtract.410.8 = fsub float %264, %9
  %290 = tail call float @llvm.fma.f32(float %subtract.410.8, float 0x3F777313A0000000, float 5.000000e-01) #3
  %291 = tail call float @llvm.nvvm.saturate.f(float %290) #3
  %292 = tail call float @llvm.nvvm.fma.rm.f(float %291, float 2.520000e+02, float 0x4168000020000000) #3
  %293 = fadd float %292, 0xC168000FE0000000
  %294 = fneg float %293
  %295 = tail call float @llvm.fma.f32(float %subtract.410.8, float 0x3FF7154760000000, float %294) #3
  %296 = tail call float @llvm.fma.f32(float %subtract.410.8, float 0x3E54AE0C00000000, float %295) #3
  %297 = bitcast float %292 to i32
  %298 = shl i32 %297, 23
  %299 = bitcast i32 %298 to float
  %300 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %296) #3
  %301 = fmul float %300, %299
  %add.10.i51.8 = fadd float %add.10.i51.7, %301
  %subtract.410.9 = fsub float %265, %9
  %302 = tail call float @llvm.fma.f32(float %subtract.410.9, float 0x3F777313A0000000, float 5.000000e-01) #3
  %303 = tail call float @llvm.nvvm.saturate.f(float %302) #3
  %304 = tail call float @llvm.nvvm.fma.rm.f(float %303, float 2.520000e+02, float 0x4168000020000000) #3
  %305 = fadd float %304, 0xC168000FE0000000
  %306 = fneg float %305
  %307 = tail call float @llvm.fma.f32(float %subtract.410.9, float 0x3FF7154760000000, float %306) #3
  %308 = tail call float @llvm.fma.f32(float %subtract.410.9, float 0x3E54AE0C00000000, float %307) #3
  %309 = bitcast float %304 to i32
  %310 = shl i32 %309, 23
  %311 = bitcast i32 %310 to float
  %312 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %308) #3
  %313 = fmul float %312, %311
  %add.10.i51.9 = fadd float %add.10.i51.8, %313
  %314 = fcmp olt float %add.10.i51.9, 0x3810000000000000
  %315 = fmul float %add.10.i51.9, 0x4160000000000000
  %.02.i47 = select i1 %314, float %315, float %add.10.i51.9
  %i.i.0.i48 = select i1 %314, float -2.300000e+01, float 0.000000e+00
  %316 = bitcast float %.02.i47 to i32
  %317 = add nsw i32 %316, -1059760811
  %318 = and i32 %317, -8388608
  %319 = sub nsw i32 %316, %318
  %320 = bitcast i32 %319 to float
  %321 = sitofp i32 %318 to float
  %322 = tail call float @llvm.fma.f32(float %321, float 0x3E80000000000000, float %i.i.0.i48) #3
  %323 = fadd float %320, -1.000000e+00
  %324 = tail call float @llvm.fma.f32(float %323, float 0xBFC0AA04E0000000, float 0x3FC2073EC0000000) #3
  %325 = tail call float @llvm.fma.f32(float %324, float %323, float 0xBFBF19B980000000) #3
  %326 = tail call float @llvm.fma.f32(float %325, float %323, float 0x3FC1E52AA0000000) #3
  %327 = tail call float @llvm.fma.f32(float %326, float %323, float 0xBFC55B1720000000) #3
  %328 = tail call float @llvm.fma.f32(float %327, float %323, float 0x3FC99DA160000000) #3
  %329 = tail call float @llvm.fma.f32(float %328, float %323, float 0xBFCFFFE440000000) #3
  %330 = tail call float @llvm.fma.f32(float %329, float %323, float 0x3FD5554F00000000) #3
  %331 = tail call float @llvm.fma.f32(float %330, float %323, float -5.000000e-01) #3
  %332 = fmul float %323, %331
  %333 = tail call float @llvm.fma.f32(float %332, float %323, float %323) #3
  %334 = tail call float @llvm.fma.f32(float %322, float 0x3FE62E4300000000, float %333) #3
  %335 = icmp ugt i32 %316, 2139095039
  %336 = tail call float @llvm.fma.f32(float %.02.i47, float 0x7FF0000000000000, float 0x7FF0000000000000) #3
  %spec.select.i49 = select i1 %335, float %336, float %334
  %337 = fcmp oeq float %.02.i47, 0.000000e+00
  %r.i.1.i50 = select i1 %337, float 0xFFF0000000000000, float %spec.select.i49
  %338 = getelementptr inbounds float, float addrspace(1)* %12, i64 20
  %339 = bitcast float addrspace(1)* %338 to <4 x float> addrspace(1)*
  %340 = load <4 x float>, <4 x float> addrspace(1)* %339, align 16, !invariant.load !26
  %341 = extractelement <4 x float> %340, i32 0
  %342 = extractelement <4 x float> %340, i32 1
  %343 = extractelement <4 x float> %340, i32 2
  %344 = extractelement <4 x float> %340, i32 3
  %subtract.422 = fsub float %341, %10
  %345 = tail call float @llvm.fma.f32(float %subtract.422, float 0x3F777313A0000000, float 5.000000e-01) #3
  %346 = tail call float @llvm.nvvm.saturate.f(float %345) #3
  %347 = tail call float @llvm.nvvm.fma.rm.f(float %346, float 2.520000e+02, float 0x4168000020000000) #3
  %348 = fadd float %347, 0xC168000FE0000000
  %349 = fneg float %348
  %350 = tail call float @llvm.fma.f32(float %subtract.422, float 0x3FF7154760000000, float %349) #3
  %351 = tail call float @llvm.fma.f32(float %subtract.422, float 0x3E54AE0C00000000, float %350) #3
  %352 = bitcast float %347 to i32
  %353 = shl i32 %352, 23
  %354 = bitcast i32 %353 to float
  %355 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %351) #3
  %356 = fmul float %355, %354
  %add.10.i46 = fadd float %356, 0.000000e+00
  %subtract.422.1 = fsub float %342, %10
  %357 = tail call float @llvm.fma.f32(float %subtract.422.1, float 0x3F777313A0000000, float 5.000000e-01) #3
  %358 = tail call float @llvm.nvvm.saturate.f(float %357) #3
  %359 = tail call float @llvm.nvvm.fma.rm.f(float %358, float 2.520000e+02, float 0x4168000020000000) #3
  %360 = fadd float %359, 0xC168000FE0000000
  %361 = fneg float %360
  %362 = tail call float @llvm.fma.f32(float %subtract.422.1, float 0x3FF7154760000000, float %361) #3
  %363 = tail call float @llvm.fma.f32(float %subtract.422.1, float 0x3E54AE0C00000000, float %362) #3
  %364 = bitcast float %359 to i32
  %365 = shl i32 %364, 23
  %366 = bitcast i32 %365 to float
  %367 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %363) #3
  %368 = fmul float %367, %366
  %add.10.i46.1 = fadd float %add.10.i46, %368
  %subtract.422.2 = fsub float %343, %10
  %369 = tail call float @llvm.fma.f32(float %subtract.422.2, float 0x3F777313A0000000, float 5.000000e-01) #3
  %370 = tail call float @llvm.nvvm.saturate.f(float %369) #3
  %371 = tail call float @llvm.nvvm.fma.rm.f(float %370, float 2.520000e+02, float 0x4168000020000000) #3
  %372 = fadd float %371, 0xC168000FE0000000
  %373 = fneg float %372
  %374 = tail call float @llvm.fma.f32(float %subtract.422.2, float 0x3FF7154760000000, float %373) #3
  %375 = tail call float @llvm.fma.f32(float %subtract.422.2, float 0x3E54AE0C00000000, float %374) #3
  %376 = bitcast float %371 to i32
  %377 = shl i32 %376, 23
  %378 = bitcast i32 %377 to float
  %379 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %375) #3
  %380 = fmul float %379, %378
  %add.10.i46.2 = fadd float %add.10.i46.1, %380
  %subtract.422.3 = fsub float %344, %10
  %381 = tail call float @llvm.fma.f32(float %subtract.422.3, float 0x3F777313A0000000, float 5.000000e-01) #3
  %382 = tail call float @llvm.nvvm.saturate.f(float %381) #3
  %383 = tail call float @llvm.nvvm.fma.rm.f(float %382, float 2.520000e+02, float 0x4168000020000000) #3
  %384 = fadd float %383, 0xC168000FE0000000
  %385 = fneg float %384
  %386 = tail call float @llvm.fma.f32(float %subtract.422.3, float 0x3FF7154760000000, float %385) #3
  %387 = tail call float @llvm.fma.f32(float %subtract.422.3, float 0x3E54AE0C00000000, float %386) #3
  %388 = bitcast float %383 to i32
  %389 = shl i32 %388, 23
  %390 = bitcast i32 %389 to float
  %391 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %387) #3
  %392 = fmul float %391, %390
  %add.10.i46.3 = fadd float %add.10.i46.2, %392
  %393 = getelementptr inbounds float, float addrspace(1)* %12, i64 24
  %394 = bitcast float addrspace(1)* %393 to <4 x float> addrspace(1)*
  %395 = load <4 x float>, <4 x float> addrspace(1)* %394, align 32, !invariant.load !26
  %396 = extractelement <4 x float> %395, i32 0
  %397 = extractelement <4 x float> %395, i32 1
  %398 = extractelement <4 x float> %395, i32 2
  %399 = extractelement <4 x float> %395, i32 3
  %subtract.422.4 = fsub float %396, %10
  %400 = tail call float @llvm.fma.f32(float %subtract.422.4, float 0x3F777313A0000000, float 5.000000e-01) #3
  %401 = tail call float @llvm.nvvm.saturate.f(float %400) #3
  %402 = tail call float @llvm.nvvm.fma.rm.f(float %401, float 2.520000e+02, float 0x4168000020000000) #3
  %403 = fadd float %402, 0xC168000FE0000000
  %404 = fneg float %403
  %405 = tail call float @llvm.fma.f32(float %subtract.422.4, float 0x3FF7154760000000, float %404) #3
  %406 = tail call float @llvm.fma.f32(float %subtract.422.4, float 0x3E54AE0C00000000, float %405) #3
  %407 = bitcast float %402 to i32
  %408 = shl i32 %407, 23
  %409 = bitcast i32 %408 to float
  %410 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %406) #3
  %411 = fmul float %410, %409
  %add.10.i46.4 = fadd float %add.10.i46.3, %411
  %subtract.422.5 = fsub float %397, %10
  %412 = tail call float @llvm.fma.f32(float %subtract.422.5, float 0x3F777313A0000000, float 5.000000e-01) #3
  %413 = tail call float @llvm.nvvm.saturate.f(float %412) #3
  %414 = tail call float @llvm.nvvm.fma.rm.f(float %413, float 2.520000e+02, float 0x4168000020000000) #3
  %415 = fadd float %414, 0xC168000FE0000000
  %416 = fneg float %415
  %417 = tail call float @llvm.fma.f32(float %subtract.422.5, float 0x3FF7154760000000, float %416) #3
  %418 = tail call float @llvm.fma.f32(float %subtract.422.5, float 0x3E54AE0C00000000, float %417) #3
  %419 = bitcast float %414 to i32
  %420 = shl i32 %419, 23
  %421 = bitcast i32 %420 to float
  %422 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %418) #3
  %423 = fmul float %422, %421
  %add.10.i46.5 = fadd float %add.10.i46.4, %423
  %subtract.422.6 = fsub float %398, %10
  %424 = tail call float @llvm.fma.f32(float %subtract.422.6, float 0x3F777313A0000000, float 5.000000e-01) #3
  %425 = tail call float @llvm.nvvm.saturate.f(float %424) #3
  %426 = tail call float @llvm.nvvm.fma.rm.f(float %425, float 2.520000e+02, float 0x4168000020000000) #3
  %427 = fadd float %426, 0xC168000FE0000000
  %428 = fneg float %427
  %429 = tail call float @llvm.fma.f32(float %subtract.422.6, float 0x3FF7154760000000, float %428) #3
  %430 = tail call float @llvm.fma.f32(float %subtract.422.6, float 0x3E54AE0C00000000, float %429) #3
  %431 = bitcast float %426 to i32
  %432 = shl i32 %431, 23
  %433 = bitcast i32 %432 to float
  %434 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %430) #3
  %435 = fmul float %434, %433
  %add.10.i46.6 = fadd float %add.10.i46.5, %435
  %subtract.422.7 = fsub float %399, %10
  %436 = tail call float @llvm.fma.f32(float %subtract.422.7, float 0x3F777313A0000000, float 5.000000e-01) #3
  %437 = tail call float @llvm.nvvm.saturate.f(float %436) #3
  %438 = tail call float @llvm.nvvm.fma.rm.f(float %437, float 2.520000e+02, float 0x4168000020000000) #3
  %439 = fadd float %438, 0xC168000FE0000000
  %440 = fneg float %439
  %441 = tail call float @llvm.fma.f32(float %subtract.422.7, float 0x3FF7154760000000, float %440) #3
  %442 = tail call float @llvm.fma.f32(float %subtract.422.7, float 0x3E54AE0C00000000, float %441) #3
  %443 = bitcast float %438 to i32
  %444 = shl i32 %443, 23
  %445 = bitcast i32 %444 to float
  %446 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %442) #3
  %447 = fmul float %446, %445
  %add.10.i46.7 = fadd float %add.10.i46.6, %447
  %448 = getelementptr inbounds float, float addrspace(1)* %12, i64 28
  %449 = bitcast float addrspace(1)* %448 to <4 x float> addrspace(1)*
  %450 = load <4 x float>, <4 x float> addrspace(1)* %449, align 16, !invariant.load !26
  %451 = extractelement <4 x float> %450, i32 0
  %452 = extractelement <4 x float> %450, i32 1
  %453 = extractelement <4 x float> %450, i32 2
  %454 = extractelement <4 x float> %450, i32 3
  %subtract.422.8 = fsub float %451, %10
  %455 = tail call float @llvm.fma.f32(float %subtract.422.8, float 0x3F777313A0000000, float 5.000000e-01) #3
  %456 = tail call float @llvm.nvvm.saturate.f(float %455) #3
  %457 = tail call float @llvm.nvvm.fma.rm.f(float %456, float 2.520000e+02, float 0x4168000020000000) #3
  %458 = fadd float %457, 0xC168000FE0000000
  %459 = fneg float %458
  %460 = tail call float @llvm.fma.f32(float %subtract.422.8, float 0x3FF7154760000000, float %459) #3
  %461 = tail call float @llvm.fma.f32(float %subtract.422.8, float 0x3E54AE0C00000000, float %460) #3
  %462 = bitcast float %457 to i32
  %463 = shl i32 %462, 23
  %464 = bitcast i32 %463 to float
  %465 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %461) #3
  %466 = fmul float %465, %464
  %add.10.i46.8 = fadd float %add.10.i46.7, %466
  %subtract.422.9 = fsub float %452, %10
  %467 = tail call float @llvm.fma.f32(float %subtract.422.9, float 0x3F777313A0000000, float 5.000000e-01) #3
  %468 = tail call float @llvm.nvvm.saturate.f(float %467) #3
  %469 = tail call float @llvm.nvvm.fma.rm.f(float %468, float 2.520000e+02, float 0x4168000020000000) #3
  %470 = fadd float %469, 0xC168000FE0000000
  %471 = fneg float %470
  %472 = tail call float @llvm.fma.f32(float %subtract.422.9, float 0x3FF7154760000000, float %471) #3
  %473 = tail call float @llvm.fma.f32(float %subtract.422.9, float 0x3E54AE0C00000000, float %472) #3
  %474 = bitcast float %469 to i32
  %475 = shl i32 %474, 23
  %476 = bitcast i32 %475 to float
  %477 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %473) #3
  %478 = fmul float %477, %476
  %add.10.i46.9 = fadd float %add.10.i46.8, %478
  %479 = fcmp olt float %add.10.i46.9, 0x3810000000000000
  %480 = fmul float %add.10.i46.9, 0x4160000000000000
  %.02.i42 = select i1 %479, float %480, float %add.10.i46.9
  %i.i.0.i43 = select i1 %479, float -2.300000e+01, float 0.000000e+00
  %481 = bitcast float %.02.i42 to i32
  %482 = add nsw i32 %481, -1059760811
  %483 = and i32 %482, -8388608
  %484 = sub nsw i32 %481, %483
  %485 = bitcast i32 %484 to float
  %486 = sitofp i32 %483 to float
  %487 = tail call float @llvm.fma.f32(float %486, float 0x3E80000000000000, float %i.i.0.i43) #3
  %488 = fadd float %485, -1.000000e+00
  %489 = tail call float @llvm.fma.f32(float %488, float 0xBFC0AA04E0000000, float 0x3FC2073EC0000000) #3
  %490 = tail call float @llvm.fma.f32(float %489, float %488, float 0xBFBF19B980000000) #3
  %491 = tail call float @llvm.fma.f32(float %490, float %488, float 0x3FC1E52AA0000000) #3
  %492 = tail call float @llvm.fma.f32(float %491, float %488, float 0xBFC55B1720000000) #3
  %493 = tail call float @llvm.fma.f32(float %492, float %488, float 0x3FC99DA160000000) #3
  %494 = tail call float @llvm.fma.f32(float %493, float %488, float 0xBFCFFFE440000000) #3
  %495 = tail call float @llvm.fma.f32(float %494, float %488, float 0x3FD5554F00000000) #3
  %496 = tail call float @llvm.fma.f32(float %495, float %488, float -5.000000e-01) #3
  %497 = fmul float %488, %496
  %498 = tail call float @llvm.fma.f32(float %497, float %488, float %488) #3
  %499 = tail call float @llvm.fma.f32(float %487, float 0x3FE62E4300000000, float %498) #3
  %500 = icmp ugt i32 %481, 2139095039
  %501 = tail call float @llvm.fma.f32(float %.02.i42, float 0x7FF0000000000000, float 0x7FF0000000000000) #3
  %spec.select.i44 = select i1 %500, float %501, float %499
  %502 = fcmp oeq float %.02.i42, 0.000000e+00
  %r.i.1.i45 = select i1 %502, float 0xFFF0000000000000, float %spec.select.i44
  %subtract.434 = fsub float %453, %11
  %503 = tail call float @llvm.fma.f32(float %subtract.434, float 0x3F777313A0000000, float 5.000000e-01) #3
  %504 = tail call float @llvm.nvvm.saturate.f(float %503) #3
  %505 = tail call float @llvm.nvvm.fma.rm.f(float %504, float 2.520000e+02, float 0x4168000020000000) #3
  %506 = fadd float %505, 0xC168000FE0000000
  %507 = fneg float %506
  %508 = tail call float @llvm.fma.f32(float %subtract.434, float 0x3FF7154760000000, float %507) #3
  %509 = tail call float @llvm.fma.f32(float %subtract.434, float 0x3E54AE0C00000000, float %508) #3
  %510 = bitcast float %505 to i32
  %511 = shl i32 %510, 23
  %512 = bitcast i32 %511 to float
  %513 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %509) #3
  %514 = fmul float %513, %512
  %add.10.i = fadd float %514, 0.000000e+00
  %subtract.434.1 = fsub float %454, %11
  %515 = tail call float @llvm.fma.f32(float %subtract.434.1, float 0x3F777313A0000000, float 5.000000e-01) #3
  %516 = tail call float @llvm.nvvm.saturate.f(float %515) #3
  %517 = tail call float @llvm.nvvm.fma.rm.f(float %516, float 2.520000e+02, float 0x4168000020000000) #3
  %518 = fadd float %517, 0xC168000FE0000000
  %519 = fneg float %518
  %520 = tail call float @llvm.fma.f32(float %subtract.434.1, float 0x3FF7154760000000, float %519) #3
  %521 = tail call float @llvm.fma.f32(float %subtract.434.1, float 0x3E54AE0C00000000, float %520) #3
  %522 = bitcast float %517 to i32
  %523 = shl i32 %522, 23
  %524 = bitcast i32 %523 to float
  %525 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %521) #3
  %526 = fmul float %525, %524
  %add.10.i.1 = fadd float %add.10.i, %526
  %527 = getelementptr inbounds float, float addrspace(1)* %12, i64 32
  %528 = bitcast float addrspace(1)* %527 to <4 x float> addrspace(1)*
  %529 = load <4 x float>, <4 x float> addrspace(1)* %528, align 32, !invariant.load !26
  %530 = extractelement <4 x float> %529, i32 0
  %531 = extractelement <4 x float> %529, i32 1
  %532 = extractelement <4 x float> %529, i32 2
  %533 = extractelement <4 x float> %529, i32 3
  %subtract.434.2 = fsub float %530, %11
  %534 = tail call float @llvm.fma.f32(float %subtract.434.2, float 0x3F777313A0000000, float 5.000000e-01) #3
  %535 = tail call float @llvm.nvvm.saturate.f(float %534) #3
  %536 = tail call float @llvm.nvvm.fma.rm.f(float %535, float 2.520000e+02, float 0x4168000020000000) #3
  %537 = fadd float %536, 0xC168000FE0000000
  %538 = fneg float %537
  %539 = tail call float @llvm.fma.f32(float %subtract.434.2, float 0x3FF7154760000000, float %538) #3
  %540 = tail call float @llvm.fma.f32(float %subtract.434.2, float 0x3E54AE0C00000000, float %539) #3
  %541 = bitcast float %536 to i32
  %542 = shl i32 %541, 23
  %543 = bitcast i32 %542 to float
  %544 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %540) #3
  %545 = fmul float %544, %543
  %add.10.i.2 = fadd float %add.10.i.1, %545
  %subtract.434.3 = fsub float %531, %11
  %546 = tail call float @llvm.fma.f32(float %subtract.434.3, float 0x3F777313A0000000, float 5.000000e-01) #3
  %547 = tail call float @llvm.nvvm.saturate.f(float %546) #3
  %548 = tail call float @llvm.nvvm.fma.rm.f(float %547, float 2.520000e+02, float 0x4168000020000000) #3
  %549 = fadd float %548, 0xC168000FE0000000
  %550 = fneg float %549
  %551 = tail call float @llvm.fma.f32(float %subtract.434.3, float 0x3FF7154760000000, float %550) #3
  %552 = tail call float @llvm.fma.f32(float %subtract.434.3, float 0x3E54AE0C00000000, float %551) #3
  %553 = bitcast float %548 to i32
  %554 = shl i32 %553, 23
  %555 = bitcast i32 %554 to float
  %556 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %552) #3
  %557 = fmul float %556, %555
  %add.10.i.3 = fadd float %add.10.i.2, %557
  %subtract.434.4 = fsub float %532, %11
  %558 = tail call float @llvm.fma.f32(float %subtract.434.4, float 0x3F777313A0000000, float 5.000000e-01) #3
  %559 = tail call float @llvm.nvvm.saturate.f(float %558) #3
  %560 = tail call float @llvm.nvvm.fma.rm.f(float %559, float 2.520000e+02, float 0x4168000020000000) #3
  %561 = fadd float %560, 0xC168000FE0000000
  %562 = fneg float %561
  %563 = tail call float @llvm.fma.f32(float %subtract.434.4, float 0x3FF7154760000000, float %562) #3
  %564 = tail call float @llvm.fma.f32(float %subtract.434.4, float 0x3E54AE0C00000000, float %563) #3
  %565 = bitcast float %560 to i32
  %566 = shl i32 %565, 23
  %567 = bitcast i32 %566 to float
  %568 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %564) #3
  %569 = fmul float %568, %567
  %add.10.i.4 = fadd float %add.10.i.3, %569
  %subtract.434.5 = fsub float %533, %11
  %570 = tail call float @llvm.fma.f32(float %subtract.434.5, float 0x3F777313A0000000, float 5.000000e-01) #3
  %571 = tail call float @llvm.nvvm.saturate.f(float %570) #3
  %572 = tail call float @llvm.nvvm.fma.rm.f(float %571, float 2.520000e+02, float 0x4168000020000000) #3
  %573 = fadd float %572, 0xC168000FE0000000
  %574 = fneg float %573
  %575 = tail call float @llvm.fma.f32(float %subtract.434.5, float 0x3FF7154760000000, float %574) #3
  %576 = tail call float @llvm.fma.f32(float %subtract.434.5, float 0x3E54AE0C00000000, float %575) #3
  %577 = bitcast float %572 to i32
  %578 = shl i32 %577, 23
  %579 = bitcast i32 %578 to float
  %580 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %576) #3
  %581 = fmul float %580, %579
  %add.10.i.5 = fadd float %add.10.i.4, %581
  %582 = getelementptr inbounds float, float addrspace(1)* %12, i64 36
  %583 = bitcast float addrspace(1)* %582 to <4 x float> addrspace(1)*
  %584 = load <4 x float>, <4 x float> addrspace(1)* %583, align 16, !invariant.load !26
  %585 = extractelement <4 x float> %584, i32 0
  %586 = extractelement <4 x float> %584, i32 1
  %587 = extractelement <4 x float> %584, i32 2
  %588 = extractelement <4 x float> %584, i32 3
  %subtract.434.6 = fsub float %585, %11
  %589 = tail call float @llvm.fma.f32(float %subtract.434.6, float 0x3F777313A0000000, float 5.000000e-01) #3
  %590 = tail call float @llvm.nvvm.saturate.f(float %589) #3
  %591 = tail call float @llvm.nvvm.fma.rm.f(float %590, float 2.520000e+02, float 0x4168000020000000) #3
  %592 = fadd float %591, 0xC168000FE0000000
  %593 = fneg float %592
  %594 = tail call float @llvm.fma.f32(float %subtract.434.6, float 0x3FF7154760000000, float %593) #3
  %595 = tail call float @llvm.fma.f32(float %subtract.434.6, float 0x3E54AE0C00000000, float %594) #3
  %596 = bitcast float %591 to i32
  %597 = shl i32 %596, 23
  %598 = bitcast i32 %597 to float
  %599 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %595) #3
  %600 = fmul float %599, %598
  %add.10.i.6 = fadd float %add.10.i.5, %600
  %subtract.434.7 = fsub float %586, %11
  %601 = tail call float @llvm.fma.f32(float %subtract.434.7, float 0x3F777313A0000000, float 5.000000e-01) #3
  %602 = tail call float @llvm.nvvm.saturate.f(float %601) #3
  %603 = tail call float @llvm.nvvm.fma.rm.f(float %602, float 2.520000e+02, float 0x4168000020000000) #3
  %604 = fadd float %603, 0xC168000FE0000000
  %605 = fneg float %604
  %606 = tail call float @llvm.fma.f32(float %subtract.434.7, float 0x3FF7154760000000, float %605) #3
  %607 = tail call float @llvm.fma.f32(float %subtract.434.7, float 0x3E54AE0C00000000, float %606) #3
  %608 = bitcast float %603 to i32
  %609 = shl i32 %608, 23
  %610 = bitcast i32 %609 to float
  %611 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %607) #3
  %612 = fmul float %611, %610
  %add.10.i.7 = fadd float %add.10.i.6, %612
  %subtract.434.8 = fsub float %587, %11
  %613 = tail call float @llvm.fma.f32(float %subtract.434.8, float 0x3F777313A0000000, float 5.000000e-01) #3
  %614 = tail call float @llvm.nvvm.saturate.f(float %613) #3
  %615 = tail call float @llvm.nvvm.fma.rm.f(float %614, float 2.520000e+02, float 0x4168000020000000) #3
  %616 = fadd float %615, 0xC168000FE0000000
  %617 = fneg float %616
  %618 = tail call float @llvm.fma.f32(float %subtract.434.8, float 0x3FF7154760000000, float %617) #3
  %619 = tail call float @llvm.fma.f32(float %subtract.434.8, float 0x3E54AE0C00000000, float %618) #3
  %620 = bitcast float %615 to i32
  %621 = shl i32 %620, 23
  %622 = bitcast i32 %621 to float
  %623 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %619) #3
  %624 = fmul float %623, %622
  %add.10.i.8 = fadd float %add.10.i.7, %624
  %subtract.434.9 = fsub float %588, %11
  %625 = tail call float @llvm.fma.f32(float %subtract.434.9, float 0x3F777313A0000000, float 5.000000e-01) #3
  %626 = tail call float @llvm.nvvm.saturate.f(float %625) #3
  %627 = tail call float @llvm.nvvm.fma.rm.f(float %626, float 2.520000e+02, float 0x4168000020000000) #3
  %628 = fadd float %627, 0xC168000FE0000000
  %629 = fneg float %628
  %630 = tail call float @llvm.fma.f32(float %subtract.434.9, float 0x3FF7154760000000, float %629) #3
  %631 = tail call float @llvm.fma.f32(float %subtract.434.9, float 0x3E54AE0C00000000, float %630) #3
  %632 = bitcast float %627 to i32
  %633 = shl i32 %632, 23
  %634 = bitcast i32 %633 to float
  %635 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %631) #3
  %636 = fmul float %635, %634
  %add.10.i.9 = fadd float %add.10.i.8, %636
  %637 = fcmp olt float %add.10.i.9, 0x3810000000000000
  %638 = fmul float %add.10.i.9, 0x4160000000000000
  %.02.i = select i1 %637, float %638, float %add.10.i.9
  %i.i.0.i = select i1 %637, float -2.300000e+01, float 0.000000e+00
  %639 = bitcast float %.02.i to i32
  %640 = add nsw i32 %639, -1059760811
  %641 = and i32 %640, -8388608
  %642 = sub nsw i32 %639, %641
  %643 = bitcast i32 %642 to float
  %644 = sitofp i32 %641 to float
  %645 = tail call float @llvm.fma.f32(float %644, float 0x3E80000000000000, float %i.i.0.i) #3
  %646 = fadd float %643, -1.000000e+00
  %647 = tail call float @llvm.fma.f32(float %646, float 0xBFC0AA04E0000000, float 0x3FC2073EC0000000) #3
  %648 = tail call float @llvm.fma.f32(float %647, float %646, float 0xBFBF19B980000000) #3
  %649 = tail call float @llvm.fma.f32(float %648, float %646, float 0x3FC1E52AA0000000) #3
  %650 = tail call float @llvm.fma.f32(float %649, float %646, float 0xBFC55B1720000000) #3
  %651 = tail call float @llvm.fma.f32(float %650, float %646, float 0x3FC99DA160000000) #3
  %652 = tail call float @llvm.fma.f32(float %651, float %646, float 0xBFCFFFE440000000) #3
  %653 = tail call float @llvm.fma.f32(float %652, float %646, float 0x3FD5554F00000000) #3
  %654 = tail call float @llvm.fma.f32(float %653, float %646, float -5.000000e-01) #3
  %655 = fmul float %646, %654
  %656 = tail call float @llvm.fma.f32(float %655, float %646, float %646) #3
  %657 = tail call float @llvm.fma.f32(float %645, float 0x3FE62E4300000000, float %656) #3
  %658 = icmp ugt i32 %639, 2139095039
  %659 = tail call float @llvm.fma.f32(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #3
  %spec.select.i = select i1 %658, float %659, float %657
  %660 = fcmp oeq float %.02.i, 0.000000e+00
  %r.i.1.i = select i1 %660, float 0xFFF0000000000000, float %spec.select.i
  %661 = insertelement <4 x float> poison, float %r.i.1.i55, i32 0
  %662 = insertelement <4 x float> %661, float %r.i.1.i50, i32 1
  %663 = insertelement <4 x float> %662, float %r.i.1.i45, i32 2
  %664 = insertelement <4 x float> %663, float %r.i.1.i, i32 3
  %665 = bitcast float addrspace(1)* %179 to <4 x float> addrspace(1)*
  store <4 x float> %664, <4 x float> addrspace(1)* %665, align 16
  ret void
}

; Function Attrs: nounwind
define void @input_fusion_reduce(i8* noalias nocapture readonly align 16 dereferenceable(32) %alloc1, i8* noalias nocapture writeonly align 128 dereferenceable(4) %alloc11, i8* noalias nocapture readonly align 128 dereferenceable(17808) %temp_buf) local_unnamed_addr #3 {
entry:
  %temp_buf103 = addrspacecast i8* %temp_buf to i8 addrspace(1)*
  %alloc11101 = addrspacecast i8* %alloc11 to i8 addrspace(1)*
  %alloc199 = addrspacecast i8* %alloc1 to i8 addrspace(1)*
  %initial_value_addr = alloca float, align 4
  %0 = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf103, i64 128
  %1 = bitcast i8 addrspace(1)* %0 to [32 x float] addrspace(1)*
  %2 = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf103, i64 16384
  %3 = bitcast i8 addrspace(1)* %temp_buf103 to [32 x float] addrspace(1)*
  %4 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !23
  %5 = bitcast i8 addrspace(1)* %2 to float addrspace(1)*
  %.lhs.trunc88 = trunc i32 %4 to i8
  %6 = urem i8 %.lhs.trunc88, 10
  %7 = udiv i8 %.lhs.trunc88, 10
  %8 = zext i8 %7 to i64
  %Arg_1.216 = getelementptr inbounds i8, i8 addrspace(1)* %alloc199, i64 %8
  %Arg_1.217 = load i8, i8 addrspace(1)* %Arg_1.216, align 1, !invariant.load !26
  %9 = icmp eq i8 %6, %Arg_1.217
  %10 = select i1 %9, float 1.000000e+00, float 0.000000e+00
  %11 = icmp ult i8 %Arg_1.217, 10
  %12 = select i1 %11, float 0.000000e+00, float 0x7FF8000000000000
  %add.2624 = fadd float %12, %10
  %compare.2825 = fcmp oeq float %add.2624, 0.000000e+00
  %13 = zext i32 %4 to i64
  %Arg_2.326 = getelementptr float, float addrspace(1)* %5, i64 %13
  %Arg_2.327 = load float, float addrspace(1)* %Arg_2.326, align 4, !invariant.load !26
  %Arg_3.428 = getelementptr inbounds [32 x float], [32 x float] addrspace(1)* %3, i64 0, i64 %8
  %Arg_3.429 = load float, float addrspace(1)* %Arg_3.428, align 4, !invariant.load !26
  %subtract.3030 = fsub float %Arg_2.327, %Arg_3.429
  %Arg_0.131 = getelementptr inbounds [32 x float], [32 x float] addrspace(1)* %1, i64 0, i64 %8
  %Arg_0.132 = load float, float addrspace(1)* %Arg_0.131, align 4, !invariant.load !26
  %subtract.3233 = fsub float %subtract.3030, %Arg_0.132
  %14 = select i1 %compare.2825, float 0.000000e+00, float %subtract.3233
  %15 = fmul float %add.2624, %14
  %add.39.i74 = fsub float 0.000000e+00, %15
  %x_loc15.1 = or i32 %4, 32
  %.lhs.trunc.1 = trunc i32 %x_loc15.1 to i16
  %.lhs.trunc.1.frozen = freeze i16 %.lhs.trunc.1
  %16 = udiv i16 %.lhs.trunc.1.frozen, 10
  %17 = mul i16 %16, 10
  %.decomposed = sub i16 %.lhs.trunc.1.frozen, %17
  %18 = zext i16 %16 to i64
  %Arg_1.216.1 = getelementptr inbounds i8, i8 addrspace(1)* %alloc199, i64 %18
  %Arg_1.217.1 = load i8, i8 addrspace(1)* %Arg_1.216.1, align 1, !invariant.load !26
  %19 = zext i8 %Arg_1.217.1 to i16
  %20 = icmp eq i16 %.decomposed, %19
  %21 = select i1 %20, float 1.000000e+00, float 0.000000e+00
  %22 = icmp ult i8 %Arg_1.217.1, 10
  %23 = select i1 %22, float 0.000000e+00, float 0x7FF8000000000000
  %add.2624.1 = fadd float %23, %21
  %compare.2825.1 = fcmp oeq float %add.2624.1, 0.000000e+00
  %Arg_2.326.1106 = getelementptr inbounds float, float addrspace(1)* %Arg_2.326, i64 32
  %Arg_2.327.1 = load float, float addrspace(1)* %Arg_2.326.1106, align 4, !invariant.load !26
  %Arg_3.428.1 = getelementptr inbounds [32 x float], [32 x float] addrspace(1)* %3, i64 0, i64 %18
  %Arg_3.429.1 = load float, float addrspace(1)* %Arg_3.428.1, align 4, !invariant.load !26
  %subtract.3030.1 = fsub float %Arg_2.327.1, %Arg_3.429.1
  %Arg_0.131.1 = getelementptr inbounds [32 x float], [32 x float] addrspace(1)* %1, i64 0, i64 %18
  %Arg_0.132.1 = load float, float addrspace(1)* %Arg_0.131.1, align 4, !invariant.load !26
  %subtract.3233.1 = fsub float %subtract.3030.1, %Arg_0.132.1
  %24 = select i1 %compare.2825.1, float 0.000000e+00, float %subtract.3233.1
  %25 = fmul float %add.2624.1, %24
  %add.39.i74.1 = fsub float %add.39.i74, %25
  %x_loc15.2 = or i32 %4, 64
  %.lhs.trunc.2 = trunc i32 %x_loc15.2 to i16
  %.lhs.trunc.2.frozen = freeze i16 %.lhs.trunc.2
  %26 = udiv i16 %.lhs.trunc.2.frozen, 10
  %27 = mul i16 %26, 10
  %.decomposed91 = sub i16 %.lhs.trunc.2.frozen, %27
  %28 = zext i16 %26 to i64
  %Arg_1.216.2 = getelementptr inbounds i8, i8 addrspace(1)* %alloc199, i64 %28
  %Arg_1.217.2 = load i8, i8 addrspace(1)* %Arg_1.216.2, align 1, !invariant.load !26
  %29 = zext i8 %Arg_1.217.2 to i16
  %30 = icmp eq i16 %.decomposed91, %29
  %31 = select i1 %30, float 1.000000e+00, float 0.000000e+00
  %32 = icmp ult i8 %Arg_1.217.2, 10
  %33 = select i1 %32, float 0.000000e+00, float 0x7FF8000000000000
  %add.2624.2 = fadd float %33, %31
  %compare.2825.2 = fcmp oeq float %add.2624.2, 0.000000e+00
  %Arg_2.326.2108 = getelementptr inbounds float, float addrspace(1)* %Arg_2.326, i64 64
  %Arg_2.327.2 = load float, float addrspace(1)* %Arg_2.326.2108, align 4, !invariant.load !26
  %Arg_3.428.2 = getelementptr inbounds [32 x float], [32 x float] addrspace(1)* %3, i64 0, i64 %28
  %Arg_3.429.2 = load float, float addrspace(1)* %Arg_3.428.2, align 4, !invariant.load !26
  %subtract.3030.2 = fsub float %Arg_2.327.2, %Arg_3.429.2
  %Arg_0.131.2 = getelementptr inbounds [32 x float], [32 x float] addrspace(1)* %1, i64 0, i64 %28
  %Arg_0.132.2 = load float, float addrspace(1)* %Arg_0.131.2, align 4, !invariant.load !26
  %subtract.3233.2 = fsub float %subtract.3030.2, %Arg_0.132.2
  %34 = select i1 %compare.2825.2, float 0.000000e+00, float %subtract.3233.2
  %35 = fmul float %add.2624.2, %34
  %add.39.i74.2 = fsub float %add.39.i74.1, %35
  %x_loc15.3 = or i32 %4, 96
  %.lhs.trunc.3 = trunc i32 %x_loc15.3 to i16
  %.lhs.trunc.3.frozen = freeze i16 %.lhs.trunc.3
  %36 = udiv i16 %.lhs.trunc.3.frozen, 10
  %37 = mul i16 %36, 10
  %.decomposed92 = sub i16 %.lhs.trunc.3.frozen, %37
  %38 = zext i16 %36 to i64
  %Arg_1.216.3 = getelementptr inbounds i8, i8 addrspace(1)* %alloc199, i64 %38
  %Arg_1.217.3 = load i8, i8 addrspace(1)* %Arg_1.216.3, align 1, !invariant.load !26
  %39 = zext i8 %Arg_1.217.3 to i16
  %40 = icmp eq i16 %.decomposed92, %39
  %41 = select i1 %40, float 1.000000e+00, float 0.000000e+00
  %42 = icmp ult i8 %Arg_1.217.3, 10
  %43 = select i1 %42, float 0.000000e+00, float 0x7FF8000000000000
  %add.2624.3 = fadd float %43, %41
  %compare.2825.3 = fcmp oeq float %add.2624.3, 0.000000e+00
  %Arg_2.326.3110 = getelementptr inbounds float, float addrspace(1)* %Arg_2.326, i64 96
  %Arg_2.327.3 = load float, float addrspace(1)* %Arg_2.326.3110, align 4, !invariant.load !26
  %Arg_3.428.3 = getelementptr inbounds [32 x float], [32 x float] addrspace(1)* %3, i64 0, i64 %38
  %Arg_3.429.3 = load float, float addrspace(1)* %Arg_3.428.3, align 4, !invariant.load !26
  %subtract.3030.3 = fsub float %Arg_2.327.3, %Arg_3.429.3
  %Arg_0.131.3 = getelementptr inbounds [32 x float], [32 x float] addrspace(1)* %1, i64 0, i64 %38
  %Arg_0.132.3 = load float, float addrspace(1)* %Arg_0.131.3, align 4, !invariant.load !26
  %subtract.3233.3 = fsub float %subtract.3030.3, %Arg_0.132.3
  %44 = select i1 %compare.2825.3, float 0.000000e+00, float %subtract.3233.3
  %45 = fmul float %add.2624.3, %44
  %add.39.i74.3 = fsub float %add.39.i74.2, %45
  %x_loc15.4 = or i32 %4, 128
  %.lhs.trunc.4 = trunc i32 %x_loc15.4 to i16
  %.lhs.trunc.4.frozen = freeze i16 %.lhs.trunc.4
  %46 = udiv i16 %.lhs.trunc.4.frozen, 10
  %47 = mul i16 %46, 10
  %.decomposed93 = sub i16 %.lhs.trunc.4.frozen, %47
  %48 = zext i16 %46 to i64
  %Arg_1.216.4 = getelementptr inbounds i8, i8 addrspace(1)* %alloc199, i64 %48
  %Arg_1.217.4 = load i8, i8 addrspace(1)* %Arg_1.216.4, align 1, !invariant.load !26
  %49 = zext i8 %Arg_1.217.4 to i16
  %50 = icmp eq i16 %.decomposed93, %49
  %51 = select i1 %50, float 1.000000e+00, float 0.000000e+00
  %52 = icmp ult i8 %Arg_1.217.4, 10
  %53 = select i1 %52, float 0.000000e+00, float 0x7FF8000000000000
  %add.2624.4 = fadd float %53, %51
  %compare.2825.4 = fcmp oeq float %add.2624.4, 0.000000e+00
  %Arg_2.326.4112 = getelementptr inbounds float, float addrspace(1)* %Arg_2.326, i64 128
  %Arg_2.327.4 = load float, float addrspace(1)* %Arg_2.326.4112, align 4, !invariant.load !26
  %Arg_3.428.4 = getelementptr inbounds [32 x float], [32 x float] addrspace(1)* %3, i64 0, i64 %48
  %Arg_3.429.4 = load float, float addrspace(1)* %Arg_3.428.4, align 4, !invariant.load !26
  %subtract.3030.4 = fsub float %Arg_2.327.4, %Arg_3.429.4
  %Arg_0.131.4 = getelementptr inbounds [32 x float], [32 x float] addrspace(1)* %1, i64 0, i64 %48
  %Arg_0.132.4 = load float, float addrspace(1)* %Arg_0.131.4, align 4, !invariant.load !26
  %subtract.3233.4 = fsub float %subtract.3030.4, %Arg_0.132.4
  %54 = select i1 %compare.2825.4, float 0.000000e+00, float %subtract.3233.4
  %55 = fmul float %add.2624.4, %54
  %add.39.i74.4 = fsub float %add.39.i74.3, %55
  %x_loc15.5 = or i32 %4, 160
  %.lhs.trunc.5 = trunc i32 %x_loc15.5 to i16
  %.lhs.trunc.5.frozen = freeze i16 %.lhs.trunc.5
  %56 = udiv i16 %.lhs.trunc.5.frozen, 10
  %57 = mul i16 %56, 10
  %.decomposed94 = sub i16 %.lhs.trunc.5.frozen, %57
  %58 = zext i16 %56 to i64
  %Arg_1.216.5 = getelementptr inbounds i8, i8 addrspace(1)* %alloc199, i64 %58
  %Arg_1.217.5 = load i8, i8 addrspace(1)* %Arg_1.216.5, align 1, !invariant.load !26
  %59 = zext i8 %Arg_1.217.5 to i16
  %60 = icmp eq i16 %.decomposed94, %59
  %61 = select i1 %60, float 1.000000e+00, float 0.000000e+00
  %62 = icmp ult i8 %Arg_1.217.5, 10
  %63 = select i1 %62, float 0.000000e+00, float 0x7FF8000000000000
  %add.2624.5 = fadd float %63, %61
  %compare.2825.5 = fcmp oeq float %add.2624.5, 0.000000e+00
  %Arg_2.326.5114 = getelementptr inbounds float, float addrspace(1)* %Arg_2.326, i64 160
  %Arg_2.327.5 = load float, float addrspace(1)* %Arg_2.326.5114, align 4, !invariant.load !26
  %Arg_3.428.5 = getelementptr inbounds [32 x float], [32 x float] addrspace(1)* %3, i64 0, i64 %58
  %Arg_3.429.5 = load float, float addrspace(1)* %Arg_3.428.5, align 4, !invariant.load !26
  %subtract.3030.5 = fsub float %Arg_2.327.5, %Arg_3.429.5
  %Arg_0.131.5 = getelementptr inbounds [32 x float], [32 x float] addrspace(1)* %1, i64 0, i64 %58
  %Arg_0.132.5 = load float, float addrspace(1)* %Arg_0.131.5, align 4, !invariant.load !26
  %subtract.3233.5 = fsub float %subtract.3030.5, %Arg_0.132.5
  %64 = select i1 %compare.2825.5, float 0.000000e+00, float %subtract.3233.5
  %65 = fmul float %add.2624.5, %64
  %add.39.i74.5 = fsub float %add.39.i74.4, %65
  %x_loc15.6 = or i32 %4, 192
  %.lhs.trunc.6 = trunc i32 %x_loc15.6 to i16
  %.lhs.trunc.6.frozen = freeze i16 %.lhs.trunc.6
  %66 = udiv i16 %.lhs.trunc.6.frozen, 10
  %67 = mul i16 %66, 10
  %.decomposed95 = sub i16 %.lhs.trunc.6.frozen, %67
  %68 = zext i16 %66 to i64
  %Arg_1.216.6 = getelementptr inbounds i8, i8 addrspace(1)* %alloc199, i64 %68
  %Arg_1.217.6 = load i8, i8 addrspace(1)* %Arg_1.216.6, align 1, !invariant.load !26
  %69 = zext i8 %Arg_1.217.6 to i16
  %70 = icmp eq i16 %.decomposed95, %69
  %71 = select i1 %70, float 1.000000e+00, float 0.000000e+00
  %72 = icmp ult i8 %Arg_1.217.6, 10
  %73 = select i1 %72, float 0.000000e+00, float 0x7FF8000000000000
  %add.2624.6 = fadd float %73, %71
  %compare.2825.6 = fcmp oeq float %add.2624.6, 0.000000e+00
  %Arg_2.326.6116 = getelementptr inbounds float, float addrspace(1)* %Arg_2.326, i64 192
  %Arg_2.327.6 = load float, float addrspace(1)* %Arg_2.326.6116, align 4, !invariant.load !26
  %Arg_3.428.6 = getelementptr inbounds [32 x float], [32 x float] addrspace(1)* %3, i64 0, i64 %68
  %Arg_3.429.6 = load float, float addrspace(1)* %Arg_3.428.6, align 4, !invariant.load !26
  %subtract.3030.6 = fsub float %Arg_2.327.6, %Arg_3.429.6
  %Arg_0.131.6 = getelementptr inbounds [32 x float], [32 x float] addrspace(1)* %1, i64 0, i64 %68
  %Arg_0.132.6 = load float, float addrspace(1)* %Arg_0.131.6, align 4, !invariant.load !26
  %subtract.3233.6 = fsub float %subtract.3030.6, %Arg_0.132.6
  %74 = select i1 %compare.2825.6, float 0.000000e+00, float %subtract.3233.6
  %75 = fmul float %add.2624.6, %74
  %add.39.i74.6 = fsub float %add.39.i74.5, %75
  %x_loc15.7 = or i32 %4, 224
  %.lhs.trunc.7 = trunc i32 %x_loc15.7 to i16
  %.lhs.trunc.7.frozen = freeze i16 %.lhs.trunc.7
  %76 = udiv i16 %.lhs.trunc.7.frozen, 10
  %77 = mul i16 %76, 10
  %.decomposed96 = sub i16 %.lhs.trunc.7.frozen, %77
  %78 = zext i16 %76 to i64
  %Arg_1.216.7 = getelementptr inbounds i8, i8 addrspace(1)* %alloc199, i64 %78
  %Arg_1.217.7 = load i8, i8 addrspace(1)* %Arg_1.216.7, align 1, !invariant.load !26
  %79 = zext i8 %Arg_1.217.7 to i16
  %80 = icmp eq i16 %.decomposed96, %79
  %81 = select i1 %80, float 1.000000e+00, float 0.000000e+00
  %82 = icmp ult i8 %Arg_1.217.7, 10
  %83 = select i1 %82, float 0.000000e+00, float 0x7FF8000000000000
  %add.2624.7 = fadd float %83, %81
  %compare.2825.7 = fcmp oeq float %add.2624.7, 0.000000e+00
  %Arg_2.326.7118 = getelementptr inbounds float, float addrspace(1)* %Arg_2.326, i64 224
  %Arg_2.327.7 = load float, float addrspace(1)* %Arg_2.326.7118, align 4, !invariant.load !26
  %Arg_3.428.7 = getelementptr inbounds [32 x float], [32 x float] addrspace(1)* %3, i64 0, i64 %78
  %Arg_3.429.7 = load float, float addrspace(1)* %Arg_3.428.7, align 4, !invariant.load !26
  %subtract.3030.7 = fsub float %Arg_2.327.7, %Arg_3.429.7
  %Arg_0.131.7 = getelementptr inbounds [32 x float], [32 x float] addrspace(1)* %1, i64 0, i64 %78
  %Arg_0.132.7 = load float, float addrspace(1)* %Arg_0.131.7, align 4, !invariant.load !26
  %subtract.3233.7 = fsub float %subtract.3030.7, %Arg_0.132.7
  %84 = select i1 %compare.2825.7, float 0.000000e+00, float %subtract.3233.7
  %85 = fmul float %add.2624.7, %84
  %add.39.i74.7 = fsub float %add.39.i74.6, %85
  %x_loc15.8 = or i32 %4, 256
  %.lhs.trunc.8 = trunc i32 %x_loc15.8 to i16
  %.lhs.trunc.8.frozen = freeze i16 %.lhs.trunc.8
  %86 = udiv i16 %.lhs.trunc.8.frozen, 10
  %87 = mul i16 %86, 10
  %.decomposed97 = sub i16 %.lhs.trunc.8.frozen, %87
  %88 = zext i16 %86 to i64
  %Arg_1.216.8 = getelementptr inbounds i8, i8 addrspace(1)* %alloc199, i64 %88
  %Arg_1.217.8 = load i8, i8 addrspace(1)* %Arg_1.216.8, align 1, !invariant.load !26
  %89 = zext i8 %Arg_1.217.8 to i16
  %90 = icmp eq i16 %.decomposed97, %89
  %91 = select i1 %90, float 1.000000e+00, float 0.000000e+00
  %92 = icmp ult i8 %Arg_1.217.8, 10
  %93 = select i1 %92, float 0.000000e+00, float 0x7FF8000000000000
  %add.2624.8 = fadd float %93, %91
  %compare.2825.8 = fcmp oeq float %add.2624.8, 0.000000e+00
  %Arg_2.326.8120 = getelementptr inbounds float, float addrspace(1)* %Arg_2.326, i64 256
  %Arg_2.327.8 = load float, float addrspace(1)* %Arg_2.326.8120, align 4, !invariant.load !26
  %Arg_3.428.8 = getelementptr inbounds [32 x float], [32 x float] addrspace(1)* %3, i64 0, i64 %88
  %Arg_3.429.8 = load float, float addrspace(1)* %Arg_3.428.8, align 4, !invariant.load !26
  %subtract.3030.8 = fsub float %Arg_2.327.8, %Arg_3.429.8
  %Arg_0.131.8 = getelementptr inbounds [32 x float], [32 x float] addrspace(1)* %1, i64 0, i64 %88
  %Arg_0.132.8 = load float, float addrspace(1)* %Arg_0.131.8, align 4, !invariant.load !26
  %subtract.3233.8 = fsub float %subtract.3030.8, %Arg_0.132.8
  %94 = select i1 %compare.2825.8, float 0.000000e+00, float %subtract.3233.8
  %95 = fmul float %add.2624.8, %94
  %add.39.i74.8 = fsub float %add.39.i74.7, %95
  %x_loc15.9 = or i32 %4, 288
  %.lhs.trunc.9 = trunc i32 %x_loc15.9 to i16
  %.lhs.trunc.9.frozen = freeze i16 %.lhs.trunc.9
  %96 = udiv i16 %.lhs.trunc.9.frozen, 10
  %97 = mul i16 %96, 10
  %.decomposed98 = sub i16 %.lhs.trunc.9.frozen, %97
  %98 = zext i16 %96 to i64
  %Arg_1.216.9 = getelementptr inbounds i8, i8 addrspace(1)* %alloc199, i64 %98
  %Arg_1.217.9 = load i8, i8 addrspace(1)* %Arg_1.216.9, align 1, !invariant.load !26
  %99 = zext i8 %Arg_1.217.9 to i16
  %100 = icmp eq i16 %.decomposed98, %99
  %101 = select i1 %100, float 1.000000e+00, float 0.000000e+00
  %102 = icmp ult i8 %Arg_1.217.9, 10
  %103 = select i1 %102, float 0.000000e+00, float 0x7FF8000000000000
  %add.2624.9 = fadd float %103, %101
  %compare.2825.9 = fcmp oeq float %add.2624.9, 0.000000e+00
  %Arg_2.326.9122 = getelementptr inbounds float, float addrspace(1)* %Arg_2.326, i64 288
  %Arg_2.327.9 = load float, float addrspace(1)* %Arg_2.326.9122, align 4, !invariant.load !26
  %Arg_3.428.9 = getelementptr inbounds [32 x float], [32 x float] addrspace(1)* %3, i64 0, i64 %98
  %Arg_3.429.9 = load float, float addrspace(1)* %Arg_3.428.9, align 4, !invariant.load !26
  %subtract.3030.9 = fsub float %Arg_2.327.9, %Arg_3.429.9
  %Arg_0.131.9 = getelementptr inbounds [32 x float], [32 x float] addrspace(1)* %1, i64 0, i64 %98
  %Arg_0.132.9 = load float, float addrspace(1)* %Arg_0.131.9, align 4, !invariant.load !26
  %subtract.3233.9 = fsub float %subtract.3030.9, %Arg_0.132.9
  %104 = select i1 %compare.2825.9, float 0.000000e+00, float %subtract.3233.9
  %105 = fmul float %add.2624.9, %104
  %add.39.i74.9 = fsub float %add.39.i74.8, %105
  %106 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.39.i74.9, i32 16, i32 31)
  %add.39.i = fadd float %add.39.i74.9, %106
  %107 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.39.i, i32 8, i32 31)
  %add.39.i83 = fadd float %add.39.i, %107
  %108 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.39.i83, i32 4, i32 31)
  %add.39.i82 = fadd float %add.39.i83, %108
  %109 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.39.i82, i32 2, i32 31)
  %add.39.i81 = fadd float %add.39.i82, %109
  %110 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.39.i81, i32 1, i32 31)
  %111 = icmp eq i32 %4, 0
  %add.39.i80 = fadd float %add.39.i81, %110
  br i1 %111, label %intra_warp_reduce_write-true, label %intra_warp_reduce_write-after

common.ret:                                       ; preds = %reduction_write_output-true, %intra_warp_reduce_write-after
  ret void

intra_warp_reduce_write-after:                    ; preds = %intra_warp_reduce_write-true, %entry
  %112 = trunc i64 %13 to i32
  %113 = icmp eq i32 %112, 0
  tail call void @llvm.nvvm.barrier0()
  %114 = getelementptr inbounds [1 x [1 x [1 x float]]], [1 x [1 x [1 x float]]] addrspace(3)* @shared_cache, i64 0, i64 0, i64 0, i64 %13
  %115 = addrspacecast float addrspace(3)* %114 to float*
  store float 0.000000e+00, float* %initial_value_addr, align 4
  %116 = select i1 %113, float* %115, float* %initial_value_addr
  %partial_reduction_result51 = load float, float* %116, align 4
  %117 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result51, i32 16, i32 31)
  %add.39.i79 = fadd float %partial_reduction_result51, %117
  %118 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.39.i79, i32 8, i32 31)
  %add.39.i78 = fadd float %add.39.i79, %118
  %119 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.39.i78, i32 4, i32 31)
  %add.39.i77 = fadd float %add.39.i78, %119
  %120 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.39.i77, i32 2, i32 31)
  %add.39.i76 = fadd float %add.39.i77, %120
  %121 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.39.i76, i32 1, i32 31)
  %add.39.i75 = fadd float %add.39.i76, %121
  store float %add.39.i75, float* %116, align 4
  br i1 %113, label %reduction_write_output-true, label %common.ret

intra_warp_reduce_write-true:                     ; preds = %entry
  store float %add.39.i80, float addrspace(3)* getelementptr inbounds ([1 x [1 x [1 x float]]], [1 x [1 x [1 x float]]] addrspace(3)* @shared_cache, i64 0, i64 0, i64 0, i64 0), align 4
  br label %intra_warp_reduce_write-after

reduction_write_output-true:                      ; preds = %intra_warp_reduce_write-after
  %122 = bitcast i8 addrspace(1)* %alloc11101 to float addrspace(1)*
  store float %add.39.i75, float addrspace(1)* %122, align 128
  br label %common.ret
}

; Function Attrs: convergent inaccessiblememonly nounwind
declare float @llvm.nvvm.shfl.sync.down.f32(i32, float, i32, i32) #4

; Function Attrs: convergent nounwind
declare void @llvm.nvvm.barrier0() #5

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn writeonly
define void @iota_34(i8* noalias nocapture writeonly align 128 dereferenceable(17808) %temp_buf) local_unnamed_addr #6 {
entry:
  %temp_buf1 = addrspacecast i8* %temp_buf to i8 addrspace(1)*
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !28
  %linear_index_base = shl nuw nsw i32 %0, 2
  %linear_index3 = or i32 %linear_index_base, 3
  %1 = urem i32 %linear_index3, 10
  %linear_index2 = or i32 %linear_index_base, 2
  %2 = urem i32 %linear_index2, 10
  %linear_index1 = or i32 %linear_index_base, 1
  %3 = urem i32 %linear_index1, 10
  %.lhs.trunc = trunc i32 %linear_index_base to i16
  %4 = urem i16 %.lhs.trunc, 10
  %.zext = zext i16 %4 to i32
  %5 = bitcast i8 addrspace(1)* %temp_buf1 to i32 addrspace(1)*
  %6 = zext i32 %linear_index_base to i64
  %7 = getelementptr i32, i32 addrspace(1)* %5, i64 %6
  %8 = insertelement <4 x i32> poison, i32 %.zext, i32 0
  %9 = insertelement <4 x i32> %8, i32 %3, i32 1
  %10 = insertelement <4 x i32> %9, i32 %2, i32 2
  %11 = insertelement <4 x i32> %10, i32 %1, i32 3
  %12 = bitcast i32 addrspace(1)* %7 to <4 x i32> addrspace(1)*
  store <4 x i32> %11, <4 x i32> addrspace(1)* %12, align 16
  ret void
}

; Function Attrs: nofree nosync nounwind
define void @reduce_47(i8* noalias nocapture align 128 dereferenceable(17808) %temp_buf) local_unnamed_addr #7 {
entry:
  %temp_buf10 = addrspacecast i8* %temp_buf to i8 addrspace(1)*
  %0 = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf10, i64 16384
  %1 = bitcast i8 addrspace(1)* %0 to [32 x [10 x float]] addrspace(1)*
  %2 = bitcast i8 addrspace(1)* %temp_buf10 to [32 x [10 x i32]] addrspace(1)*
  %3 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !23
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds [32 x [10 x float]], [32 x [10 x float]] addrspace(1)* %1, i64 0, i64 %4, i64 0
  %6 = bitcast float addrspace(1)* %5 to <2 x float> addrspace(1)*
  %7 = load <2 x float>, <2 x float> addrspace(1)* %6, align 8, !invariant.load !26
  %8 = extractelement <2 x float> %7, i32 0
  %9 = extractelement <2 x float> %7, i32 1
  %10 = getelementptr inbounds [32 x [10 x i32]], [32 x [10 x i32]] addrspace(1)* %2, i64 0, i64 %4, i64 0
  %11 = bitcast i32 addrspace(1)* %10 to <2 x i32> addrspace(1)*
  %12 = load <2 x i32>, <2 x i32> addrspace(1)* %11, align 8, !invariant.load !26
  %13 = extractelement <2 x i32> %12, i32 0
  %14 = extractelement <2 x i32> %12, i32 1
  %compare.10.i = fcmp oeq float %8, 0xFFF0000000000000
  %15 = tail call i32 @llvm.smin.i32(i32 %13, i32 0) #3
  %compare.12.i = fcmp ole float %8, 0xFFF0000000000000
  %16 = select i1 %compare.12.i, i32 0, i32 %13
  %17 = select i1 %compare.10.i, i32 %15, i32 %16
  %18 = select i1 %compare.12.i, float 0xFFF0000000000000, float %8
  %compare.10.i.1 = fcmp oeq float %18, %9
  %19 = tail call i32 @llvm.smin.i32(i32 %17, i32 %14) #3
  %compare.12.i.1 = fcmp oge float %18, %9
  %20 = select i1 %compare.12.i.1, i32 %17, i32 %14
  %21 = select i1 %compare.10.i.1, i32 %19, i32 %20
  %22 = select i1 %compare.12.i.1, float %18, float %9
  %23 = getelementptr inbounds float, float addrspace(1)* %5, i64 2
  %24 = bitcast float addrspace(1)* %23 to <2 x float> addrspace(1)*
  %25 = load <2 x float>, <2 x float> addrspace(1)* %24, align 8, !invariant.load !26
  %26 = extractelement <2 x float> %25, i32 0
  %27 = extractelement <2 x float> %25, i32 1
  %28 = getelementptr inbounds i32, i32 addrspace(1)* %10, i64 2
  %29 = bitcast i32 addrspace(1)* %28 to <2 x i32> addrspace(1)*
  %30 = load <2 x i32>, <2 x i32> addrspace(1)* %29, align 8, !invariant.load !26
  %31 = extractelement <2 x i32> %30, i32 0
  %32 = extractelement <2 x i32> %30, i32 1
  %compare.10.i.2 = fcmp oeq float %22, %26
  %33 = tail call i32 @llvm.smin.i32(i32 %21, i32 %31) #3
  %compare.12.i.2 = fcmp oge float %22, %26
  %34 = select i1 %compare.12.i.2, i32 %21, i32 %31
  %35 = select i1 %compare.10.i.2, i32 %33, i32 %34
  %36 = select i1 %compare.12.i.2, float %22, float %26
  %compare.10.i.3 = fcmp oeq float %36, %27
  %37 = tail call i32 @llvm.smin.i32(i32 %35, i32 %32) #3
  %compare.12.i.3 = fcmp oge float %36, %27
  %38 = select i1 %compare.12.i.3, i32 %35, i32 %32
  %39 = select i1 %compare.10.i.3, i32 %37, i32 %38
  %40 = select i1 %compare.12.i.3, float %36, float %27
  %41 = getelementptr inbounds float, float addrspace(1)* %5, i64 4
  %42 = bitcast float addrspace(1)* %41 to <2 x float> addrspace(1)*
  %43 = load <2 x float>, <2 x float> addrspace(1)* %42, align 8, !invariant.load !26
  %44 = extractelement <2 x float> %43, i32 0
  %45 = extractelement <2 x float> %43, i32 1
  %46 = getelementptr inbounds i32, i32 addrspace(1)* %10, i64 4
  %47 = bitcast i32 addrspace(1)* %46 to <2 x i32> addrspace(1)*
  %48 = load <2 x i32>, <2 x i32> addrspace(1)* %47, align 8, !invariant.load !26
  %49 = extractelement <2 x i32> %48, i32 0
  %50 = extractelement <2 x i32> %48, i32 1
  %compare.10.i.4 = fcmp oeq float %40, %44
  %51 = tail call i32 @llvm.smin.i32(i32 %39, i32 %49) #3
  %compare.12.i.4 = fcmp oge float %40, %44
  %52 = select i1 %compare.12.i.4, i32 %39, i32 %49
  %53 = select i1 %compare.10.i.4, i32 %51, i32 %52
  %54 = select i1 %compare.12.i.4, float %40, float %44
  %compare.10.i.5 = fcmp oeq float %54, %45
  %55 = tail call i32 @llvm.smin.i32(i32 %53, i32 %50) #3
  %compare.12.i.5 = fcmp oge float %54, %45
  %56 = select i1 %compare.12.i.5, i32 %53, i32 %50
  %57 = select i1 %compare.10.i.5, i32 %55, i32 %56
  %58 = select i1 %compare.12.i.5, float %54, float %45
  %59 = getelementptr inbounds float, float addrspace(1)* %5, i64 6
  %60 = bitcast float addrspace(1)* %59 to <2 x float> addrspace(1)*
  %61 = load <2 x float>, <2 x float> addrspace(1)* %60, align 8, !invariant.load !26
  %62 = extractelement <2 x float> %61, i32 0
  %63 = extractelement <2 x float> %61, i32 1
  %64 = getelementptr inbounds i32, i32 addrspace(1)* %10, i64 6
  %65 = bitcast i32 addrspace(1)* %64 to <2 x i32> addrspace(1)*
  %66 = load <2 x i32>, <2 x i32> addrspace(1)* %65, align 8, !invariant.load !26
  %67 = extractelement <2 x i32> %66, i32 0
  %68 = extractelement <2 x i32> %66, i32 1
  %compare.10.i.6 = fcmp oeq float %58, %62
  %69 = tail call i32 @llvm.smin.i32(i32 %57, i32 %67) #3
  %compare.12.i.6 = fcmp oge float %58, %62
  %70 = select i1 %compare.12.i.6, i32 %57, i32 %67
  %71 = select i1 %compare.10.i.6, i32 %69, i32 %70
  %72 = select i1 %compare.12.i.6, float %58, float %62
  %compare.10.i.7 = fcmp oeq float %72, %63
  %73 = tail call i32 @llvm.smin.i32(i32 %71, i32 %68) #3
  %compare.12.i.7 = fcmp oge float %72, %63
  %74 = select i1 %compare.12.i.7, i32 %71, i32 %68
  %75 = select i1 %compare.10.i.7, i32 %73, i32 %74
  %76 = select i1 %compare.12.i.7, float %72, float %63
  %77 = getelementptr inbounds float, float addrspace(1)* %5, i64 8
  %78 = bitcast float addrspace(1)* %77 to <2 x float> addrspace(1)*
  %79 = load <2 x float>, <2 x float> addrspace(1)* %78, align 8, !invariant.load !26
  %80 = extractelement <2 x float> %79, i32 0
  %81 = extractelement <2 x float> %79, i32 1
  %82 = getelementptr inbounds i32, i32 addrspace(1)* %10, i64 8
  %83 = bitcast i32 addrspace(1)* %82 to <2 x i32> addrspace(1)*
  %84 = load <2 x i32>, <2 x i32> addrspace(1)* %83, align 8, !invariant.load !26
  %85 = extractelement <2 x i32> %84, i32 0
  %86 = extractelement <2 x i32> %84, i32 1
  %compare.10.i.8 = fcmp oeq float %76, %80
  %87 = tail call i32 @llvm.smin.i32(i32 %75, i32 %85) #3
  %compare.12.i.8 = fcmp oge float %76, %80
  %88 = select i1 %compare.12.i.8, i32 %75, i32 %85
  %89 = select i1 %compare.10.i.8, i32 %87, i32 %88
  %90 = select i1 %compare.12.i.8, float %76, float %80
  %compare.10.i.9 = fcmp oeq float %90, %81
  %91 = tail call i32 @llvm.smin.i32(i32 %89, i32 %86) #3
  %compare.12.i.9 = fcmp oge float %90, %81
  %92 = select i1 %compare.12.i.9, i32 %89, i32 %86
  %93 = select i1 %compare.10.i.9, i32 %91, i32 %92
  %94 = select i1 %compare.12.i.9, float %90, float %81
  %95 = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf10, i64 1408
  %96 = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf10, i64 1280
  %97 = bitcast i8 addrspace(1)* %96 to float addrspace(1)*
  %98 = getelementptr inbounds float, float addrspace(1)* %97, i64 %4
  store float %94, float addrspace(1)* %98, align 4
  %99 = bitcast i8 addrspace(1)* %95 to i32 addrspace(1)*
  %100 = getelementptr inbounds i32, i32 addrspace(1)* %99, i64 %4
  store i32 %93, i32 addrspace(1)* %100, align 4
  ret void
}

; Function Attrs: nounwind
define void @input_fusion_reduce_1(i8* noalias nocapture readonly align 16 dereferenceable(32) %alloc1, i8* noalias nocapture writeonly align 128 dereferenceable(4) %alloc10, i8* noalias nocapture readonly align 128 dereferenceable(17808) %temp_buf) local_unnamed_addr #3 {
entry:
  %temp_buf72 = addrspacecast i8* %temp_buf to i8 addrspace(1)*
  %alloc1070 = addrspacecast i8* %alloc10 to i8 addrspace(1)*
  %alloc168 = addrspacecast i8* %alloc1 to i8 addrspace(1)*
  %initial_value_addr = alloca float, align 4
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !29
  %1 = and i32 %0, 31
  %2 = icmp ult i32 %0, 32
  br i1 %2, label %x_in_tile-true, label %common.ret

common.ret:                                       ; preds = %reduction_write_output-true, %intra_warp_reduce_write-after, %entry
  ret void

intra_warp_reduce_write-after:                    ; preds = %intra_warp_reduce_write-true, %x_in_tile-true
  %3 = icmp eq i32 %1, 0
  tail call void @llvm.nvvm.barrier0()
  %4 = getelementptr inbounds [5 x [1 x [1 x float]]], [5 x [1 x [1 x float]]] addrspace(3)* @shared_cache1, i64 0, i64 %25, i64 0, i64 %15
  %5 = addrspacecast float addrspace(3)* %4 to float*
  store float 0.000000e+00, float* %initial_value_addr, align 4
  %6 = select i1 %3, float* %5, float* %initial_value_addr
  %partial_reduction_result33 = load float, float* %6, align 4
  %7 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result33, i32 16, i32 31)
  %add.12.i61 = fadd float %partial_reduction_result33, %7
  %8 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i61, i32 8, i32 31)
  %add.12.i60 = fadd float %add.12.i61, %8
  %9 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i60, i32 4, i32 31)
  %add.12.i59 = fadd float %add.12.i60, %9
  %10 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i59, i32 2, i32 31)
  %add.12.i58 = fadd float %add.12.i59, %10
  %11 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i58, i32 1, i32 31)
  %add.12.i57 = fadd float %add.12.i58, %11
  store float %add.12.i57, float* %6, align 4
  br i1 %3, label %reduction_write_output-true, label %common.ret

x_in_tile-true:                                   ; preds = %entry
  %12 = lshr i32 %0, 5
  %13 = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf72, i64 1408
  %14 = bitcast i8 addrspace(1)* %13 to i32 addrspace(1)*
  %15 = zext i32 %1 to i64
  %Arg_1.212 = getelementptr inbounds i8, i8 addrspace(1)* %alloc168, i64 %15
  %Arg_1.213 = load i8, i8 addrspace(1)* %Arg_1.212, align 1, !invariant.load !26
  %16 = uitofp i8 %Arg_1.213 to float
  %Arg_0.114 = getelementptr inbounds i32, i32 addrspace(1)* %14, i64 %15
  %Arg_0.115 = load i32, i32 addrspace(1)* %Arg_0.114, align 4, !invariant.load !26
  %17 = sitofp i32 %Arg_0.115 to float
  %compare.616 = fcmp oeq float %16, %17
  %18 = uitofp i1 %compare.616 to float
  %19 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %18, i32 16, i32 31)
  %add.12.i = fadd float %19, %18
  %20 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i, i32 8, i32 31)
  %add.12.i65 = fadd float %add.12.i, %20
  %21 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i65, i32 4, i32 31)
  %add.12.i64 = fadd float %add.12.i65, %21
  %22 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i64, i32 2, i32 31)
  %add.12.i63 = fadd float %add.12.i64, %22
  %23 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i63, i32 1, i32 31)
  %24 = icmp eq i32 %1, 0
  %25 = zext i32 %12 to i64
  %26 = getelementptr inbounds [5 x [1 x [1 x float]]], [5 x [1 x [1 x float]]] addrspace(3)* @shared_cache1, i64 0, i64 %25, i64 0, i64 0
  %add.12.i62 = fadd float %add.12.i63, %23
  br i1 %24, label %intra_warp_reduce_write-true, label %intra_warp_reduce_write-after

intra_warp_reduce_write-true:                     ; preds = %x_in_tile-true
  store float %add.12.i62, float addrspace(3)* %26, align 4
  br label %intra_warp_reduce_write-after

reduction_write_output-true:                      ; preds = %intra_warp_reduce_write-after
  %27 = bitcast i8 addrspace(1)* %alloc1070 to float addrspace(1)*
  store float %add.12.i57, float addrspace(1)* %27, align 128
  br label %common.ret
}

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
define void @fusion_7(i8* noalias nocapture readonly align 16 dereferenceable(4) %alloc6, i8* noalias nocapture readonly align 16 dereferenceable(4) %alloc7, i8* noalias nocapture align 128 dereferenceable(4) %alloc10, i8* noalias nocapture align 128 dereferenceable(4) %alloc11, i8* noalias nocapture readnone align 128 dereferenceable(17808) %temp_buf) local_unnamed_addr #0 {
entry:
  %alloc1115 = addrspacecast i8* %alloc11 to i8 addrspace(1)*
  %alloc1013 = addrspacecast i8* %alloc10 to i8 addrspace(1)*
  %alloc711 = addrspacecast i8* %alloc7 to i8 addrspace(1)*
  %alloc69 = addrspacecast i8* %alloc6 to i8 addrspace(1)*
  %0 = bitcast i8 addrspace(1)* %alloc1013 to float addrspace(1)*
  %1 = bitcast i8 addrspace(1)* %alloc1115 to float addrspace(1)*
  %2 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !30
  %.not = icmp eq i32 %2, 1
  %alloc7.alloc6 = select i1 %.not, i8 addrspace(1)* %alloc711, i8 addrspace(1)* %alloc69
  %3 = bitcast i8 addrspace(1)* %alloc7.alloc6 to float addrspace(1)*
  %4 = load float, float addrspace(1)* %3, align 16, !invariant.load !26
  %.val = load float, float addrspace(1)* %1, align 128
  %.val8 = load float, float addrspace(1)* %0, align 128
  %5 = select i1 %.not, float %.val, float %.val8
  %add.7 = fadd float %4, %5
  %.sink = select i1 %.not, float addrspace(1)* %1, float addrspace(1)* %0
  store float %add.7, float addrspace(1)* %.sink, align 128
  ret void
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.nvvm.saturate.f(float) #8

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.nvvm.fma.rm.f(float, float, float) #8

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone willreturn
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #9

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.smin.i32(i32, i32) #8

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fma.f32(float, float, float) #8

attributes #0 = { argmemonly mustprogress nofree nosync nounwind willreturn }
attributes #1 = { nofree nosync nounwind readnone speculatable }
attributes #2 = { argmemonly nofree nosync nounwind }
attributes #3 = { nounwind }
attributes #4 = { convergent inaccessiblememonly nounwind }
attributes #5 = { convergent nounwind }
attributes #6 = { argmemonly mustprogress nofree nosync nounwind willreturn writeonly }
attributes #7 = { nofree nosync nounwind }
attributes #8 = { mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn }
attributes #9 = { mustprogress nocallback nofree nosync nounwind readnone willreturn }

!nvvm.annotations = !{!0, !1, !2, !3, !4, !5, !6, !7, !8, !9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20}
!llvm.ident = !{!21}
!llvm.module.flags = !{!22}

!0 = !{void (i8*, i8*)* @broadcast_15, !"kernel", i32 1}
!1 = !{void (i8*, i8*)* @broadcast_15, !"reqntidx", i32 32}
!2 = !{void (i8*, i8*)* @broadcast_15, !"reqntidy", i32 4}
!3 = !{void (i8*)* @fusion_3, !"kernel", i32 1}
!4 = !{void (i8*)* @fusion_3, !"reqntidx", i32 256}
!5 = !{void (i8*, i8*)* @broadcast_22, !"kernel", i32 1}
!6 = !{void (i8*, i8*)* @broadcast_22, !"reqntidx", i32 80}
!7 = !{void (i8*)* @reduce_110, !"kernel", i32 1}
!8 = !{void (i8*)* @reduce_110, !"reqntidx", i32 8}
!9 = !{void (i8*)* @fusion_1, !"kernel", i32 1}
!10 = !{void (i8*)* @fusion_1, !"reqntidx", i32 8}
!11 = !{void (i8*, i8*, i8*)* @input_fusion_reduce, !"kernel", i32 1}
!12 = !{void (i8*, i8*, i8*)* @input_fusion_reduce, !"reqntidx", i32 32}
!13 = !{void (i8*)* @iota_34, !"kernel", i32 1}
!14 = !{void (i8*)* @iota_34, !"reqntidx", i32 80}
!15 = !{void (i8*)* @reduce_47, !"kernel", i32 1}
!16 = !{void (i8*)* @reduce_47, !"reqntidx", i32 32}
!17 = !{void (i8*, i8*, i8*)* @input_fusion_reduce_1, !"kernel", i32 1}
!18 = !{void (i8*, i8*, i8*)* @input_fusion_reduce_1, !"reqntidx", i32 160}
!19 = !{void (i8*, i8*, i8*, i8*, i8*)* @fusion_7, !"kernel", i32 1}
!20 = !{void (i8*, i8*, i8*, i8*, i8*)* @fusion_7, !"reqntidx", i32 2}
!21 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!22 = !{i32 4, !"nvvm-reflect-ftz", i32 0}
!23 = !{i32 0, i32 32}
!24 = !{i32 0, i32 8}
!25 = !{i32 0, i32 4}
!26 = !{}
!27 = !{i32 0, i32 256}
!28 = !{i32 0, i32 80}
!29 = !{i32 0, i32 160}
!30 = !{i32 0, i32 2}
