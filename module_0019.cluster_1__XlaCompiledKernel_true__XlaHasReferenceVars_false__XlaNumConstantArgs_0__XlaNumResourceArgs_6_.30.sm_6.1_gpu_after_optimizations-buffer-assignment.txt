BufferAssignment:
allocation 0: 0x7f56c05d57d0, size 32, output shape is |(f32[], f32[], s64[], s64[])|, maybe-live-out:
 value: <7 tuple.29{} @0> (size=32,offset=0): (f32[], f32[], s64[], s64[])
allocation 1: 0x7f56c05d5880, size 4, parameter 1, shape |f32[]| at ShapeIndex {}:
 value: <1 arg1.2 @0> (size=4,offset=0): f32[]
allocation 2: 0x7f56c05d5930, size 4, parameter 0, shape |f32[]| at ShapeIndex {}:
 value: <0 arg0.1 @0> (size=4,offset=0): f32[]
allocation 3: 0x7f56c05d59e0, size 8, maybe-live-out:
 value: <9 fusion.4{0} @0> (size=8,offset=0): s64[1]{0}
allocation 4: 0x7f56c05d5a90, size 8, maybe-live-out:
 value: <10 fusion.4{1} @0> (size=8,offset=0): s64[1]{0}
allocation 5: 0x7f56c05d5b40, size 8, parameter 4, shape |s64[]| at ShapeIndex {}:
 value: <4 arg4.5 @0> (size=8,offset=0): s64[]
allocation 6: 0x7f56c05d5bf0, size 8, constant:
 value: <6 constant_7 @0> (size=8,offset=0): s64[]
allocation 7: 0x7f56c05d5ca0, size 8, parameter 5, shape |s64[]| at ShapeIndex {}:
 value: <5 arg5.6 @0> (size=8,offset=0): s64[]
allocation 8: 0x7f56c05d5d50, size 4, maybe-live-out:
 value: <12 fusion.5{0} @0> (size=4,offset=0): f32[1]{0}
allocation 9: 0x7f56c05d5e00, size 4, maybe-live-out:
 value: <13 fusion.5{1} @0> (size=4,offset=0): f32[1]{0}
allocation 10: 0x7f56c05d5eb0, size 4, parameter 2, shape |f32[]| at ShapeIndex {}:
 value: <2 arg2.3 @0> (size=4,offset=0): f32[]
allocation 11: 0x7f56c05d5f60, size 4, parameter 3, shape |f32[]| at ShapeIndex {}:
 value: <3 arg3.4 @0> (size=4,offset=0): f32[]
allocation 12: 0x7f56c05d6010, size 144, preallocated-temp:
 value: <8 fusion.4{} @0> (size=16,offset=0): (s64[1]{0}, s64[1]{0})
 value: <11 fusion.5{} @0> (size=16,offset=128): (f32[1]{0}, f32[1]{0})

Total bytes used: 240 (240B)

Used values:
<0 arg0.1 @0>
 positions:
  arg0.1
 uses:
  fusion.5, operand 2
 from instruction:%arg0.1 = f32[] parameter(0), parameter_replication={false}, metadata={op_name="XLA_Args"}
<1 arg1.2 @0>
 positions:
  arg1.2
 uses:
  fusion.5, operand 3
 from instruction:%arg1.2 = f32[] parameter(1), parameter_replication={false}, metadata={op_name="XLA_Args"}
<2 arg2.3 @0>
 positions:
  arg2.3
 uses:
  fusion.5, operand 0
 from instruction:%arg2.3 = f32[] parameter(2), parameter_replication={false}, metadata={op_name="XLA_Args"}
<3 arg3.4 @0>
 positions:
  arg3.4
 uses:
  fusion.5, operand 1
 from instruction:%arg3.4 = f32[] parameter(3), parameter_replication={false}, metadata={op_name="XLA_Args"}
<4 arg4.5 @0>
 positions:
  arg4.5
 uses:
  fusion.4, operand 0
 from instruction:%arg4.5 = s64[] parameter(4), parameter_replication={false}, metadata={op_name="XLA_Args"}
<5 arg5.6 @0>
 positions:
  arg5.6
 uses:
  fusion.4, operand 2
 from instruction:%arg5.6 = s64[] parameter(5), parameter_replication={false}, metadata={op_name="XLA_Args"}
<6 constant_7 @0>
 positions:
  constant_7
 uses:
  fusion.4, operand 1
  fusion.4, operand 3
 from instruction:%constant_7 = s64[] constant(1), metadata={op_type="AssignAddVariableOp" op_name="Adam/Adam/AssignAddVariableOp"}
<7 tuple.29{} @0>
 positions:
  tuple.29 {}
 uses:
 from instruction:%tuple.29 = (f32[], f32[], s64[], s64[]) tuple(f32[] %bitcast.2, f32[] %bitcast.3, s64[] %bitcast, s64[] %bitcast.1), metadata={op_name="XLA_Retvals"}
<8 fusion.4{} @0>
 positions:
  fusion.4 {}
 uses:
  get-tuple-element, operand 0 {}
  get-tuple-element.1, operand 0 {}
 from instruction:%fusion.4 = (s64[1]{0}, s64[1]{0}) fusion(s64[] %arg4.5, s64[] %constant_7, s64[] %arg5.6, s64[] %constant_7), kind=kInput, calls=%horizontally_fused_computation
<9 fusion.4{0} @0>
 positions:
  fusion.4 {0}
  tuple.29 {2}
  get-tuple-element
  bitcast
 uses:
  bitcast, operand 0
  tuple.29, operand 2
 from instruction:%fusion.4 = (s64[1]{0}, s64[1]{0}) fusion(s64[] %arg4.5, s64[] %constant_7, s64[] %arg5.6, s64[] %constant_7), kind=kInput, calls=%horizontally_fused_computation
<10 fusion.4{1} @0>
 positions:
  fusion.4 {1}
  tuple.29 {3}
  get-tuple-element.1
  bitcast.1
 uses:
  bitcast.1, operand 0
  tuple.29, operand 3
 from instruction:%fusion.4 = (s64[1]{0}, s64[1]{0}) fusion(s64[] %arg4.5, s64[] %constant_7, s64[] %arg5.6, s64[] %constant_7), kind=kInput, calls=%horizontally_fused_computation
<11 fusion.5{} @0>
 positions:
  fusion.5 {}
 uses:
  get-tuple-element.2, operand 0 {}
  get-tuple-element.3, operand 0 {}
 from instruction:%fusion.5 = (f32[1]{0}, f32[1]{0}) fusion(f32[] %arg2.3, f32[] %arg3.4, f32[] %arg0.1, f32[] %arg1.2), kind=kInput, calls=%horizontally_fused_computation.1
<12 fusion.5{0} @0>
 positions:
  fusion.5 {0}
  tuple.29 {0}
  get-tuple-element.2
  bitcast.2
 uses:
  bitcast.2, operand 0
  tuple.29, operand 0
 from instruction:%fusion.5 = (f32[1]{0}, f32[1]{0}) fusion(f32[] %arg2.3, f32[] %arg3.4, f32[] %arg0.1, f32[] %arg1.2), kind=kInput, calls=%horizontally_fused_computation.1
<13 fusion.5{1} @0>
 positions:
  fusion.5 {1}
  tuple.29 {1}
  get-tuple-element.3
  bitcast.3
 uses:
  bitcast.3, operand 0
  tuple.29, operand 1
 from instruction:%fusion.5 = (f32[1]{0}, f32[1]{0}) fusion(f32[] %arg2.3, f32[] %arg3.4, f32[] %arg0.1, f32[] %arg1.2), kind=kInput, calls=%horizontally_fused_computation.1


HloLiveRange (max 18):
  InstructionSequence:
    0:constant_7
    1:arg5.6
    2:arg4.5
    3:arg3.4
    4:arg2.3
    5:arg1.2
    6:arg0.1
    7:fusion.5
    8:get-tuple-element.3
    9:bitcast.3
    10:get-tuple-element.2
    11:bitcast.2
    12:fusion.4
    13:get-tuple-element.1
    14:bitcast.1
    15:get-tuple-element
    16:bitcast
    17:tuple.29
  BufferLiveRange:
    arg0.1{}:0-18
    arg1.2{}:0-18
    arg2.3{}:0-18
    arg3.4{}:0-18
    arg4.5{}:0-18
    arg5.6{}:0-18
    constant_7{}:0-12
    tuple.29{}:17-18
    fusion.4{}:12-15
    fusion.4{0}:12-18
    fusion.4{1}:12-18
    fusion.5{}:7-10
    fusion.5{0}:7-18
    fusion.5{1}:7-18
  Live ranges at 17 (peak):
    arg0.1: 4 bytes
    arg1.2: 4 bytes
    arg2.3: 4 bytes
    arg3.4: 4 bytes
    arg4.5: 8 bytes
    arg5.6: 8 bytes
    tuple.29: 32 bytes
    fusion.4: 16 bytes
    fusion.4: 16 bytes
    fusion.5: 16 bytes
    fusion.5: 16 bytes
